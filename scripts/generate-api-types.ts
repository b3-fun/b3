#!/usr/bin/env tsx
import { execSync } from "child_process";
import fs from "fs";
import path from "path";

async function generateAPITypes() {
  try {
    console.log("üöÄ Starting API types generation...\n");

    const specPath = "https://mainnet.anyspend.com/openapi.json";
    const typesDir = path.join(process.cwd(), "packages", "sdk", "src", "anyspend", "types");
    const typesPath = path.join(typesDir, "api.ts");

    if (!fs.existsSync(typesDir)) {
      fs.mkdirSync(typesDir, { recursive: true });
    }

    try {
      const command = `npx openapi-typescript "${specPath}" -o "${typesPath}"`;
      console.log(`üîÑ Running openapi-typescript...`);

      execSync(command, {
        stdio: "inherit",
        cwd: process.cwd(),
      });

      console.log("‚úÖ TypeScript types generated successfully!");

      console.log("üßπ Cleaning up redundant never fields...");
      let content = fs.readFileSync(typesPath, "utf8");

      content = content
        .replace(
          /^\s+(put|post|delete|options|head|patch|trace|get|requestBody|query|header|path|cookie)\?: never;\n/gm,
          "",
        )
        .replace(/\s*parameters: {\s*};\s*\n/gm, "")
        .replace(/\s*headers: {\s*\[name: string\]: unknown;\s*};\s*\n/gm, "");

      fs.writeFileSync(typesPath, content);
      console.log("‚úÖ Redundant fields removed");

      console.log("üíÖ Formatting with Prettier...");
      execSync(`npx prettier --write "${typesPath}"`, {
        stdio: "inherit",
        cwd: process.cwd(),
      });
      console.log("‚úÖ Formatted successfully!");
    } catch (error) {
      console.error("‚ùå Error generating TypeScript types:", error);
      throw error;
    }

    console.log("\n‚úçÔ∏è  Adding file header...");

    const headerComment = `/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

`;

    const existingContent = fs.readFileSync(typesPath, "utf8");
    if (!existingContent.startsWith("/**")) {
      fs.writeFileSync(typesPath, headerComment + existingContent);
    }
    console.log("‚úÖ Header comment added");

    console.log("\nüéâ API types generation completed successfully!");
    console.log(` spec: ${specPath}`);
    console.log(` types: ${typesPath}`);
  } catch (error) {
    console.error("\n‚ùå Error in API types generation:", error);
    process.exit(1);
  }
}

// Run the generator when script is executed directly
void generateAPITypes();
