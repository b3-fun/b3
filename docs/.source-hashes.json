[
  {
    "sourceFile": "quickstart.mdx",
    "sourceHash": "CiMjIyBTdGVwIDE6IEluc3RhbGwgdGhlIEIzIFNESwo8U3RlcHM+CiAgPFN0ZXAgdGl0bGU9Ikluc3RhbGwgdGhlIFNESyBwYWNrYWdlIj4KICAgIENob29zZSB5b3VyIHByZWZlcnJlZCBwYWNrYWdlIG1hbmFnZXIgdG8gaW5zdGFsbCB0aGUgQjMgU0RLOgoKICAgIDxDb2RlR3JvdXA+CiAgICBgYGBiYXNoIG5wbQogICAgbnBtIGluc3RhbGwgQGIzZG90ZnVuL3NkawogICAgYGBgCiAgICBgYGBiYXNoIHBucG0KICAgIHBucG0gYWRkIEBiM2RvdGZ1bi9zZGsKICAgIGBgYAogICAgYGBgYmFzaCB5YXJuCiAgICB5YXJuIGFkZCBAYjNkb3RmdW4vc2RrCiAgICBgYGAKICAgIDwvQ29kZUdyb3VwPgoKICAgIDxUaXA+VGhlIEIzIFNESyBpbmNsdWRlcyBUeXBlU2NyaXB0IGRlZmluaXRpb25zIG91dCBvZiB0aGUgYm94ITwvVGlwPgogIDwvU3RlcD4KCiAgPFN0ZXAgdGl0bGU9IkltcG9ydCBDU1Mgc3R5bGVzIj4KICAgIEltcG9ydCB0aGUgZGVmYXVsdCBzdHlsZXMgaW4geW91ciBhcHBsaWNhdGlvbjoKCiAgICBgYGB0eXBlc2NyaXB0CiAgICBpbXBvcnQgIkBiM2RvdGZ1bi9zZGsvaW5kZXguY3NzIjsKICAgIGBgYAogIDwvU3RlcD4KPC9TdGVwcz4KCiMjIyBTdGVwIDI6IEFkZCBCM1Byb3ZpZGVyCldyYXAgdGhlIEIzUHJvdmlkZXIgYXJvdW5kIHlvdXIgYXBwbGljYXRpb24ncyByb290OgoKYGBgdHN4CmltcG9ydCB7IEIzUHJvdmlkZXIsIFNpZ25JbldpdGhCMyB9IGZyb20gIkBiM2RvdGZ1bi9zZGsvZ2xvYmFsLWFjY291bnQvcmVhY3QiOwoKZnVuY3Rpb24gQXBwKCkgewogIHJldHVybiAoCiAgICA8QjNQcm92aWRlciBlbnZpcm9ubWVudD0icHJvZHVjdGlvbiIgcGFydG5lcklkPSJ5b3VyLWF3ZXNvbWUtcGFydG5lci1pZCI+CiAgICAgIHtjaGlsZHJlbn0KICAgIDwvQjNQcm92aWRlcj4KICApOwp9CmBgYAoKCiMjIyBTdGVwIDM6IFVzZSB0aGUgQjMgU0RLCjxBY2NvcmRpb25Hcm91cD4KIDxBY2NvcmRpb24gaWNvbj0ic3dhcCIgdGl0bGU9Ikluc3RhbnQgQWNjb3VudHMiPgogICAgRW5hYmxlIGdsb2JhbCBhY2NvdW50cyBhdXRoZW50aWNhdGlvbiB3aXRoIEIzOgoKICAgIGBgYHRzeAogICAgaW1wb3J0IHsgU2lnbkluV2l0aEIzIH0gZnJvbSAiQGIzZG90ZnVuL3Nkay9nbG9iYWwtYWNjb3VudC9yZWFjdCI7CgogICAgZnVuY3Rpb24gQXBwKCkgewogICAgICByZXR1cm4gKAogICAgICAgIDxCM1Byb3ZpZGVyIGVudmlyb25tZW50PSJwcm9kdWN0aW9uIiBwYXJ0bmVySWQ9InlvdXItYXdlc29tZS1wYXJ0bmVyLWlkIj4KICAgICAgICAgIDxTaWduSW5XaXRoQjMKICAgICAgICAgICAgcHJvdmlkZXI9e3sgc3RyYXRlZ3k6ICJnb29nbGUiIH19CiAgICAgICAgICAgIHBhcnRuZXJJZD0ieW91ci1wYXJ0bmVyLWlkIgogICAgICAgICAgICBvbkxvZ2luU3VjY2Vzcz17KGdsb2JhbEFjY291bnQpID0+IHsKICAgICAgICAgICAgICBjb25zb2xlLmxvZygiQXV0aGVudGljYXRlZDoiLCBnbG9iYWxBY2NvdW50KTsKICAgICAgICAgICAgfX0KICAgICAgICAgIC8+CiAgICAgICAgPC9CM1Byb3ZpZGVyPgogICAgICApOwogICAgfQogICAgYGBgCiAgPC9BY2NvcmRpb24+CiAgPEFjY29yZGlvbiBpY29uPSJzd2FwIiB0aXRsZT0iQWNjZXNzIExpcXVpZGl0eSI+CiAgICBFbmFibGUgY3Jvc3MtY2hhaW4gc3dhcHMgJiBjdXN0b20gaW50ZXJhY3Rpb25zIHdpdGggQW55U3BlbmQ6CgogICAgYGBgdHN4CiAgICBpbXBvcnQgeyBBbnlTcGVuZCB9IGZyb20gIkBiM2RvdGZ1bi9zZGsvYW55c3BlbmQvcmVhY3QiOwoKICAgIGZ1bmN0aW9uIFN3YXBQYWdlKCkgewogICAgICByZXR1cm4gPEFueVNwZW5kIG1vZGU9InBhZ2UiIC8+OwogICAgfQogICAgYGBgCiAgPC9BY2NvcmRpb24+CjwvQWNjb3JkaW9uR3JvdXA+CgojIyMgU3RlcCA0OiBFeHBsb3JlIHRoZSBFY29zeXN0ZW0KCjxDYXJkIHRpdGxlPSJEaXNjb3ZlciBCMyBFY29zeXN0ZW0iIGljb249Imdsb2JlIiBocmVmPSIvZWNvc3lzdGVtL2ludHJvZHVjdGlvbiI+CiAgTGVhcm4gYWJvdXQgdGhlIGNvbXBsZXRlIEIzIGVjb3N5c3RlbSwgdG9vbHMsIGFuZCByZXNvdXJjZXMgYXZhaWxhYmxlIGZvciBidWlsZGVycy4KPC9DYXJkPgoKIyMgV2hhdCdzIE5leHQ/CgpOb3cgdGhhdCB5b3UgaGF2ZSB0aGUgQjMgU0RLIGluc3RhbGxlZCwgZXhwbG9yZSB0aGVzZSBwb3dlcmZ1bCBmZWF0dXJlczoKCjxDYXJkR3JvdXAgY29scz17Mn0+Cgo8Q2FyZCB0aXRsZT0iR2xvYmFsIEFjY291bnRzIiBpY29uPSJ1c2VyIiBocmVmPSIvc2RrL2dsb2JhbC1hY2NvdW50L2ludHJvZHVjdGlvbiI+CiAgU2VhbWxlc3MgYXV0aGVudGljYXRpb24gYW5kIHVzZXIgbWFuYWdlbWVudCBhY3Jvc3MgdGhlIEIzIGVjb3N5c3RlbS4KPC9DYXJkPgoKPENhcmQgdGl0bGU9IkRhdGEgQVBJIiBpY29uPSJ1c2VyIiBocmVmPSIvZGF0YS9hcGktcmVmZXJlbmNlL2ludHJvZHVjdGlvbiI+CiAgQWNjZXNzIGJsb2NrY2hhaW4gZGF0YSBmb3IgdG9rZW5zLCBORlRzLCBwcm9maWxlcywgYW5kIGFuYWx5dGljcy4KPC9DYXJkPgoKPENhcmQgdGl0bGU9IkFueVNwZW5kIFNESyIgaWNvbj0iYXJyb3dzLWNyb3NzIiBocmVmPSIvYW55c3BlbmQvaW50cm9kdWN0aW9uIj4KICBDcm9zcy1jaGFpbiBzd2FwcywgTkZUIG1pbnRpbmcsIGFuZCBibG9ja2NoYWluIG9wZXJhdGlvbnMuCjwvQ2FyZD4KCjxDYXJkIHRpdGxlPSJFeGFtcGxlcyAmIERlbW9zIiBpY29uPSJjb2RlIiBocmVmPSIvc2RrL2ludHJvZHVjdGlvbiI+CiAgUmVhZHktdG8tdXNlIGV4YW1wbGVzIGFuZCBpbnRlZ3JhdGlvbiBwYXR0ZXJucy4KPC9DYXJkPgoKPC9DYXJkR3JvdXA+CgojIyBQbGF0Zm9ybSBTdXBwb3J0Cgp8IEZlYXR1cmUgICAgICAgICAgIHwgUmVhY3QgV2ViIHwgUmVhY3QgTmF0aXZlIHwKfCAtLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLSB8CnwgQW55U3BlbmQgICAgICAgICAgfCDinIUgICAgICAgICB8IOKdjCAgICAgICAgICAgIHwKfCBHbG9iYWwgQWNjb3VudHMgICB8IOKchSAgICAgICAgIHwg4pyFICAgICAgICAgICAgfAp8IEhlYWRsZXNzIFNlcnZpY2VzIHwg4pyFICAgICAgICAgfCDinIUgICAgICAgICAgICB8Cgo8Tm90ZT4KICAqKk5lZWQgaGVscD8qKiBKb2luIG91ciBbRGlzY29yZCBjb21tdW5pdHldKGh0dHBzOi8vZGlzY29yZC5nZy9iM2RvdGZ1bikgb3IgY2hlY2sgb3V0IHRoZQogIFtlY29zeXN0ZW0gaW50cm9kdWN0aW9uXSgvZWNvc3lzdGVtL2ludHJvZHVjdGlvbikgZm9yIGNvbXByZWhlbnNpdmUgcmVzb3VyY2VzLgo8L05vdGU+Cg==",
    "lastUpdated": "2025-10-31T02:11:47.897Z"
  },
  {
    "sourceFile": "index.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-10-31T02:13:15.543Z"
  },
  {
    "sourceFile": "ai-optimized.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-09-03T02:17:16.477Z"
  },
  {
    "sourceFile": "README.md",
    "sourceHash": "IyBNaW50bGlmeSBTdGFydGVyIEtpdAoKVXNlIHRoZSBzdGFydGVyIGtpdCB0byBnZXQgeW91ciBkb2NzIGRlcGxveWVkIGFuZCByZWFkeSB0byBjdXN0b21pemUuCgpDbGljayB0aGUgZ3JlZW4gKipVc2UgdGhpcyB0ZW1wbGF0ZSoqIGJ1dHRvbiBhdCB0aGUgdG9wIG9mIHRoaXMgcmVwbyB0byBjb3B5IHRoZSBNaW50bGlmeSBzdGFydGVyIGtpdC4gVGhlIHN0YXJ0ZXIga2l0IGNvbnRhaW5zIGV4YW1wbGVzIHdpdGgKCi0gR3VpZGUgcGFnZXMKLSBOYXZpZ2F0aW9uCi0gQ3VzdG9taXphdGlvbnMKLSBBUEkgcmVmZXJlbmNlIHBhZ2VzCi0gVXNlIG9mIHBvcHVsYXIgY29tcG9uZW50cwoKKipbRm9sbG93IHRoZSBmdWxsIHF1aWNrc3RhcnQgZ3VpZGVdKGh0dHBzOi8vc3RhcnRlci5taW50bGlmeS5jb20vcXVpY2tzdGFydCkqKgoKIyMgRGV2ZWxvcG1lbnQKCkluc3RhbGwgdGhlIFtNaW50bGlmeSBDTEldKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL21pbnQpIHRvIHByZXZpZXcgeW91ciBkb2N1bWVudGF0aW9uIGNoYW5nZXMgbG9jYWxseS4gVG8gaW5zdGFsbCwgdXNlIHRoZSBmb2xsb3dpbmcgY29tbWFuZDoKCmBgYApucG0gaSAtZyBtaW50CmBgYAoKUnVuIHRoZSBmb2xsb3dpbmcgY29tbWFuZCBhdCB0aGUgcm9vdCBvZiB5b3VyIGRvY3VtZW50YXRpb24sIHdoZXJlIHlvdXIgYGRvY3MuanNvbmAgaXMgbG9jYXRlZDoKCmBgYAptaW50IGRldgpgYGAKClZpZXcgeW91ciBsb2NhbCBwcmV2aWV3IGF0IGBodHRwOi8vbG9jYWxob3N0OjMwMDBgLgoKIyMgUHVibGlzaGluZyBjaGFuZ2VzCgpJbnN0YWxsIG91ciBHaXRIdWIgYXBwIGZyb20geW91ciBbZGFzaGJvYXJkXShodHRwczovL2Rhc2hib2FyZC5taW50bGlmeS5jb20vc2V0dGluZ3Mvb3JnYW5pemF0aW9uL2dpdGh1Yi1hcHApIHRvIHByb3BhZ2F0ZSBjaGFuZ2VzIGZyb20geW91ciByZXBvIHRvIHlvdXIgZGVwbG95bWVudC4gQ2hhbmdlcyBhcmUgZGVwbG95ZWQgdG8gcHJvZHVjdGlvbiBhdXRvbWF0aWNhbGx5IGFmdGVyIHB1c2hpbmcgdG8gdGhlIGRlZmF1bHQgYnJhbmNoLgoKIyMgTmVlZCBoZWxwPwoKIyMjIFRyb3VibGVzaG9vdGluZwoKLSBJZiB5b3VyIGRldiBlbnZpcm9ubWVudCBpc24ndCBydW5uaW5nOiBSdW4gYG1pbnQgdXBkYXRlYCB0byBlbnN1cmUgeW91IGhhdmUgdGhlIG1vc3QgcmVjZW50IHZlcnNpb24gb2YgdGhlIENMSS4KLSBJZiBhIHBhZ2UgbG9hZHMgYXMgYSA0MDQ6IE1ha2Ugc3VyZSB5b3UgYXJlIHJ1bm5pbmcgaW4gYSBmb2xkZXIgd2l0aCBhIHZhbGlkIGBkb2NzLmpzb25gLgoKIyMjIFJlc291cmNlcwoKLSBbTWludGxpZnkgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9taW50bGlmeS5jb20vZG9jcykKLSBbTWludGxpZnkgY29tbXVuaXR5XShodHRwczovL21pbnRsaWZ5LmNvbS9jb21tdW5pdHkpCg==",
    "lastUpdated": "2025-09-03T02:17:26.521Z"
  },
  {
    "sourceFile": "snippets/docs-config.mdx",
    "sourceHash": "ZXhwb3J0IGNvbnN0IGRvY3NDb25maWcgPSB7CiAgbmFtZTogIkIzIFNESyIsCiAgdGhlbWU6ICJtaW50IiwKICBjb2xvcnM6IHsKICAgIHByaW1hcnk6ICIjMDA3QUZGIiwKICAgIGxpZ2h0OiAiIzREQTZGRiIsCiAgICBkYXJrOiAiIzAwNTZDQyIsCiAgfSwKCm5hdmJhcjogewpsaW5rczogWwp7CmxhYmVsOiAiTGl2ZSBEZW1vIiwKaHJlZjogImh0dHBzOi8vYW55c3BlbmQuY29tIiwKfSwKewpsYWJlbDogIkIzIE1haW5uZXQiLApocmVmOiAiaHR0cHM6Ly9kb2NzLmIzLmZ1biIsCn0sCl0sCnByaW1hcnk6IHsKdHlwZTogImJ1dHRvbiIsCmxhYmVsOiAiR2V0IFN0YXJ0ZWQiLApocmVmOiAiL3F1aWNrc3RhcnQiLAp9LAp9LAoKZ2xvYmFsQW5jaG9yczogWwp7CmFuY2hvcjogIkIzIEVjb3N5c3RlbSIsCmhyZWY6ICJodHRwczovL2RvY3MuYjMuZnVuIiwKaWNvbjogImdsb2JlIiwKfSwKewphbmNob3I6ICJEaXNjb3JkIiwKaHJlZjogImh0dHBzOi8vZGlzY29yZC5nZy9iM2RvdGZ1biIsCmljb246ICJkaXNjb3JkIiwKfSwKewphbmNob3I6ICJHaXRIdWIiLApocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL2IzLWZ1bi9iMyIsCmljb246ICJnaXRodWIiLAp9LApdLAoKZm9vdGVyOiB7CnNvY2lhbHM6IHsKeDogImh0dHBzOi8veC5jb20vYjNkb3RmdW4iLApnaXRodWI6ICJodHRwczovL2dpdGh1Yi5jb20vYjMtZnVuL2IzIiwKZGlzY29yZDogImh0dHBzOi8vZGlzY29yZC5nZy9iM2RvdGZ1biIsCn0sCn0sCn07Cgo7Cg==",
    "lastUpdated": "2025-09-03T02:17:33.365Z"
  },
  {
    "sourceFile": "snippets/contact-info.mdx",
    "sourceHash": "CmV4cG9ydCBjb25zdCBTdXBwb3J0TGlua3MgPSAoKSA9PiAoCiAgPGRpdj4KICAgIDxoMz5OZWVkIEhlbHA/PC9oMz4KICAgIDx1bD4KICAgICAgPGxpPgogICAgICAgIPCfk5ogPGEgaHJlZj0iaHR0cHM6Ly9kb2NzLmIzLmZ1biI+QjMgRG9jdW1lbnRhdGlvbjwvYT4KICAgICAgPC9saT4KICAgICAgPGxpPgogICAgICAgIPCfkqwgPGEgaHJlZj0iaHR0cHM6Ly9kaXNjb3JkLmdnL2IzZG90ZnVuIj5Kb2luIG91ciBEaXNjb3JkPC9hPgogICAgICA8L2xpPgogICAgICA8bGk+CiAgICAgICAg8J+QmyA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vYjMtZnVuL2IzL2lzc3VlcyI+UmVwb3J0IElzc3VlcyBvbiBHaXRIdWI8L2E+CiAgICAgIDwvbGk+CiAgICAgIDxsaT4KICAgICAgICDwn5OnIEVtYWlsIHVzIGF0IDxhIGhyZWY9Im1haWx0bzpzdXBwb3J0QGIzLmZ1biI+c3VwcG9ydEBiMy5mdW48L2E+CiAgICAgIDwvbGk+CiAgICA8L3VsPgogIDwvZGl2PgopOwoKZXhwb3J0IGNvbnN0IENvbW11bml0eVJlc291cmNlcyA9ICgpID0+ICgKICA8ZGl2PgogICAgPGgzPkNvbW11bml0eSAmIFJlc291cmNlczwvaDM+CiAgICA8ZGl2IHN0eWxlPXt7IGRpc3BsYXk6ICJncmlkIiwgZ3JpZFRlbXBsYXRlQ29sdW1uczogIjFmciAxZnIiLCBnYXA6ICIxcmVtIiB9fT4KICAgICAgPGRpdj4KICAgICAgICA8aDQ+8J+OriBUcnkgSXQgTGl2ZTwvaDQ+CiAgICAgICAgPHA+CiAgICAgICAgICA8YSBocmVmPSJodHRwczovL2FueXNwZW5kLmNvbSI+QW55U3BlbmQgRGVtbzwvYT4gLSBUcnkgb3VyIFNESyBpbiBhY3Rpb24KICAgICAgICA8L3A+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2PgogICAgICAgIDxoND7wn5KsIEdldCBTdXBwb3J0PC9oND4KICAgICAgICA8cD4KICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZGlzY29yZC5nZy9iM2RvdGZ1biI+RGlzY29yZCBDb21tdW5pdHk8L2E+IC0gSm9pbiB0aGUgY29udmVyc2F0aW9uCiAgICAgICAgPC9wPgogICAgICA8L2Rpdj4KICAgICAgPGRpdj4KICAgICAgICA8aDQ+8J+UpyBDb250cmlidXRlPC9oND4KICAgICAgICA8cD4KICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9iMy1mdW4vYjMiPkdpdEh1YiBSZXBvc2l0b3J5PC9hPiAtIENvbnRyaWJ1dGUgdG8gdGhlIHByb2plY3QKICAgICAgICA8L3A+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2PgogICAgICAgIDxoND7wn4yQIEVjb3N5c3RlbTwvaDQ+CiAgICAgICAgPHA+CiAgICAgICAgICA8YSBocmVmPSJodHRwczovL2RvY3MuYjMuZnVuIj5CMyBEb2NzPC9hPiAtIEV4cGxvcmUgdGhlIGJyb2FkZXIgZWNvc3lzdGVtCiAgICAgICAgPC9wPgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2PgopOwoKZXhwb3J0IGNvbnN0IENvbnRhY3RJbmZvID0gKHsgdHlwZSA9ICJnZW5lcmFsIiB9KSA9PiB7CiAgY29uc3QgZW1haWwgPQogICAgdHlwZSA9PT0gInN1cHBvcnQiCiAgICAgID8gInN1cHBvcnRAYjMuZnVuIgogICAgICA6IHR5cGUgPT09ICJwYXJ0bmVyc2hpcHMiCiAgICAgICAgPyAicGFydG5lcnNoaXBzQGIzLmZ1biIKICAgICAgICA6IHR5cGUgPT09ICJkZXZlbG9wZXIiCiAgICAgICAgICA/ICJkZXZlbG9wZXJzQGIzLmZ1biIKICAgICAgICAgIDogInN1cHBvcnRAYjMuZnVuIjsKCnJldHVybiAoCgo8ZGl2PgogIDxwPgogICAg8J+TpyA8YSBocmVmPXtgbWFpbHRvOiR7ZW1haWx9YH0+e2VtYWlsfTwvYT4KICA8L3A+CjwvZGl2PgopOyB9OwoKOwo=",
    "lastUpdated": "2025-09-03T02:17:52.318Z"
  },
  {
    "sourceFile": "snippets/code-examples.mdx",
    "sourceHash": "IyBDb2RlIEV4YW1wbGVzCgojIyBJbnN0YWxsYXRpb24KCmBgYGJhc2ggdGl0bGU9Ikluc3RhbGwgQjMgU0RLIiBpY29uPSJkb3dubG9hZCIKbnBtIGluc3RhbGwgQGIzZG90ZnVuL3NkawpgYGAKCiMjIEJhc2ljIFNldHVwCgpgYGB0c3ggdGl0bGU9IkltcG9ydCBTREsgQ29tcG9uZW50cyIgaWNvbj0icmVhY3QiCmltcG9ydCAiQGIzZG90ZnVuL3Nkay9pbmRleC5jc3MiOwppbXBvcnQgeyBBbnlzcGVuZFByb3ZpZGVyLCBCM1Byb3ZpZGVyIH0gZnJvbSAiQGIzZG90ZnVuL3NkayI7CmBgYAoKIyMgTkZUIFB1cmNoYXNlIENvbXBvbmVudAoKYGBgdHN4IHRpdGxlPSJORlQgQnV0dG9uIEV4YW1wbGUiIGljb249InNob3BwaW5nLWNhcnQiIGxpbmVzCmltcG9ydCB7IEFueVNwZW5kTkZUQnV0dG9uIH0gZnJvbSAiQGIzZG90ZnVuL3Nkay9hbnlzcGVuZC9yZWFjdCI7CgpmdW5jdGlvbiBORlRDYXJkKCkgewogIHJldHVybiAoCiAgICA8QW55U3BlbmRORlRCdXR0b24KICAgICAgbmZ0Q29udHJhY3Q9e3sKICAgICAgICBjaGFpbklkOiA4MzMzLAogICAgICAgIGNvbnRyYWN0QWRkcmVzczogIjB4OWMyNzVmZjE2MzQ1MTlFOUI1NDQ5ZWM3OWNkOTM5QjVGOTAwNTY0ZCIsCiAgICAgICAgcHJpY2U6ICI1MDAwMDAwMDAwMDAwMDAwMDAiLAogICAgICAgIGN1cnJlbmN5OiB7IHN5bWJvbDogIkVUSCIsIGRlY2ltYWxzOiAxOCB9LAogICAgICB9fQogICAgICByZWNpcGllbnRBZGRyZXNzPXt1c2VyQWRkcmVzc30KICAgICAgb25TdWNjZXNzPXt0eEhhc2ggPT4gc2hvd1N1Y2Nlc3ModHhIYXNoKX0KICAgIC8+CiAgKTsKfQpgYGAKCiMjIENyb3NzLUNoYWluIFN3YXAKCmBgYHRzeCB0aXRsZT0iQW55U3BlbmQgUGFnZSBNb2RlIiBpY29uPSJhcnJvd3Mtcm90YXRlIiBoaWdobGlnaHQ9ezYtOH0KaW1wb3J0IHsgQW55U3BlbmQgfSBmcm9tICJAYjNkb3RmdW4vc2RrL2FueXNwZW5kL3JlYWN0IjsKCmZ1bmN0aW9uIENyb3NzQ2hhaW5Td2FwKCkgewogIHJldHVybiA8QW55U3BlbmQgbW9kZT0icGFnZSIgcmVjaXBpZW50QWRkcmVzcz17dXNlckFkZHJlc3N9IG9uU3VjY2Vzcz17dHhIYXNoID0+IHVwZGF0ZVBvcnRmb2xpbyh0eEhhc2gpfSAvPjsKfQpgYGAKCiMjIEF1dGhlbnRpY2F0aW9uCgpgYGB0c3ggdGl0bGU9IkIzIEF1dGhlbnRpY2F0aW9uIFNldHVwIiBpY29uPSJ1c2VyLXNoaWVsZCIgZXhwYW5kYWJsZQppbXBvcnQgeyBCM1Byb3ZpZGVyLCBTaWduSW5XaXRoQjMgfSBmcm9tICJAYjNkb3RmdW4vc2RrL2dsb2JhbC1hY2NvdW50L3JlYWN0IjsKCmZ1bmN0aW9uIEFwcCgpIHsKICByZXR1cm4gKAogICAgPEIzUHJvdmlkZXIgZW52aXJvbm1lbnQ9InByb2R1Y3Rpb24iIHBhcnRuZXJJZD0ieW91ci1hd2Vzb21lLXBhcnRuZXItaWQiPgogICAgICA8U2lnbkluV2l0aEIzCiAgICAgICAgcHJvdmlkZXI9e3sgc3RyYXRlZ3k6ICJnb29nbGUiIH19CiAgICAgICAgcGFydG5lcklkPSJ5b3VyLXBhcnRuZXItaWQiCiAgICAgICAgb25Mb2dpblN1Y2Nlc3M9e2dsb2JhbEFjY291bnQgPT4gewogICAgICAgICAgY29uc29sZS5sb2coIkF1dGhlbnRpY2F0ZWQ6IiwgZ2xvYmFsQWNjb3VudCk7CiAgICAgICAgfX0KICAgICAgLz4KICAgIDwvQjNQcm92aWRlcj4KICApOwp9CmBgYAoKIyMgV2FsbGV0IENvbm5lY3Rpb24KCmBgYHRzeCB0aXRsZT0iQ29ubmVjdCBXYWxsZXQgdG8gQjMiIGljb249IndhbGxldCIgZm9jdXM9ezgtMTJ9CmltcG9ydCB7IHVzZUNvbm5lY3QgfSBmcm9tICJAYjNkb3RmdW4vc2RrIjsKCmZ1bmN0aW9uIFdhbGxldEJ1dHRvbigpIHsKICBjb25zdCB7IGNvbm5lY3QsIGlzQ29ubmVjdGluZyB9ID0gdXNlQ29ubmVjdCgpOwoKICBjb25zdCBoYW5kbGVDb25uZWN0ID0gYXN5bmMgKCkgPT4gewogICAgdHJ5IHsKICAgICAgYXdhaXQgY29ubmVjdCh7CiAgICAgICAgY2hhaW5JZDogODMzMywKICAgICAgICBycGNVcmw6ICJodHRwczovL21haW5uZXQtcnBjLmIzLmZ1biIsCiAgICAgIH0pOwogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgY29uc29sZS5lcnJvcigiQ29ubmVjdGlvbiBmYWlsZWQ6IiwgZXJyb3IpOwogICAgfQogIH07CgogIHJldHVybiAoCiAgICA8YnV0dG9uIG9uQ2xpY2s9e2hhbmRsZUNvbm5lY3R9IGRpc2FibGVkPXtpc0Nvbm5lY3Rpbmd9PgogICAgICB7aXNDb25uZWN0aW5nID8gIkNvbm5lY3RpbmcuLi4iIDogIkNvbm5lY3QgdG8gQjMifQogICAgPC9idXR0b24+CiAgKTsKfQpgYGAK",
    "lastUpdated": "2025-10-31T02:13:33.173Z"
  },
  {
    "sourceFile": "snippets/brand-components.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-09-03T02:19:05.804Z"
  },
  {
    "sourceFile": "redirect/sdk.mdx",
    "sourceHash": "CjxOb3RlPllvdSBhcmUgYmVpbmcgcmVkaXJlY3RlZCB0byB0aGUgQjMgU0RLIHBhZ2UuICBbQ2xpY2sgaGVyZV0oL3Nkay9pbnRyb2R1Y3Rpb24pIHRvIGNvbnRpbnVlLjwvTm90ZT4K",
    "lastUpdated": "2025-09-03T02:19:55.231Z"
  },
  {
    "sourceFile": "redirect/ecosystem.mdx",
    "sourceHash": "CjxOb3RlPllvdSBhcmUgYmVpbmcgcmVkaXJlY3RlZCB0byB0aGUgQjMgRWNvc3lzdGVtIHBhZ2UuICBbQ2xpY2sgaGVyZV0oL2Vjb3N5c3RlbS9pbnRyb2R1Y3Rpb24pIHRvIGNvbnRpbnVlLjwvTm90ZT4K",
    "lastUpdated": "2025-09-03T02:20:00.628Z"
  },
  {
    "sourceFile": "sdk/introduction.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-10-31T02:14:24.899Z"
  },
  {
    "sourceFile": "protocol/whitepaper.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-10-31T02:16:24.691Z"
  },
  {
    "sourceFile": "protocol/tokenomics.mdx",
    "sourceHash": "CiMjIyAqKk92ZXJ2aWV3KioKCi0gVG9rZW4gbmFtZTogQjMgKEJhc2UpCi0gQ2hhaW46IEJhc2UKLSBUb3RhbCBTdXBwbHk6IDEwMCwwMDAsMDAwLDAwMAotIERlY2ltYWxzOiAxOAoKIyMjIFV0aWxpdHkKClRoZSBCMyB0b2tlbiBpcyB0aGUgZW5naW5lIHBvd2VyaW5nIHRoZSBPcGVuIEdhbWluZyBlY29zeXN0ZW0sIGRlc2lnbmVkIHRvIGdyb3csIHNjYWxlIGFuZCB0cmFuc2Zvcm0gZ2FtaW5nIGJ5IGVtcG93ZXJpbmcgcGxheWVycywgZ2FtZSBkZXZlbG9wZXJzICYgaG9sZGVycy4KCioqRm9yIFBsYXllcnM6KioKCi0g8J+lqSBzdGFrZSBcJEIzIHRvIHJlY2VpdmUgZXhwb3N1cmUgdG8gZnV0dXJlIEIzIEFwcENoYWlucwotIPCfpYcgdXNlIFwkQjMgdG8gZnVuZCAmIHB1Ymxpc2ggdGhlIGdhbWVzICYgZXhwZXJpZW5jZXMgeW91IGJlbGlldmUgaW4gYW5kIGVhcm4gcmV3YXJkcwotIPCfjq8gZ2V0IGVhcmx5IGFjY2VzcyB0byBnYW1lcyBhbmQgbmV3IGZlYXR1cmVzIG9uIEJTTU5UCi0g4piR77iPIHBhcnRpY2lwYXRlIGluIGdvdmVybmFuY2UgdG8gZGlyZWN0bHkgaW1wYWN0IHRoZSBmdXR1cmUgb2YgdGhlIEIzIGVjb3N5c3RlbQoKKipGb3IgR2FtZSBEZXZlbG9wZXJzOioqCgotIPCfqpkgYXBwbHkgJiByZWNlaXZlIGZ1bmRpbmcgdG8gZGV2ZWxvcCBhbmQgc2NhbGUgeW91ciBnYW1lCi0g8J+StCBlYXJuIHJlZmVycmFsIHJld2FyZHMgYWNyb3NzIGFsbCBwbGF5ZXJzIG9uIGFueSBHYW1lY2hhaW4KLSDwn5qBIHJlY2VpdmUgZnV0dXJlIGFpcmRyb3BzIChvciBncmFudHMpIGZyb20gaW5mcmFzdHJ1Y3R1cmUgcGFydG5lcnMKCkFkZGl0aW9uYWwgdXRpbGl0aWVzIGZvciBcJEIzIHdpbGwgYmUgYW5ub3VuY2VkIGFzIHRoZXkgYmVjb21lIGF2YWlsYWJsZS4KCiMjIyBEaXN0cmlidXRpb24gYW5kIEFsbG9jYXRpb24KCjxpbWcKICBzcmM9Ii9pbWFnZXMvdG9rZW4tYWxsb2NhdGlvbi5hdmlmIgogIGFsdD0iVG9rZW4gQWxsb2NhdGlvbiIKICBjbGFzc05hbWU9InJvdW5kZWQteGwiCi8+CgotICoqQ29tbXVuaXR5ICYgRWNvc3lzdGVtKio6IFRoaXMgYWxsb2NhdGlvbiBpcyB0byB0aGUgZ3Jvd3RoIG9mIHRoZSBCMyBlY29zeXN0ZW0gLSBmb3IgZ2FtZXJzLCBieSBnYW1lcnMuIEl0IGlzIHRvIGJ1aWxkIGFuIGVjb3N5c3RlbSBiZWxvbmdpbmcgdG8gdGhvc2Ugd2hvIHBsYXkgaW4gaXQ6IGFpcmRyb3BzLCB0b3VybmFtZW50cywgcGxheXRlc3RzLCBjb21tdW5pdHktbGVkIGdyYW50cywgcmVzZWFyY2ggJiBkZXZlbG9wbWVudCwgYW5kIG1hbnkgb3RoZXJzLgotICoqRm91bmRhdGlvbioqOiBUaGlzIGFsbG9jYXRpb24gd2lsbCBzdXBwb3J0IHRoZSBQbGF5ZXIxIEZvdW5kYXRpb24gYXMgaXQgY29udHJpYnV0ZXMgdG8gQjMgYW5kIE9wZW4gR2FtaW5nJ3MgdmlzaW9uIGFuZCBhZG9wdGlvbiwgaW5jbHVkaW5nIHN0cmF0ZWdpYyBncmFudHMvcGFydG5lcnNoaXBzLCBsZWdhbCBhbmQgY29tcGxpYW5jZSBuZWVkcywgYXVkaXRzLCBhbmQgb3RoZXIgb3BlcmF0aW9uYWwgZXhwZW5zZXMuCi0gKipUZWFtICYgQWR2aXNvcnMqKjogVGhpcyBhbGxvY2F0aW9uIGlzIGZvciBjb3JlIGNvbnRyaWJ1dG9ycyBcKyAxOCBhZHZpc29ycyB3aG8gcmVwcmVzZW50IHRoZSBiZXN0IG9mIGJvdGggZ2FtaW5nIHdvcmxkcyAtIGZyb20gQUFBIHRvIHdlYjMuIEFsbCB0ZWFtICYgYWR2aXNvcnMgYXJlIHN1YmplY3QgdG8gYSA0LXllYXIgdmVzdGluZyBzY2hlZHVsZTogMS15ZWFyIDI1JSBjbGlmZiwgd2l0aCBtb250aGx5IHVubG9ja3MgdGhlcmVhZnRlci4KLSAqKkludmVzdG9ycyoqOiBUaGlzIHBvcnRpb24gb2YgQjMgYWxsb2NhdGlvbiBpcyBmb3IgaW52ZXN0b3JzIHdobyBzdXBwb3J0ZWQgQjMncyBkZXZlbG9wbWVudCwgaW5jbHVkaW5nIDEwMFwrIGFuZ2VscyB3aG8gZ2F0aGVyZWQgZnJvbSBldmVyeSBjb3JuZXIgb2YgdGhlIGluZHVzdHJ54oCUZ2FtaW5nLCB3ZWIzLCBicmFuZHMsIGluZnJhc3RydWN0dXJl4oCUdG8gYjNsaWV2ZSBpbiBhbmQgc3VwcG9ydCBCMydzIHZpc2lvbi4gQWxsIHRlYW0gJiBhZHZpc29ycyBhcmUgc3ViamVjdCB0byBhIDQteWVhciB2ZXN0aW5nIHNjaGVkdWxlOiAxLXllYXIgMjUlIGNsaWZmLCB3aXRoIG1vbnRobHkgdW5sb2NrcyB0aGVyZWFmdGVyLgoKIyMjIFRva2VuIFVubG9jayBTY2hlZHVsZQoKPGltZwogIHNyYz0iL2ltYWdlcy90b2tlbi11bmxvY2stc2NoZWR1bGUuYXZpZiIKICBhbHQ9IlRva2VuIFVubG9jayBTY2hlZHVsZSIKICBjbGFzc05hbWU9InJvdW5kZWQteGwiCi8+",
    "lastUpdated": "2025-10-31T02:16:45.244Z"
  },
  {
    "sourceFile": "protocol/testnet.mdx",
    "sourceHash": "CiMjIENoYWluIEluZm9ybWF0aW9uCgo8Q2FyZCB0aXRsZT0iQ2hhaW4gSUQiPgogIGBgYHRleHQKICAxOTkzCiAgYGBgCiAgPE5vdGU+CiAgRnVuIGZhY3Q6IDE5OTMgaXMgdGhlIHllYXIgIkRvb20iIHdhcyByZWxlYXNlZCwgd2hpY2ggcmV2b2x1dGlvbml6ZWQgdGhlIGZpcnN0LXBlcnNvbiBzaG9vdGVyIGdlbnJlLgogIDwvTm90ZT4KPC9DYXJkPgoKPENhcmQgdGl0bGU9Ik5hdGl2ZSBUb2tlbiI+CiAgKipFdGhlciAoRVRIKSoqCiAgCiAgVGhlIHNhbWUgdG9rZW4gdXNlZCBvbiBFdGhlcmV1bSBtYWlubmV0LCBidXQgZm9yIHRlc3RpbmcgcHVycG9zZXMgb25seS4KPC9DYXJkPgoKIyMjIE5ldHdvcmsgRW5kcG9pbnRzCgo8VGFicz4KPFRhYiB0aXRsZT0iSFRUUCBSUEMiPgogIGBgYHRleHQgUlBDIEVuZHBvaW50CiAgaHR0cHM6Ly90ZXN0bmV0LXJwYy5iMy5mdW4KICBgYGAKICAKICBVc2UgdGhpcyBlbmRwb2ludCBmb3Igc3RhbmRhcmQgSFRUUCByZXF1ZXN0cyB0byB0aGUgQjMgdGVzdG5ldC4KPC9UYWI+Cgo8VGFiIHRpdGxlPSJXZWJTb2NrZXQgUlBDIj4KICBgYGB0ZXh0IFdlYlNvY2tldCBFbmRwb2ludCAgCiAgd3NzOi8vdGVzdG5ldC1ycGMuYjMuZnVuCiAgYGBgCiAgCiAgVXNlIHRoaXMgZW5kcG9pbnQgZm9yIHJlYWwtdGltZSBXZWJTb2NrZXQgY29ubmVjdGlvbnMgdG8gdGhlIEIzIHRlc3RuZXQuCjwvVGFiPgo8L1RhYnM+CgojIyMgQmxvY2sgRXhwbG9yZXIKCjxDYXJkIHRpdGxlPSJCMyBFeHBsb3JlciIgaWNvbj0ibWFnbmlmeWluZy1nbGFzcyIgaHJlZj0iaHR0cHM6Ly9leHBsb3Jlci5iMy5mdW4iIGN0YT0iVmlldyBFeHBsb3JlciIgaG9yaXpvbnRhbD4KICBFeHBsb3JlIHRyYW5zYWN0aW9ucywgYmxvY2tzLCBhbmQgY29udHJhY3RzIGFjcm9zcyBCMyAoaW5jbHVkaW5nIHRlc3RuZXQpLgo8L0NhcmQ+CgojIyBRdWljayBMaW5rcwoKPENhcmRHcm91cCBjb2xzPXszfT4KICA8Q2FyZCB0aXRsZT0iVGVzdG5ldCBCcmlkZ2UiIGljb249ImJyaWRnZSIgaHJlZj0iaHR0cHM6Ly90ZXN0bmV0LWJyaWRnZS5iMy5mdW4iIGN0YT0iQnJpZGdlIEFzc2V0cyI+CiAgICBCcmlkZ2UgYXNzZXRzIHRvIEIzIHRlc3RuZXQgZm9yIHRlc3RpbmcKICA8L0NhcmQ+CiAgCiAgPENhcmQgdGl0bGU9IkZhdWNldCIgaWNvbj0iZmF1Y2V0IiBocmVmPSJodHRwczovL2ZhdWNldC5iMy5mdW4iIGN0YT0iR2V0IFRlc3QgRVRIIj4KICAgIEdldCBmcmVlIHRlc3RuZXQgRVRIIGZvciBkZXZlbG9wbWVudCBhbmQgdGVzdGluZwogIDwvQ2FyZD4KICAKICA8Q2FyZCB0aXRsZT0iRGV2ZWxvcGVyIFRvb2xzIiBpY29uPSJ3cmVuY2giIGhyZWY9Ii9lY29zeXN0ZW0vaW50cm9kdWN0aW9uIiBjdGE9IkV4cGxvcmUgVG9vbHMiPgogICAgRGlzY292ZXIgdG9vbHMgYW5kIGluZnJhc3RydWN0dXJlIGZvciBidWlsZGluZyBvbiBCMwogIDwvQ2FyZD4KPC9DYXJkR3JvdXA+CgojIyBBZGRpbmcgQjMgVGVzdG5ldCB0byBZb3VyIFdhbGxldAoKPFN0ZXBzPgo8U3RlcCB0aXRsZT0iT3BlbiBXYWxsZXQgU2V0dGluZ3MiPgogIE9wZW4geW91ciB3YWxsZXQgKE1ldGFNYXNrLCBDb2luYmFzZSBXYWxsZXQsIGV0Yy4pIGFuZCBuYXZpZ2F0ZSB0byBuZXR3b3JrIHNldHRpbmdzLgo8L1N0ZXA+Cgo8U3RlcCB0aXRsZT0iQWRkIEN1c3RvbSBOZXR3b3JrIj4KICBDbGljayAiQWRkIE5ldHdvcmsiIG9yICJBZGQgQ3VzdG9tIE5ldHdvcmsiIGRlcGVuZGluZyBvbiB5b3VyIHdhbGxldC4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IkVudGVyIE5ldHdvcmsgRGV0YWlscyI+CiAgRmlsbCBpbiB0aGUgZm9sbG93aW5nIGluZm9ybWF0aW9uOgogIAogIC0gKipOZXR3b3JrIE5hbWUqKjogQjMgVGVzdG5ldAogIC0gKipDaGFpbiBJRCoqOiAxOTkzCiAgLSAqKlJQQyBVUkwqKjogaHR0cHM6Ly90ZXN0bmV0LXJwYy5iMy5mdW4KICAtICoqQ3VycmVuY3kgU3ltYm9sKio6IEVUSAogIC0gKipCbG9jayBFeHBsb3JlciBVUkwqKjogaHR0cHM6Ly9leHBsb3Jlci5iMy5mdW4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IlNhdmUgYW5kIFN3aXRjaCI+CiAgU2F2ZSB0aGUgbmV0d29yayBjb25maWd1cmF0aW9uIGFuZCBzd2l0Y2ggdG8gQjMgVGVzdG5ldC4KICAKICA8Q2hlY2s+CiAgWW91J3JlIG5vdyBjb25uZWN0ZWQgdG8gQjMgVGVzdG5ldCEgWW91IGNhbiBzdGFydCB0ZXN0aW5nIHlvdXIgYXBwbGljYXRpb25zLgogIDwvQ2hlY2s+CjwvU3RlcD4KPC9TdGVwcz4KCiMjIFdoeSBVc2UgVGVzdG5ldHM/CgpUZXN0bmV0cyBwcm92aWRlIGEgc2FmZSwgY29udHJvbGxlZCwgYW5kIGVmZmljaWVudCBlbnZpcm9ubWVudCBmb3IgdGVzdGluZyBhbmQgZXhwZXJpbWVudGF0aW9uLiBUZXN0IG5ldHdvcmtzLCBvciB0ZXN0bmV0cywgc2VydmUgYXMgZXNzZW50aWFsIHRvb2xzIGZvciB5b3UgdG8gdGVzdCB5b3VyIHNtYXJ0IGNvbnRyYWN0cyBiZWZvcmUgZGVwbG95aW5nIHRoZW0gdG8gdGhlIG1haW5uZXQsIG1pbmltaXppbmcgdGhlIHJpc2sgb2YgZmFpbHVyZXMgb3IgdnVsbmVyYWJpbGl0aWVzIGluIGxpdmUgYXBwbGljYXRpb25zLgoKIyMjIEtleSBCZW5lZml0cwoKPENhcmRHcm91cCBjb2xzPXsyfT4KICA8Q2FyZCB0aXRsZT0iUmlzay1GcmVlIFRlc3RpbmciIGljb249InNoaWVsZC1jaGVjayI+CiAgICBUZXN0IHlvdXIgc21hcnQgY29udHJhY3RzIGFuZCBhcHBsaWNhdGlvbnMgd2l0aG91dCByaXNraW5nIHJlYWwgZnVuZHMgb3IgYWZmZWN0aW5nIGxpdmUgdXNlcnMuCiAgPC9DYXJkPgogIAogIDxDYXJkIHRpdGxlPSJSZWFsaXN0aWMgRW52aXJvbm1lbnQiIGljb249Imdsb2JlIj4KICAgIFNpbXVsYXRlIG1haW5uZXQgY29uZGl0aW9ucyBpbmNsdWRpbmcgbmV0d29yayBsYXRlbmN5LCBnYXMgZmVlcywgYW5kIHRyYW5zYWN0aW9uIHRocm91Z2hwdXQuCiAgPC9DYXJkPgogIAogIDxDYXJkIHRpdGxlPSJDb3N0LUVmZmVjdGl2ZSBEZXZlbG9wbWVudCIgaWNvbj0iZG9sbGFyLXNpZ24iPgogICAgVXNlIGZyZWUgdGVzdG5ldCB0b2tlbnMgaW5zdGVhZCBvZiBleHBlbnNpdmUgbWFpbm5ldCBFVEggZm9yIGRldmVsb3BtZW50IGFuZCB0ZXN0aW5nLgogIDwvQ2FyZD4KICAKICA8Q2FyZCB0aXRsZT0iTGVhcm5pbmcgUGxhdGZvcm0iIGljb249ImdyYWR1YXRpb24tY2FwIj4KICAgIFBlcmZlY3QgZW52aXJvbm1lbnQgZm9yIGRldmVsb3BlcnMgdG8gbGVhcm4gYW5kIGV4cGVyaW1lbnQgd2l0aCBibG9ja2NoYWluIGRldmVsb3BtZW50LgogIDwvQ2FyZD4KPC9DYXJkR3JvdXA+CgpCeSBzaW11bGF0aW5nIHRoZSBtYWlubmV0IGVudmlyb25tZW50LCB0ZXN0bmV0cyBvZmZlciBhIHJlYWxpc3RpYyByZXByZXNlbnRhdGlvbiBvZiByZWFsLXdvcmxkIGNvbmRpdGlvbnMsIGNvbXBsZXRlIHdpdGggbmV0d29yayBsYXRlbmN5LCBnYXMgZmVlcywgYW5kIG90aGVyIGZhY3RvcnMgdGhhdCBpbXBhY3QgdGhlIHBlcmZvcm1hbmNlIG9mIHNtYXJ0IGNvbnRyYWN0cy4gVGhpcyBhY2N1cmF0ZSByZXByZXNlbnRhdGlvbiBlbmFibGVzIHlvdSB0byBpZGVudGlmeSBwb3RlbnRpYWwgaXNzdWVzLCBvcHRpbWl6ZSB5b3VyIGFwcGxpY2F0aW9ucywgYW5kIGVuc3VyZSB0aGUgYmVzdCBwb3NzaWJsZSB1c2VyIGV4cGVyaWVuY2UgZm9yIHlvdXIgZW5kLXVzZXJzLgoKTW9yZW92ZXIsIHRlc3RuZXRzIGFsbG93IHlvdSB0byBmYW1pbGlhcml6ZSB5b3Vyc2VsZiB3aXRoIHRoZSBCMyBlY29zeXN0ZW0gYW5kIGdhaW4gdmFsdWFibGUgaGFuZHMtb24gZXhwZXJpZW5jZSwgbWFraW5nIHRoZW0gaW5kaXNwZW5zYWJsZSB0b29scyBmb3IgYm90aCBzZWFzb25lZCBkZXZlbG9wZXJzIGFuZCBuZXdjb21lcnMgdG8gdGhlIHdvcmxkIG9mIGJsb2NrY2hhaW4gZGV2ZWxvcG1lbnQuCgojIyBEZXZlbG9wbWVudCBXb3JrZmxvdwoKPFN0ZXBzPgo8U3RlcCB0aXRsZT0iR2V0IFRlc3RuZXQgRVRIIj4KICBVc2UgdGhlIFt0ZXN0bmV0IGZhdWNldF0oaHR0cHM6Ly90ZXN0bmV0LWZhdWNldC5iMy5mdW4pIHRvIGdldCBmcmVlIEVUSCBmb3IgdGVzdGluZy4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IkRlcGxveSBhbmQgVGVzdCI+CiAgRGVwbG95IHlvdXIgc21hcnQgY29udHJhY3RzIHRvIHRoZSB0ZXN0bmV0IGFuZCB0aG9yb3VnaGx5IHRlc3QgYWxsIGZ1bmN0aW9uYWxpdHkuCjwvU3RlcD4KCjxTdGVwIHRpdGxlPSJEZWJ1ZyBhbmQgT3B0aW1pemUiPgogIFVzZSB0aGUgYmxvY2sgZXhwbG9yZXIgYW5kIGRldmVsb3BtZW50IHRvb2xzIHRvIGRlYnVnIGlzc3VlcyBhbmQgb3B0aW1pemUgcGVyZm9ybWFuY2UuCjwvU3RlcD4KCjxTdGVwIHRpdGxlPSJEZXBsb3kgdG8gTWFpbm5ldCI+CiAgT25jZSB0ZXN0aW5nIGlzIGNvbXBsZXRlLCBkZXBsb3kgeW91ciBwcm9kdWN0aW9uLXJlYWR5IGNvbnRyYWN0cyB0byBCMyBtYWlubmV0LgogIAogIDxXYXJuaW5nPgogIEFsd2F5cyB0ZXN0IHRob3JvdWdobHkgb24gdGVzdG5ldCBiZWZvcmUgZGVwbG95aW5nIHRvIG1haW5uZXQgd2l0aCByZWFsIGZ1bmRzLgogIDwvV2FybmluZz4KPC9TdGVwPgo8L1N0ZXBzPgoKIyMgVGVzdG5ldCB2cyBNYWlubmV0Cgo8QWNjb3JkaW9uR3JvdXA+CjxBY2NvcmRpb24gdGl0bGU9Ik5ldHdvcmsgQ29uZmlndXJhdGlvbiI+CiAgKipUZXN0bmV0Kio6CiAgLSBDaGFpbiBJRDogMTk5MwogIC0gUlBDOiBodHRwczovL3Rlc3RuZXQtcnBjLmIzLmZ1bgogIC0gRXhwbG9yZXI6IGh0dHBzOi8vdGVzdG5ldC1leHBsb3Jlci5iMy5mdW4KICAKICAqKk1haW5uZXQqKjoKICAtIENoYWluIElEOiA4MzMzCiAgLSBSUEM6IGh0dHBzOi8vbWFpbm5ldC1ycGMuYjMuZnVuCiAgLSBFeHBsb3JlcjogaHR0cHM6Ly9leHBsb3Jlci5iMy5mdW4KPC9BY2NvcmRpb24+Cgo8QWNjb3JkaW9uIHRpdGxlPSJUb2tlbiBWYWx1ZSI+CiAgKipUZXN0bmV0Kio6IEVUSCBoYXMgbm8gcmVhbC13b3JsZCB2YWx1ZSAtIHVzZWQgb25seSBmb3IgdGVzdGluZwogIAogICoqTWFpbm5ldCoqOiBFVEggaGFzIHJlYWwtd29ybGQgdmFsdWUgYW5kIGNvc3RzIG1vbmV5IHRvIGFjcXVpcmUKPC9BY2NvcmRpb24+Cgo8QWNjb3JkaW9uIHRpdGxlPSJVc2UgQ2FzZXMiPgogICoqVGVzdG5ldCoqOiBEZXZlbG9wbWVudCwgdGVzdGluZywgbGVhcm5pbmcsIGV4cGVyaW1lbnRhdGlvbgogIAogICoqTWFpbm5ldCoqOiBQcm9kdWN0aW9uIGFwcGxpY2F0aW9ucywgcmVhbCB1c2VycywgYWN0dWFsIHRyYW5zYWN0aW9ucwo8L0FjY29yZGlvbj4KPC9BY2NvcmRpb25Hcm91cD4K",
    "lastUpdated": "2025-09-03T02:22:43.088Z"
  },
  {
    "sourceFile": "protocol/staking-b3.mdx",
    "sourceHash": "CgogPGlmcmFtZQogICBjbGFzc05hbWU9InctZnVsbCBhc3BlY3QtdmlkZW8gcm91bmRlZC14bCBtYi02IgogICAgc3JjPSJodHRwczovL2N1c3RvbWVyLWdnNnFzN25tNXVlOTR0NjQuY2xvdWRmbGFyZXN0cmVhbS5jb20vZjc5ZjAzM2Q3MTU5ODgwNjVmYzJmZDIzODgyNzc0YTQvaWZyYW1lP211dGVkPXRydWUmbG9vcD10cnVlJmF1dG9wbGF5PXRydWUmcG9zdGVyPWh0dHBzJTNBJTJGJTJGY3VzdG9tZXItZ2c2cXM3bm01dWU5NHQ2NC5jbG91ZGZsYXJlc3RyZWFtLmNvbSUyRmY3OWYwMzNkNzE1OTg4MDY1ZmMyZmQyMzg4Mjc3NGE0JTJGdGh1bWJuYWlscyUyRnRodW1ibmFpbC5qcGclM0Z0aW1lJTNEJTI2aGVpZ2h0JTNENjAwIgogICAgdGl0bGU9IlN0YWtpbmcgJEIzIgogICAgZnJhbWVCb3JkZXI9IjAiCiAgYWxsb3c9ImFjY2VsZXJvbWV0ZXI7IGF1dG9wbGF5OyBjbGlwYm9hcmQtd3JpdGU7IGVuY3J5cHRlZC1tZWRpYTsgZ3lyb3Njb3BlOyBwaWN0dXJlLWluLXBpY3R1cmUiCiAgYWxsb3dGdWxsU2NyZWVuCiAgPjwvaWZyYW1lPgoKPENhcmQgdGl0bGU9IlN0YWtlICYgd2luICRCMyIgaWNvbj0iY29pbiIgaHJlZj0iaHR0cHM6Ly9zdGFrZS5iMy5mdW4iIGhvcml6b250YWw+CiAgU3Rha2UgeW91ciAkQjMgdG9rZW5zIGluIG91ciBzdGFraW5nIGFyZW5hLgo8L0NhcmQ+CgojIyBXaHkgU3Rha2U/ClN0YWtlIHlvdXIgQjMgdG8gcGxheSBTdGFrZSB0byBXaW4gZ2FtZXMsIHdoZXJlIHlvdSBjYW4gd2luIGJpZyBwcml6ZXMgd2hpbGUgZWFybmluZyAkQjMgeWllbGQgYW5kIGV4Y2x1c2l2ZSByZXdhcmRzLgoKPENhcmRHcm91cCBjb2xzPXsyfT4KPENhcmQgdGl0bGU9IkVhcm4gUmV3YXJkcyIgaWNvbj0iY29pbnMiPgogIFBhcnRpY2lwYXRlIGluIHN3ZWVwc3Rha2VzIGFuZCB3aW4gYmlnIHByaXplcyBpbnN0ZWFkIG9mIGJvcmluZyB5aWVsZC4KPC9DYXJkPgoKPENhcmQgdGl0bGU9IlNlY3VyZSB0aGUgTmV0d29yayIgaWNvbj0ic2hpZWxkIj4KICBDb250cmlidXRlIHRvIEIzJ3Mgc2VjdXJpdHkgYW5kIGRlY2VudHJhbGl6YXRpb24uCjwvQ2FyZD4KCjxDYXJkIHRpdGxlPSJHb3Zlcm5hbmNlIFJpZ2h0cyIgaWNvbj0idXNlcnMiPgogIFRva2VucyBob2xkZXJzIGNhbiBwYXJ0aWNpcGF0ZSBpbiBnb3Zlcm5hbmNlIGZvciB0aGUgQjMgbmV0d29yay4KPC9DYXJkPgoKPENhcmQgdGl0bGU9IkxvdyBSaXNrIiBpY29uPSJnYW1lcGFkIj4KICBBY3RpdmVseSBwYXJ0aWNpcGF0ZSBhcyBhIHN0YWtlciwgYW5kIGhhdmUgZnVuLgo8L0NhcmQ+CjwvQ2FyZEdyb3VwPgoKYGBgdGV4dCBDb250cmFjdCBBZGRyZXNzCjB4QjNCMzJGOWY4ODI3RDQ2MzRmRTdkOTczRmExMDM0RWM5ZmREQjNCMwpgYGAKQ29weSB0aGlzIGFkZHJlc3MgdG8gYWRkICRCMyB0byB5b3VyIHdhbGxldCBvciB0cmFkZSBvbiBERVhzLgoKCiMjIyBXaGVyZSB0byBidXkgJEIzIHRva2VucwoKPENhcmRHcm91cCBjb2xzPXszfT4KICA8Q2FyZCB0aXRsZT0iQ29pbmJhc2UiIGhyZWY9Imh0dHBzOi8vd3d3LmNvaW5iYXNlLmNvbS9wcmljZS9iMy1iYXNlIiBob3Jpem9udGFsPgogICAgPGltZyBzcmM9Ii9pbWFnZXMvY29pbmJhc2UtbG9nby5zdmciIGNsYXNzTmFtZT0idy1mdWxsIGJnLWJsYWNrIGFzcGVjdC12aWRlbyBvYmplY3QtY29udGFpbiByb3VuZGVkLWxnIHAtMiBteS0zIiAvPgogICAgQnV5ICRCMyBvbiBDb2luYmFzZQogIDwvQ2FyZD4KCiAgPENhcmQgdGl0bGU9IkJ5Yml0IiBocmVmPSJodHRwczovL3d3dy5ieWJpdC5jb20vZW4vdHJhZGUvc3BvdC9CMy9VU0RUIiBob3Jpem9udGFsPgogICAgPGltZyBzcmM9Ii9pbWFnZXMvYnliaXQtbG9nby5zdmciIGNsYXNzTmFtZT0idy1mdWxsIGJnLWJsYWNrIGFzcGVjdC12aWRlbyBvYmplY3QtY29udGFpbiByb3VuZGVkLWxnIHAtMiBteS0zIiAvPgogICAgVHJhZGUgJEIzIG9uIEJ5Yml0CiAgPC9DYXJkPgoKICA8Q2FyZCB0aXRsZT0iR2F0ZS5pbyIgaHJlZj0iaHR0cHM6Ly93d3cuZ2F0ZS5pby90cmFkZS9CM19VU0RUIiBob3Jpem9udGFsPgogICAgPGltZyBzcmM9Ii9pbWFnZXMvZ2F0ZWlvLWxvZ28uc3ZnIiBjbGFzc05hbWU9InctZnVsbCBiZy1ibGFjayBhc3BlY3QtdmlkZW8gb2JqZWN0LWNvbnRhaW4gcm91bmRlZC1sZyBwLTIgbXktMyIgLz4KICAgIFB1cmNoYXNlICRCMyBvbiBHYXRlLmlvCiAgPC9DYXJkPgoKICA8Q2FyZCB0aXRsZT0iS3VDb2luIiBocmVmPSJodHRwczovL3RyYWRlLmt1Y29pbi5jb20vQjMtVVNEVD91dG1fc291cmNlPWNvbW11bml0eV9wYXJ0bmVyX2luZm8iIGhvcml6b250YWw+CiAgICA8aW1nIHNyYz0iL2ltYWdlcy9rdWNvaW4tbG9nby5hdmlmIiBjbGFzc05hbWU9InctZnVsbCBiZy1ibGFjayBhc3BlY3QtdmlkZW8gb2JqZWN0LWNvbnRhaW4gcm91bmRlZC1sZyBwLTIgbXktMyIgLz4KICAgIEdldCAkQjMgb24gS3VDb2luCiAgPC9DYXJkPgoKICA8Q2FyZCB0aXRsZT0iTUVYQyIgaHJlZj0iaHR0cHM6Ly93d3cubWV4Yy5jb20vZXhjaGFuZ2UvQjNfVVNEVCIgaG9yaXpvbnRhbD4KICAgIDxpbWcgc3JjPSIvaW1hZ2VzL21leGMtbG9nby5zdmciIGNsYXNzTmFtZT0idy1mdWxsIGJnLWJsYWNrIGFzcGVjdC12aWRlbyBvYmplY3QtY29udGFpbiByb3VuZGVkLWxnIHAtMiBteS0zIiAvPgogICAgVHJhZGUgJEIzIG9uIE1FWEMKICA8L0NhcmQ+CgogIDxDYXJkIHRpdGxlPSJBZXJvZHJvbWUiIGhyZWY9Imh0dHBzOi8vYWVyb2Ryb21lLmZpbmFuY2Uvc3dhcD9mcm9tPWV0aCZ0bz0weGIzYjMyZjlmODgyN2Q0NjM0ZmU3ZDk3M2ZhMTAzNGVjOWZkZGIzYjMmY2hhaW4wPTg0NTMmY2hhaW4xPTg0NTMiIGhvcml6b250YWw+CiAgICA8aW1nIHNyYz0iL2ltYWdlcy9hZXJvZHJvbWUtbG9nby5zdmciIGNsYXNzTmFtZT0idy1mdWxsIGJnLWJsYWNrIGFzcGVjdC12aWRlbyBvYmplY3QtY29udGFpbiByb3VuZGVkLWxnIHAtMiBteS0zIiAvPgogICAgU3dhcCAkQjMgb24gQWVyb2Ryb21lCiAgPC9DYXJkPgoKICA8Q2FyZCB0aXRsZT0iQWxpZW5CYXNlIiBocmVmPSJodHRwczovL2FwcC5hbGllbmJhc2UueHl6Lz9vdXRwdXRDdXJyZW5jeT0weEIzQjMyRjlmODgyN0Q0NjM0ZkU3ZDk3M0ZhMTAzNEVjOWZkZGIzQjMmY2hhaW5JZD04NDUzIiBob3Jpem9udGFsPgogICAgPGltZyBzcmM9Ii9pbWFnZXMvYWxpZW5iYXNlLWxvZ28uc3ZnIiBjbGFzc05hbWU9InctZnVsbCBiZy1ibGFjayBhc3BlY3QtdmlkZW8gb2JqZWN0LWNvbnRhaW4gcm91bmRlZC1sZyBwLTIgbXktMyIgLz4KICAgIFRyYWRlICRCMyBvbiBBbGllbkJhc2UKICA8L0NhcmQ+CjwvQ2FyZEdyb3VwPgoK",
    "lastUpdated": "2025-10-31T02:17:15.408Z"
  },
  {
    "sourceFile": "protocol/scaling.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-09-03T04:49:33.323Z"
  },
  {
    "sourceFile": "protocol/network-setup.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-09-03T02:24:57.592Z"
  },
  {
    "sourceFile": "protocol/liquidity.mdx",
    "sourceHash": "CiA8aWZyYW1lCiAgIGNsYXNzTmFtZT0idy1mdWxsIGFzcGVjdC12aWRlbyByb3VuZGVkLXhsIgogICAgc3JjPSJodHRwczovL2N1c3RvbWVyLWdnNnFzN25tNXVlOTR0NjQuY2xvdWRmbGFyZXN0cmVhbS5jb20vNDQ1M2Q3ZjIwYmI1OGZiODIyZjBlMTE0ZTQ4ODdhYjUvaWZyYW1lP211dGVkPXRydWUmbG9vcD10cnVlJmF1dG9wbGF5PXRydWUmcG9zdGVyPWh0dHBzJTNBJTJGJTJGY3VzdG9tZXItZ2c2cXM3bm01dWU5NHQ2NC5jbG91ZGZsYXJlc3RyZWFtLmNvbSUyRjQ0NTNkN2YyMGJiNThmYjgyMmYwZTExNGU0ODg3YWI1JTJGdGh1bWJuYWlscyUyRnRodW1ibmFpbC5qcGclM0Z0aW1lJTNEJTI2aGVpZ2h0JTNENjAwIgogICAgdGl0bGU9IkxpcXVpZGl0eSBGcmFnbWVudGF0aW9uIgogICAgZnJhbWVCb3JkZXI9IjAiCiAgYWxsb3c9ImFjY2VsZXJvbWV0ZXI7IGF1dG9wbGF5OyBjbGlwYm9hcmQtd3JpdGU7IGVuY3J5cHRlZC1tZWRpYTsgZ3lyb3Njb3BlOyBwaWN0dXJlLWluLXBpY3R1cmUiCiAgYWxsb3dGdWxsU2NyZWVuCiAgPjwvaWZyYW1lPgoKPE5vdGU+CltFeHBsb3JlIEIzJ3MgbXVsdGljaGFpbiBlY29zeXN0ZW0gb24gZXhwbG9yZXIuYjMuZnVuXShodHRwczovL2V4cGxvcmVyLmIzLmZ1bi9jaGFpbnMpCjwvTm90ZT4KCiMjIFRoZSBQcm9ibGVtCgpBcHBjaGFpbnMsIEwycywgYW5kIEwzcyBoYXZlIGlzb2xhdGVkIGxpcXVpZGl0eSwgbWFraW5nIGl0IGFubm95aW5nIHRvIGJ1aWxkIGV4cGVyaWVuY2VzIHdpdGhvdXQgaGF2aW5nIHRvIGJyaWRnZSBhc3NldHMgYWNyb3NzIGNoYWlucy4KCgo8Q2FyZEdyb3VwIGNvbHM9ezJ9PgoKPENhcmQgdGl0bGU9IkZyYWdtZW50ZWQgTGlxdWlkaXR5IiBpY29uPSJwdXp6bGUtcGllY2UiPgogIEVhY2ggY2hhaW4gbWFpbnRhaW5zIGlzb2xhdGVkIHBvb2xzLCBsaW1pdGluZyBkZXB0aCBhbmQgaW5jcmVhc2luZyBzbGlwcGFnZS4KPC9DYXJkPgoKPENhcmQgdGl0bGU9IkNvbXBsZXggSW50ZWdyYXRpb24iIGljb249ImdlYXJzIj4KICBCdWlsZGVycyBtdXN0IGludGVncmF0ZSB3aXRoIGRvemVucyBvZiBjaGFpbnMgaW5kaXZpZHVhbGx5Lgo8L0NhcmQ+Cgo8Q2FyZCB0aXRsZT0iUG9vciBVWCIgaWNvbj0iZmFjZS1mcm93biI+CiAgVXNlcnMgbWFudWFsbHkgYnJpZGdlIGFzc2V0cyBhbmQgbWFuYWdlIG11bHRpcGxlIHdhbGxldHMuCjwvQ2FyZD4KCjxDYXJkIHRpdGxlPSJDYXBpdGFsIEluZWZmaWNpZW5jeSIgaWNvbj0iY2hhcnQtbGluZS1kb3duIj4KICBBc3NldHMgbG9ja2VkIG9uIHNwZWNpZmljIGNoYWlucyBjYW4ndCBhY2Nlc3Mgb3RoZXIgb3Bwb3J0dW5pdGllcy4KPC9DYXJkPgoKPC9DYXJkR3JvdXA+CgojIyBBY2Nlc3MgTGlxdWlkaXR5IEFjcm9zcyBDaGFpbnMKClBvd2VyZWQgYnkgb3VyIHByb2R1Y3QsIEFueVNwZW5kLCBvcGVyYXRlcyBhdCB0aGUgY2xpZW50IGV4ZWN1dGlvbiBsYXllciwgc2l0dGluZyBiZXR3ZWVuIHVzZXIgaW50ZW50IGFuZCBibG9ja2NoYWluIGV4ZWN1dGlvbjoKCiMjIyBIb3cgSXQgV29ya3MKCjEuICoqRGVwb3NpdCBmcm9tIGFueSBjaGFpbioqOiBBY2NlcHRzIHRva2VucyBmcm9tIG1vc3QgY2hhaW5zCjIuICoqSW50ZW50LUJhc2VkKio6IFVzZXJzIGV4cHJlc3Mgd2hhdCB0aGV5IHdhbnQsIG5vdCBob3cgdG8gYWNoaWV2ZSBpdAozLiAqKlJvdXRlIERpc2NvdmVyeSoqOiBGaW5kcyBvcHRpbWFsIHBhdGhzIGFjcm9zcyBhbGwgc3VwcG9ydGVkIGNoYWlucwo0LiAqKkF0b21pYyBFeGVjdXRpb24qKjogVHJhbnNhY3Rpb25zIGV4ZWN1dGUgYXRvbWljYWxseSBvciBmYWlsIGdyYWNlZnVsbHkKNS4gKipVbmlmaWVkIEV4cGVyaWVuY2UqKjogQ29tcGxleCBvcGVyYXRpb25zIGFwcGVhciBhcyBzaW5nbGUgdHJhbnNhY3Rpb25zCgpgYGBtZXJtYWlkCmZsb3djaGFydCBURAogICAgQVtVc2VyIEludGVudF0gLS0+IEJbRGVwb3NpdCBmcm9tIEFueSBDaGFpbl0KICAgIEIgLS0+IEN7QW55U3BlbmQgUHJvY2Vzc2luZ30KICAgIEMgLS0+IERbUm91dGUgRGlzY292ZXJ5XQogICAgRCAtLT4gRVtGaW5kIE9wdGltYWwgUGF0aF0KICAgIEUgLS0+IEZbQXRvbWljIEV4ZWN1dGlvbl0KICAgIEYgLS0+IEdbU3VjY2Vzcz9dCiAgICBHIC0tPnxZZXN8IEhbVW5pZmllZCBUcmFuc2FjdGlvbiBDb21wbGV0ZV0KICAgIEcgLS0+fE5vfCBJW0dyYWNlZnVsIEZhaWx1cmUgJiBSb2xsYmFja10KICAgIAogICAgQiAtLT4gQjFbRXRoZXJldW1dCiAgICBCIC0tPiBCMltTb2xhbmFdCiAgICBCIC0tPiBCM1tQb2x5Z29uXQogICAgQiAtLT4gQjRbQXJiaXRydW1dCiAgICBCIC0tPiBCNVtCYXNlXQogICAgQiAtLT4gQjZbQjMgJiBHYW1lIENoYWluc10KICAgIAogICAgSCAtLT4gSltBc3NldHMgQXZhaWxhYmxlIG9uIFRhcmdldCBDaGFpbl0KICAgIEkgLS0+IEtbT3JpZ2luYWwgQXNzZXRzIFJldHVybmVkXQogICAgCiAgICBzdHlsZSBBIGZpbGw6I2UxZjVmZQogICAgc3R5bGUgQyBmaWxsOiNmM2U1ZjUKICAgIHN0eWxlIEggZmlsbDojZThmNWU4CiAgICBzdHlsZSBJIGZpbGw6I2ZmZWJlZQpgYGAKCiMjIyBTdXBwb3J0ZWQgQ2hhaW5zCgpBbnlTcGVuZCBwcm92aWRlcyB1bml2ZXJzYWwgY2hhaW4gc3VwcG9ydDoKCi0gKipFVk0gQ2hhaW5zKio6IE1vc3QgRVZNIGNoYWlucywgaW5jbHVkaW5nIEV0aGVyZXVtLCBQb2x5Z29uLCBBcmJpdHJ1bSwgQmFzZSwgQlNDLCBBdmFsYW5jaGUKLSAqKlNvbGFuYSoqOiBGdWxsIGludGVncmF0aW9uIHdpdGggU29sYW5hJ3MgZWNvc3lzdGVtCi0gKipCMyBFY29zeXN0ZW0qKjogTmF0aXZlIGludGVncmF0aW9uIHdpdGggQjMgYW5kIGdhbWUgY2hhaW5zCgojIyBOZXh0IFN0ZXBzCgo8Q2FyZEdyb3VwIGNvbHM9ezJ9PgoKPENhcmQgdGl0bGU9IlRyeSBBbnlTcGVuZCIgaWNvbj0icm9ja2V0IiBocmVmPSIvYW55c3BlbmQvaW50cm9kdWN0aW9uIj4KICBHZXQgc3RhcnRlZCB3aXRoIHRoZSBBbnlTcGVuZCBTREsuCjwvQ2FyZD4KCjxDYXJkIHRpdGxlPSJJbnRlZ3JhdGlvbiBHdWlkZSIgaWNvbj0iYm9vayIgaHJlZj0iL2FueXNwZW5kL2luc3RhbGxhdGlvbiI+CiAgTGVhcm4gaG93IHRvIGludGVncmF0ZSBBbnlTcGVuZC4KPC9DYXJkPgoKPENhcmQgdGl0bGU9IkFQSSBSZWZlcmVuY2UiIGljb249ImNvZGUiIGhyZWY9Ii9hbnlzcGVuZC9hcGktcmVmZXJlbmNlL2ludHJvZHVjdGlvbiI+CiAgRXhwbG9yZSB0aGUgY29tcGxldGUgQVBJIGRvY3VtZW50YXRpb24uCjwvQ2FyZD4KCjxDYXJkIHRpdGxlPSJKb2luIERpc2NvcmQiIGljb249ImRpc2NvcmQiIGhyZWY9Imh0dHBzOi8vZGlzY29yZC5nZy9iM2RvdGZ1biI+CiAgQ29ubmVjdCB3aXRoIG90aGVyIGJ1aWxkZXJzLgo8L0NhcmQ+Cgo8L0NhcmRHcm91cD4K",
    "lastUpdated": "2025-10-31T02:17:52.098Z"
  },
  {
    "sourceFile": "protocol/governance-platforms.mdx",
    "sourceHash": "CjxDYXJkR3JvdXAgY29scz17MX0+CjxDYXJkIAogIHRpdGxlPSJCMyBHb3Zlcm5hbmNlIFBsYXRmb3JtIiAKICBpY29uPSJjaGVjay10by1zbG90IiAKICBocmVmPSJodHRwczovL2dvdi5iMy5mdW4iCj4KICAqKmh0dHBzOi8vZ292LmIzLmZ1bioqLCBwb3dlcmVkIGJ5IEFnb3JhCjwvQ2FyZD4KCjxDYXJkIAogIHRpdGxlPSJCMyBEaXNjb3Vyc2UiIAogIGljb249ImNvbW1lbnRzIiAKICBocmVmPSJodHRwczovL2ZvcnVtLmIzLmZ1biIKPgogICoqaHR0cHM6Ly9mb3J1bS5iMy5mdW4qKgo8L0NhcmQ+Cgo8Q2FyZCAKICB0aXRsZT0iQjMgRGlzY29yZCIgCiAgaWNvbj0iZGlzY29yZCIgCiAgaHJlZj0iaHR0cHM6Ly9kaXNjb3JkLmdnL2IzZG90ZnVuIgo+CiAgKipodHRwczovL2Rpc2NvcmQuZ2cvYjNkb3RmdW4qKgo8L0NhcmQ+CjwvQ2FyZEdyb3VwPgoKIyMgQ2F1dGlvbgoKPFdhcm5pbmc+ClN0YXkgc2FmZSEgT25seSB1c2UgdGhlIG9mZmljaWFsIGxpbmtzIGxpc3RlZCBhYm92ZS4gQmUgYXdhcmUgdGhhdCBzY2FtbWVycyBtYXkgdHJ5IHRvIGltcGVyc29uYXRlIEIzIHRlYW0gbWVtYmVycyBvciBkZWxlZ2F0ZXMuIFJlbWVtYmVyOgoKLSBOZXZlciBzaGFyZSB5b3VyIHNlZWQgcGhyYXNlIG9yIHByaXZhdGUga2V5cwotIE5ldmVyIGdpdmUgb3V0IHBlcnNvbmFsIGluZm9ybWF0aW9uIAotIFRoZSByZWFsIEIzIHRlYW0gd2lsbCBuZXZlciBETSB5b3UgZmlyc3QKLSBXaGVuIGluIGRvdWJ0LCB2aXNpdCBvdXIgRGlzY29yZCBhbmQgYXNrIHRoZSBjb21tdW5pdHkKCldlJ3JlIGhlcmUgdG8gaGVscCAtIGpvaW4gb3VyIERpc2NvcmQgc2VydmVyIGlmIHlvdSBoYXZlIGFueSBxdWVzdGlvbnMgb3IgY29uY2VybnMhCjwvV2FybmluZz4K",
    "lastUpdated": "2025-09-03T02:25:36.140Z"
  },
  {
    "sourceFile": "protocol/constitution.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-09-03T02:27:13.650Z"
  },
  {
    "sourceFile": "protocol/bylaws.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-09-03T02:28:40.391Z"
  },
  {
    "sourceFile": "protocol/bridge.mdx",
    "sourceHash": "CjxpbWcgc3JjPSIvaW1hZ2VzL2IzLWJhbm5lci5wbmciIGFsdD0iQnJpZGdlIHRvIEIzIiBjbGFzc05hbWU9InctZnVsbCByb3VuZGVkLXhsIiAvPgoKPENhcmRHcm91cCBjb2xzPXsyfT4KICA8Q2FyZCB0aXRsZT0iQmFzZW1lbnQgQnJpZGdlIiAgaHJlZj0iaHR0cHM6Ly9iYXNlbWVudC5mdW4vYnJpZGdlIj4KICAgIDxpbWcgc3JjPSIvaW1hZ2VzL2JzbW50LWxvZ28uc3ZnIiBhbHQ9IkJhc2VtZW50IiBjbGFzc05hbWU9InAtOCBiZy1ibGFjayByb3VuZGVkLTJ4bCBteS0zIiAvPgoKICAgIENyb3NzLWNoYWluIGJyaWRnZSB3aXRoIGluc3RhbnQgZGVwb3NpdHMgYW5kIHdpdGhkcmF3YWxzCiAgPC9DYXJkPgogIAogIDxDYXJkIHRpdGxlPSJSZWxheSBCcmlkZ2UiIGhyZWY9Imh0dHBzOi8vcmVsYXkubGluay9icmlkZ2UvYmFzZT9mcm9tQ2hhaW5JZD04NDUzJmZyb21DdXJyZW5jeT0weGIzYjMyZjlmODgyN2Q0NjM0ZmU3ZDk3M2ZhMTAzNGVjOWZkZGIzYjMmdG9DdXJyZW5jeT0weGIzYjMyZjlmODgyN2Q0NjM0ZmU3ZDk3M2ZhMTAzNGVjOWZkZGIzYjMiPgogICAgPGltZyBzcmM9Ii9pbWFnZXMvcmVsYXktbG9nby5hdmlmIiBhbHQ9IlJlbGF5IiBjbGFzc05hbWU9InAtOCBiZy1ibGFjayByb3VuZGVkLTJ4bCBteS0zIiAvPgoKICAgIEJyaWRnZSBmcm9tIGFueSBFVk0gY2hhaW4gJiBTb2xhbmEgdG8gQjMKICA8L0NhcmQ+CiAgCiAgPENhcmQgdGl0bGU9Ik5hdGl2ZSBCcmlkZ2UiIGljb249ImJyaWRnZSIgaHJlZj0iI25hdGl2ZS1icmlkZ2UiPgogICAgT1AgQ2Fub25pY2FsIEJyaWRnZSB3aXRoIDctZGF5IHdpdGhkcmF3YWwgcGVyaW9kCiAgPC9DYXJkPgogIAogIDxDYXJkIHRpdGxlPSJCcmlkZ2UgQ29udHJhY3QiIGljb249ImNvZGUiIGhyZWY9IiNicmlkZ2UtY29udHJhY3QiPgogICAgRGlyZWN0IGNvbnRyYWN0IGludGVyYWN0aW9uIGZvciBhZHZhbmNlZCB1c2VycwogIDwvQ2FyZD4KPC9DYXJkR3JvdXA+CgojIyBDcm9zcyBDaGFpbiBCcmlkZ2UKCjxkaXYgc3R5bGU9e3sgbWFyZ2luQm90dG9tOiAnMTZweCcgfX0+CiAgPHNwYW4gc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAnIzNiODJmNicsIGNvbG9yOiAnd2hpdGUnLCBwYWRkaW5nOiAnNHB4IDhweCcsIGJvcmRlclJhZGl1czogJzRweCcsIGZvbnRTaXplOiAnMTJweCcsIG1hcmdpblJpZ2h0OiAnOHB4JyB9fT5JbnN0YW50IERlcG9zaXRzPC9zcGFuPgogIDxzcGFuIHN0eWxlPXt7IGJhY2tncm91bmRDb2xvcjogJyM4YjVjZjYnLCBjb2xvcjogJ3doaXRlJywgcGFkZGluZzogJzRweCA4cHgnLCBib3JkZXJSYWRpdXM6ICc0cHgnLCBmb250U2l6ZTogJzEycHgnLCBtYXJnaW5SaWdodDogJzhweCcgfX0+SW5zdGFudCBXaXRoZHJhd2Fsczwvc3Bhbj4KICA8c3BhbiBzdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6ICcjMTBiOTgxJywgY29sb3I6ICd3aGl0ZScsIHBhZGRpbmc6ICc0cHggOHB4JywgYm9yZGVyUmFkaXVzOiAnNHB4JywgZm9udFNpemU6ICcxMnB4JyB9fT5Mb3cgRmVlPC9zcGFuPgo8L2Rpdj4KCkNvbm5lY3QgeW91ciB3YWxsZXQgYW5kIGJyaWRnZSBmcm9tIG1ham9yIEVWTSBuZXR3b3JrcyBpbiAmIG91dCBvZiBCMy4KCjxTdGVwcz4KPFN0ZXAgdGl0bGU9IkdvIHRvIHRoZSBCYXNlbWVudCBCcmlkZ2UiPgogIFZpc2l0IFtiYXNlbWVudC5mdW4vYnJpZGdlXShodHRwczovL2Jhc2VtZW50LmZ1bi9icmlkZ2UpIHRvIGFjY2VzcyB0aGUgYnJpZGdlIGludGVyZmFjZS4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IkNvbm5lY3QgeW91ciBXYWxsZXQiPgogIENvbm5lY3QgeW91ciB3YWxsZXQgdXNpbmcgTWV0YU1hc2ssIENvaW5iYXNlIFdhbGxldCwgb3Igb3RoZXIgc3VwcG9ydGVkIHdhbGxldHMuCjwvU3RlcD4KCjxTdGVwIHRpdGxlPSJTZWxlY3QgbmV0d29yayAmIGZ1bmRzIj4KICBDaG9vc2UgdGhlIHNvdXJjZSBuZXR3b3JrIGFuZCB0aGUgYW1vdW50IG9mIGZ1bmRzIHlvdSB3YW50IHRvIGJyaWRnZSB0byBCMy4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IkNvbmZpcm0gdHJhbnNhY3Rpb24iPgogIENvbmZpcm0gdGhlIHRyYW5zYWN0aW9uIGFuZCB5b3UnbGwgcmVjZWl2ZSBicmlkZ2VkIGZ1bmRzIGluIHVuZGVyIGEgbWludXRlLgogIAogIDxDaGVjaz4KICBZb3VyIGZ1bmRzIHdpbGwgYXBwZWFyIGluIHlvdXIgQjMgd2FsbGV0IHdpdGhpbiA2MCBzZWNvbmRzLgogIDwvQ2hlY2s+CjwvU3RlcD4KPC9TdGVwcz4KCjxDYXJkIHRpdGxlPSJVc2UgQmFzZW1lbnQgQnJpZGdlIiBocmVmPSJodHRwczovL2Jhc2VtZW50LmZ1biIgY3RhPSJVc2UgQnJpZGdlIiBob3Jpem9udGFsPgogIDxpbWcgc3JjPSIvaW1hZ2VzL2JzbW50LWxvZ28uc3ZnIiBhbHQ9IkJhc2VtZW50IiBjbGFzc05hbWU9InctMzIiIC8+CgogIFN0YXJ0IGJyaWRnaW5nIHlvdXIgYXNzZXRzIHRvIEIzIHdpdGggaW5zdGFudCBkZXBvc2l0cyBhbmQgd2l0aGRyYXdhbHMKPC9DYXJkPgoKIyMgSW5zdGFudCBCcmlkZ2UKCjxkaXYgc3R5bGU9e3sgbWFyZ2luQm90dG9tOiAnMTZweCcgfX0+CiAgPHNwYW4gc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAnIzNiODJmNicsIGNvbG9yOiAnd2hpdGUnLCBwYWRkaW5nOiAnNHB4IDhweCcsIGJvcmRlclJhZGl1czogJzRweCcsIGZvbnRTaXplOiAnMTJweCcsIG1hcmdpblJpZ2h0OiAnOHB4JyB9fT5JbnN0YW50IERlcG9zaXRzPC9zcGFuPgogIDxzcGFuIHN0eWxlPXt7IGJhY2tncm91bmRDb2xvcjogJyM4YjVjZjYnLCBjb2xvcjogJ3doaXRlJywgcGFkZGluZzogJzRweCA4cHgnLCBib3JkZXJSYWRpdXM6ICc0cHgnLCBmb250U2l6ZTogJzEycHgnLCBtYXJnaW5SaWdodDogJzhweCcgfX0+SW5zdGFudCBXaXRoZHJhd2Fsczwvc3Bhbj4KICA8c3BhbiBzdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6ICcjMTBiOTgxJywgY29sb3I6ICd3aGl0ZScsIHBhZGRpbmc6ICc0cHggOHB4JywgYm9yZGVyUmFkaXVzOiAnNHB4JywgZm9udFNpemU6ICcxMnB4JyB9fT5Mb3cgRmVlPC9zcGFuPgo8L2Rpdj4KCkVhc2lseSBicmlkZ2UgZnJvbSBhbnkgRVZNIGNoYWluICYgU29sYW5hIHRvIEIzIHdpdGggUmVsYXkuCgo8U3RlcHM+CjxTdGVwIHRpdGxlPSJHbyB0byB0aGUgUmVsYXkgQnJpZGdlIj4KICBWaXNpdCBbcmVsYXkubGlua10oaHR0cHM6Ly9yZWxheS5saW5rKSB0byBhY2Nlc3MgdGhlIFJlbGF5IGJyaWRnZSBpbnRlcmZhY2UuCjwvU3RlcD4KCjxTdGVwIHRpdGxlPSJDb25uZWN0IHlvdXIgV2FsbGV0Ij4KICBDb25uZWN0IHlvdXIgd2FsbGV0IHRvIHN0YXJ0IHRoZSBicmlkZ2luZyBwcm9jZXNzLgo8L1N0ZXA+Cgo8U3RlcCB0aXRsZT0iRW50ZXIgYnJpZGdlIGFtb3VudCI+CiAgRW50ZXIgdGhlIGFtb3VudCBvZiBFVEggeW91IHdhbnQgdG8gYnJpZGdlIHRvIEIzLgo8L1N0ZXA+Cgo8U3RlcCB0aXRsZT0iQ29uZmlybSB0cmFuc2FjdGlvbiI+CiAgQ29uZmlybSB0aGUgdHJhbnNhY3Rpb24gYW5kIHlvdSdsbCByZWNlaXZlIGJyaWRnZWQgZnVuZHMgaW4gdW5kZXIgYSBtaW51dGUuCiAgCiAgPENoZWNrPgogIFJlbGF5IHN1cHBvcnRzIGJyaWRnaW5nIGZyb20gbXVsdGlwbGUgY2hhaW5zIGluY2x1ZGluZyBTb2xhbmEuCiAgPC9DaGVjaz4KPC9TdGVwPgo8L1N0ZXBzPgoKPENhcmQgdGl0bGU9IlVzZSBSZWxheSBCcmlkZ2UiIGhyZWY9Imh0dHBzOi8vcmVsYXkubGluayIgY3RhPSJVc2UgQnJpZGdlIiBob3Jpem9udGFsPgogIDxpbWcgc3JjPSIvaW1hZ2VzL3JlbGF5LWxvZ28uYXZpZiIgYWx0PSJSZWxheSIgY2xhc3NOYW1lPSJ3LTMyIiAvPgoKICBCcmlkZ2UgZnJvbSBhbnkgRVZNIGNoYWluIGFuZCBTb2xhbmEgdG8gQjMgaW5zdGFudGx5CjwvQ2FyZD4KCiMjIE5hdGl2ZSBCcmlkZ2UKCjxkaXYgc3R5bGU9e3sgbWFyZ2luQm90dG9tOiAnMTZweCcgfX0+CiAgPHNwYW4gc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAnIzNiODJmNicsIGNvbG9yOiAnd2hpdGUnLCBwYWRkaW5nOiAnNHB4IDhweCcsIGJvcmRlclJhZGl1czogJzRweCcsIGZvbnRTaXplOiAnMTJweCcsIG1hcmdpblJpZ2h0OiAnOHB4JyB9fT5CYXNlIHRvIEIzPC9zcGFuPgogIDxzcGFuIHN0eWxlPXt7IGJhY2tncm91bmRDb2xvcjogJyNmNTllMGInLCBjb2xvcjogJ3doaXRlJywgcGFkZGluZzogJzRweCA4cHgnLCBib3JkZXJSYWRpdXM6ICc0cHgnLCBmb250U2l6ZTogJzEycHgnLCBtYXJnaW5SaWdodDogJzhweCcgfX0+Ny1EYXkgV2l0aGRyYXdhbHM8L3NwYW4+CiAgPHNwYW4gc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAnIzEwYjk4MScsIGNvbG9yOiAnd2hpdGUnLCBwYWRkaW5nOiAnNHB4IDhweCcsIGJvcmRlclJhZGl1czogJzRweCcsIGZvbnRTaXplOiAnMTJweCcgfX0+Tm8gRmVlczwvc3Bhbj4KPC9kaXY+CgpFYXNpbHkgYnJpZGdlIGZyb20gQmFzZSB0byBCMyB1c2luZyB0aGUgb2ZmaWNpYWwgT1AgU3RhY2sgY2Fub25pY2FsIGJyaWRnZSEKCjxXYXJuaW5nPgpXaXRoZHJhd2FscyBmcm9tIEIzIGJhY2sgdG8gQmFzZSBoYXZlIGEgNy1kYXkgY2hhbGxlbmdlIHBlcmlvZCBmb3Igc2VjdXJpdHkuIFVzZSB0aGlyZC1wYXJ0eSBicmlkZ2VzIGZvciBpbnN0YW50IHdpdGhkcmF3YWxzLgo8L1dhcm5pbmc+Cgo8U3RlcHM+CjxTdGVwIHRpdGxlPSJWaXNpdCB0aGUgYnJpZGdlIj4KICBHbyB0byBbYnJpZGdlLmIzLmZ1bl0oaHR0cHM6Ly9icmlkZ2UuYjMuZnVuKSB0byBhY2Nlc3MgdGhlIG9mZmljaWFsIGJyaWRnZS4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IkNvbm5lY3QgeW91ciBXYWxsZXQiPgogIENvbm5lY3QgeW91ciB3YWxsZXQgdG8gdGhlIGJyaWRnZSBpbnRlcmZhY2UuCjwvU3RlcD4KCjxTdGVwIHRpdGxlPSJDaG9vc2UgZGlyZWN0aW9uIj4KICBTZWxlY3Qgd2hldGhlciB5b3Ugd2FudCB0bzoKICAtICoqRGVwb3NpdCoqOiBCcmluZyBmdW5kcyBmcm9tIEJhc2Ug4oaSIEIzCiAgLSAqKldpdGhkcmF3Kio6IEJyaWRnZSBiYWNrIGZyb20gQjMg4oaSIEJhc2UKPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IkVudGVyIGFtb3VudCI+CiAgRW50ZXIgdGhlIGFtb3VudCBvZiBFVEggeW91IHdhbnQgdG8gYnJpZGdlLgo8L1N0ZXA+Cgo8U3RlcCB0aXRsZT0iQ29tcGxldGUgdHJhbnNhY3Rpb24iPgogIENsaWNrICJEZXBvc2l0IiBhbmQgY29uZmlybSB0aGUgdHJhbnNhY3Rpb24gaW4geW91ciB3YWxsZXQuCiAgCiAgPFRpcD4KICBEZXBvc2l0cyB0byBCMyBhcmUgaW5zdGFudCwgYnV0IHdpdGhkcmF3YWxzIHRha2UgNyBkYXlzIGZvciB0aGUgY2hhbGxlbmdlIHBlcmlvZC4KICA8L1RpcD4KPC9TdGVwPgo8L1N0ZXBzPgoKPENhcmQgdGl0bGU9IlVzZSBPZmZpY2lhbCBCcmlkZ2UiIGljb249ImJyaWRnZSIgaHJlZj0iaHR0cHM6Ly9icmlkZ2UuYjMuZnVuIiBjdGE9IkJyaWRnZSIgaG9yaXpvbnRhbD4KICBVc2UgdGhlIGJhdHRsZS10ZXN0ZWQgT1AgU3RhY2sgY2Fub25pY2FsIGJyaWRnZQo8L0NhcmQ+CgojIyBOYXRpdmUgVHJhbnNmZXIgKEJyaWRnZSBDb250cmFjdCkKCjxkaXYgc3R5bGU9e3sgbWFyZ2luQm90dG9tOiAnMTZweCcgfX0+CiAgPHNwYW4gc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAnIzNiODJmNicsIGNvbG9yOiAnd2hpdGUnLCBwYWRkaW5nOiAnNHB4IDhweCcsIGJvcmRlclJhZGl1czogJzRweCcsIGZvbnRTaXplOiAnMTJweCcsIG1hcmdpblJpZ2h0OiAnOHB4JyB9fT5JbnN0YW50IERlcG9zaXRzPC9zcGFuPgogIDxzcGFuIHN0eWxlPXt7IGJhY2tncm91bmRDb2xvcjogJyNmNTllMGInLCBjb2xvcjogJ3doaXRlJywgcGFkZGluZzogJzRweCA4cHgnLCBib3JkZXJSYWRpdXM6ICc0cHgnLCBmb250U2l6ZTogJzEycHgnLCBtYXJnaW5SaWdodDogJzhweCcgfX0+Ny1EYXkgV2l0aGRyYXdhbHM8L3NwYW4+CiAgPHNwYW4gc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAnIzEwYjk4MScsIGNvbG9yOiAnd2hpdGUnLCBwYWRkaW5nOiAnNHB4IDhweCcsIGJvcmRlclJhZGl1czogJzRweCcsIGZvbnRTaXplOiAnMTJweCcgfX0+Tm8gRmVlczwvc3Bhbj4KPC9kaXY+CgpTZW5kIEJhc2UgRVRIIHRocm91Z2ggdGhlIGJyaWRnZSBjb250cmFjdC4gVHJhbnNmZXIgKipCYXNlIEVUSCoqIHRvIHRoZSBmb2xsb3dpbmcgYnJpZGdlIGFkZHJlc3Mgb24gKipCYXNlIE1haW5uZXQqKjoKCjxXYXJuaW5nPgpUaGlzIG1ldGhvZCBpcyBmb3IgYWR2YW5jZWQgdXNlcnMgb25seS4gTWFrZSBzdXJlIHlvdSdyZSBzZW5kaW5nIGZyb20gQmFzZSBNYWlubmV0IHRvIGF2b2lkIGxvc2luZyBmdW5kcy4KPC9XYXJuaW5nPgoKYGBgdGV4dCBCcmlkZ2UgQWRkcmVzcwoweDc2OTU0N2E3MjM3ODNGQ0EzNkJBYWYxRUNjZjlkZmRiRjZkMDlGMzgKYGBgCgo8Tm90ZT4KV2hlbiB5b3Ugc2VuZCBFVEggdG8gdGhpcyBhZGRyZXNzIGZyb20gQmFzZSwgaXQgd2lsbCBhdXRvbWF0aWNhbGx5IGFwcGVhciBpbiB5b3VyIHdhbGxldCBvbiBCMy4gVGhpcyBpcyBhIGRpcmVjdCBjb250cmFjdCBpbnRlcmFjdGlvbiBtZXRob2QuCjwvTm90ZT4KCjxBY2NvcmRpb24gdGl0bGU9IkhvdyB0byB1c2UgdGhlIGJyaWRnZSBjb250cmFjdCI+CjEuICoqRW5zdXJlIHlvdSdyZSBvbiBCYXNlIE1haW5uZXQqKiBpbiB5b3VyIHdhbGxldAoyLiAqKlNlbmQgRVRIKiogdG8gdGhlIGJyaWRnZSBjb250cmFjdCBhZGRyZXNzIGFib3ZlCjMuICoqV2FpdCBmb3IgY29uZmlybWF0aW9uKiogLSB5b3VyIGZ1bmRzIHdpbGwgYXBwZWFyIG9uIEIzIGF1dG9tYXRpY2FsbHkKNC4gKipDaGVjayB5b3VyIEIzIHdhbGxldCoqIC0gc3dpdGNoIHRvIEIzIG5ldHdvcmsgdG8gc2VlIHlvdXIgYnJpZGdlZCBFVEgKCjxXYXJuaW5nPgpEb3VibGUtY2hlY2sgeW91J3JlIG9uIEJhc2UgTWFpbm5ldCBiZWZvcmUgc2VuZGluZy4gU2VuZGluZyBmcm9tIG90aGVyIG5ldHdvcmtzIG1heSByZXN1bHQgaW4gbG9zdCBmdW5kcy4KPC9XYXJuaW5nPgo8L0FjY29yZGlvbj4K",
    "lastUpdated": "2025-09-03T02:29:33.977Z"
  },
  {
    "sourceFile": "protocol/bridge-to-testnet.mdx",
    "sourceHash": "CjxOb3RlPgpUaGlzIGJyaWRnZSBpcyBzcGVjaWZpY2FsbHkgZm9yIHRlc3RuZXQgcHVycG9zZXMuIFVzZSBmcmVlIHRlc3RuZXQgRVRIIHRvIHRlc3QgeW91ciBhcHBsaWNhdGlvbnMgYmVmb3JlIGRlcGxveWluZyB0byBtYWlubmV0Lgo8L05vdGU+CgojIyBIb3cgdG8gQnJpZGdlCgo8U3RlcHM+CjxTdGVwIHRpdGxlPSJWaXNpdCB0aGUgVGVzdG5ldCBCcmlkZ2UiPgogIEdvIHRvIFt0ZXN0bmV0LmJyaWRnZS5iMy5mdW5dKGh0dHBzOi8vdGVzdG5ldC5icmlkZ2UuYjMuZnVuKSB0byBhY2Nlc3MgdGhlIG9mZmljaWFsIHRlc3RuZXQgYnJpZGdlIGludGVyZmFjZS4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IkNvbm5lY3QgeW91ciBXYWxsZXQiPgogIENvbm5lY3QgeW91ciB3YWxsZXQgKE1ldGFNYXNrLCBDb2luYmFzZSBXYWxsZXQsIGV0Yy4pIHRvIHRoZSBicmlkZ2UgaW50ZXJmYWNlLgogIAogIDxUaXA+CiAgTWFrZSBzdXJlIHlvdXIgd2FsbGV0IGlzIGNvbm5lY3RlZCB0byBlaXRoZXIgQmFzZSBTZXBvbGlhIG9yIEIzIFRlc3RuZXQgZGVwZW5kaW5nIG9uIHdoaWNoIGRpcmVjdGlvbiB5b3Ugd2FudCB0byBicmlkZ2UuCiAgPC9UaXA+CjwvU3RlcD4KCjxTdGVwIHRpdGxlPSJDaG9vc2UgQnJpZGdlIERpcmVjdGlvbiI+CiAgU2VsZWN0IHdoZXRoZXIgeW91IHdhbnQgdG86CiAgLSAqKkRlcG9zaXQqKjogQnJpbmcgZnVuZHMgZnJvbSBCYXNlIFNlcG9saWEg4oaSIEIzIFRlc3RuZXQKICAtICoqV2l0aGRyYXcqKjogQnJpZGdlIGJhY2sgZnJvbSBCMyBUZXN0bmV0IOKGkiBCYXNlIFNlcG9saWEKICAKICBDbGljayBlaXRoZXIgdGhlICoqRGVwb3NpdCoqIG9yICoqV2l0aGRyYXcqKiB0YWJzIGFjY29yZGluZ2x5Lgo8L1N0ZXA+Cgo8U3RlcCB0aXRsZT0iRW50ZXIgQW1vdW50Ij4KICBFbnRlciB0aGUgYW1vdW50IG9mIEVUSCB5b3Ugd2FudCB0byBicmlkZ2UuCiAgCiAgPENhcmQgdGl0bGU9Ik5lZWQgQmFzZSBTZXBvbGlhIEVUSD8iIGljb249ImZhdWNldCIgaHJlZj0iaHR0cHM6Ly9kb2NzLmJhc2Uub3JnL2Jhc2UtY2hhaW4vdG9vbHMvbmV0d29yay1mYXVjZXRzIiBjdGE9IkdldCBCYXNlIFRlc3RuZXQgRVRIIiBob3Jpem9udGFsPgogICAgSWYgeW91IG5lZWQgQmFzZSBTZXBvbGlhIEVUSCwgdXNlIGEgQmFzZSBTZXBvbGlhIGZhdWNldCB0byBnZXQgZnJlZSB0ZXN0bmV0IHRva2VucwogIDwvQ2FyZD4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IkNvbmZpcm0gVHJhbnNhY3Rpb24iPgogIENsaWNrICJEZXBvc2l0IiAob3IgIldpdGhkcmF3IikgYW5kIGNvbmZpcm0gdGhlIHRyYW5zYWN0aW9uIHByb21wdCB0aGF0IGFwcGVhcnMgaW4geW91ciB3YWxsZXQuCiAgCiAgPFdhcm5pbmc+CiAgRG91YmxlLWNoZWNrIHRoYXQgeW91J3JlIG9uIHRoZSBjb3JyZWN0IHRlc3RuZXQgYW5kIHVzaW5nIHRlc3RuZXQgRVRILCBub3QgbWFpbm5ldCBmdW5kcy4KICA8L1dhcm5pbmc+CjwvU3RlcD4KCjxTdGVwIHRpdGxlPSJXYWl0IGZvciBDb21wbGV0aW9uIj4KICBXYWl0IGEgZmV3IG1pbnV0ZXMgZm9yIHRoZSBicmlkZ2UgcHJvY2VzcyB0byBjb21wbGV0ZS4gWW91IGNhbiBjaGVjayB0aGUgc3RhdHVzIGluIHlvdXIgIkhpc3RvcnkiIHRhYi4KICAKICA8Q2hlY2s+CiAgWW91ciB0ZXN0bmV0IEVUSCB3aWxsIGFwcGVhciBpbiB5b3VyIHdhbGxldCBvbiB0aGUgZGVzdGluYXRpb24gbmV0d29yayB3aXRoaW4gYSBmZXcgbWludXRlcy4KICA8L0NoZWNrPgo8L1N0ZXA+CjwvU3RlcHM+CgojIyBOZXR3b3JrIEluZm9ybWF0aW9uCgo8Q2FyZEdyb3VwIGNvbHM9ezJ9PgogIDxDYXJkIHRpdGxlPSJCYXNlIFNlcG9saWEgVGVzdG5ldCI+CiAgICAqKkNoYWluIElEKio6IDg0NTMyICAKICAgICoqUlBDKio6IGh0dHBzOi8vc2Vwb2xpYS5iYXNlLm9yZyAgCiAgICAqKkV4cGxvcmVyKio6IGh0dHBzOi8vc2Vwb2xpYS5iYXNlc2Nhbi5vcmcKICA8L0NhcmQ+CiAgCiAgPENhcmQgdGl0bGU9IkIzIFNlcG9saWEgVGVzdG5ldCI+CiAgICAqKkNoYWluIElEKio6IDE5OTMgIAogICAgKipSUEMqKjogaHR0cHM6Ly90ZXN0bmV0LXJwYy5iMy5mdW4gIAogICAgKipFeHBsb3JlcioqOiBodHRwczovL3Rlc3RuZXQtZXhwbG9yZXIuYjMuZnVuCiAgPC9DYXJkPgo8L0NhcmRHcm91cD4KCiMjIFRlc3RuZXQgUmVzb3VyY2VzCgo8Q2FyZEdyb3VwIGNvbHM9ezJ9PgogIDxDYXJkIHRpdGxlPSJUZXN0bmV0IEJyaWRnZSIgaWNvbj0iYnJpZGdlIiBocmVmPSJodHRwczovL3Rlc3RuZXQuYnJpZGdlLmIzLmZ1biIgY3RhPSJCcmlkZ2UgTm93Ij4KICAgIE9mZmljaWFsIGJyaWRnZSBmb3IgbW92aW5nIGFzc2V0cyBiZXR3ZWVuIEJhc2UgU2Vwb2xpYSBhbmQgQjMgVGVzdG5ldAogIDwvQ2FyZD4KICAKICA8Q2FyZCB0aXRsZT0iQjMgVGVzdG5ldCBGYXVjZXQiIGljb249ImZhdWNldCIgaHJlZj0iaHR0cHM6Ly90ZXN0bmV0LWZhdWNldC5iMy5mdW4iIGN0YT0iR2V0IFRlc3QgRVRIIj4KICAgIEdldCBmcmVlIEIzIHRlc3RuZXQgRVRIIGZvciBkZXZlbG9wbWVudCBhbmQgdGVzdGluZwogIDwvQ2FyZD4KPC9DYXJkR3JvdXA+CgojIyBBZGRpdGlvbmFsIEZhdWNldHMKCklmIHlvdSBuZWVkIHRlc3RuZXQgRVRIIGZvciBkZXZlbG9wbWVudCwgaGVyZSBhcmUgc29tZSByZWxpYWJsZSBmYXVjZXQgb3B0aW9uczoKCjxBY2NvcmRpb25Hcm91cD4KPEFjY29yZGlvbiB0aXRsZT0iQmFzZSBTZXBvbGlhIEZhdWNldHMiPgogIC0gW0NvaW5iYXNlIEJhc2UgRmF1Y2V0XShodHRwczovL2NvaW5iYXNlLmNvbS9mYXVjZXRzL2Jhc2UtZXRoZXJldW0tc2Vwb2xpYS1mYXVjZXQpIC0gT2ZmaWNpYWwgQ29pbmJhc2UgZmF1Y2V0CiAgLSBbQWxjaGVteSBCYXNlIFNlcG9saWEgRmF1Y2V0XShodHRwczovL3NlcG9saWFmYXVjZXQuY29tKSAtIFJlbGlhYmxlIGZhdWNldCBmb3IgQmFzZSBTZXBvbGlhIEVUSAogIC0gW1F1aWNrTm9kZSBCYXNlIEZhdWNldF0oaHR0cHM6Ly9mYXVjZXQucXVpY2tub2RlLmNvbS9iYXNlL3NlcG9saWEpIC0gTXVsdGlwbGUgdGVzdG5ldCBzdXBwb3J0CjwvQWNjb3JkaW9uPgoKPEFjY29yZGlvbiB0aXRsZT0iQjMgVGVzdG5ldCBGYXVjZXQiPgogIC0gW0IzIFRlc3RuZXQgRmF1Y2V0XShodHRwczovL3Rlc3RuZXQtZmF1Y2V0LmIzLmZ1bikgLSBPZmZpY2lhbCBCMyB0ZXN0bmV0IGZhdWNldAogIC0gR2V0IGZyZWUgQjMgdGVzdG5ldCBFVEggZGlyZWN0bHkgd2l0aG91dCBicmlkZ2luZwo8L0FjY29yZGlvbj4KPC9BY2NvcmRpb25Hcm91cD4KCiMjIFRyb3VibGVzaG9vdGluZwoKPEFjY29yZGlvbkdyb3VwPgo8QWNjb3JkaW9uIHRpdGxlPSJCcmlkZ2UgdHJhbnNhY3Rpb24gc3R1Y2siPgogIC0gQ2hlY2sgdGhlIHRyYW5zYWN0aW9uIHN0YXR1cyBvbiB0aGUgYmxvY2sgZXhwbG9yZXIKICAtIFZlcmlmeSB5b3UncmUgY29ubmVjdGVkIHRvIHRoZSBjb3JyZWN0IHRlc3RuZXQKICAtIFRyeSBpbmNyZWFzaW5nIGdhcyBmZWVzIGlmIHRoZSB0cmFuc2FjdGlvbiBpcyBwZW5kaW5nCiAgLSBDb250YWN0IHN1cHBvcnQgaWYgdGhlIGJyaWRnZSBoYXMgYmVlbiBwZW5kaW5nIGZvciBvdmVyIDMwIG1pbnV0ZXMKPC9BY2NvcmRpb24+Cgo8QWNjb3JkaW9uIHRpdGxlPSJXYWxsZXQgbm90IGNvbm5lY3RpbmciPgogIC0gRW5zdXJlIHlvdXIgd2FsbGV0IHN1cHBvcnRzIHRoZSB0ZXN0bmV0IG5ldHdvcmtzCiAgLSBUcnkgcmVmcmVzaGluZyB0aGUgcGFnZSBhbmQgcmVjb25uZWN0aW5nCiAgLSBDaGVjayB0aGF0IHlvdSdyZSBvbiB0aGUgY29ycmVjdCBuZXR3b3JrIGluIHlvdXIgd2FsbGV0CiAgLSBDbGVhciB5b3VyIGJyb3dzZXIgY2FjaGUgaWYgaXNzdWVzIHBlcnNpc3QKPC9BY2NvcmRpb24+Cgo8QWNjb3JkaW9uIHRpdGxlPSJJbnN1ZmZpY2llbnQgZnVuZHMgZm9yIGdhcyI+CiAgLSBNYWtlIHN1cmUgeW91IGhhdmUgZW5vdWdoIEVUSCB0byBwYXkgZm9yIGdhcyBmZWVzCiAgLSBVc2UgYSBmYXVjZXQgdG8gZ2V0IG1vcmUgdGVzdG5ldCBFVEgKICAtIFRyeSBicmlkZ2luZyBhIHNtYWxsZXIgYW1vdW50IHRvIGNvbnNlcnZlIGdhcwo8L0FjY29yZGlvbj4KPC9BY2NvcmRpb25Hcm91cD4KCiMjIERldmVsb3BtZW50IFdvcmtmbG93Cgo8U3RlcHM+CjxTdGVwIHRpdGxlPSJHZXQgQmFzZSBTZXBvbGlhIEVUSCI+CiAgVXNlIGEgQmFzZSBTZXBvbGlhIGZhdWNldCB0byBnZXQgZnJlZSB0ZXN0bmV0IEVUSC4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IkJyaWRnZSB0byBCMyBUZXN0bmV0Ij4KICBVc2UgdGhlIHRlc3RuZXQgYnJpZGdlIHRvIG1vdmUgRVRIIGZyb20gQmFzZSBTZXBvbGlhIHRvIEIzIFRlc3RuZXQuCjwvU3RlcD4KCjxTdGVwIHRpdGxlPSJEZXBsb3kgYW5kIFRlc3QiPgogIERlcGxveSB5b3VyIGNvbnRyYWN0cyBhbmQgdGVzdCB5b3VyIGFwcGxpY2F0aW9ucyBvbiBCMyBUZXN0bmV0Lgo8L1N0ZXA+Cgo8U3RlcCB0aXRsZT0iUmVhZHkgZm9yIE1haW5uZXQiPgogIFdoZW4gdGVzdGluZyBpcyBjb21wbGV0ZSwgZGVwbG95IHRvIEIzIE1haW5uZXQgdXNpbmcgdGhlIFttYWlubmV0IGJyaWRnZV0oL3Byb3RvY29sL2JyaWRnZSkuCjwvU3RlcD4KPC9TdGVwcz4K",
    "lastUpdated": "2025-09-03T02:30:25.636Z"
  },
  {
    "sourceFile": "protocol/brand-kit.mdx",
    "sourceHash": "CjxkaXYgY2xhc3NOYW1lPSJ0ZXh0LWNlbnRlciBteS00IGZvbnQtYm9sZCB0ZXh0LWxnIHRyYWNraW5nLXdpZGUgdGV4dC1wcmltYXJ5Ij4KICDinKYgQ09NTVVOSVRZIERSSVZFTiDinKYgRlVOIOKcpiBFQ09TWVNURU0gQUxJR05FRCDinKYKPC9kaXY+CgojIyBQcmltYXJ5IExvZ28KCjxDYXJkR3JvdXAgY29scz17M30+CiAgPENhcmQgdGl0bGU9IkJsdWUgTG9nbyI+CiAgICA8aW1nIHNyYz0iL2ltYWdlcy9iMy1sb2dvLWJsdWUuc3ZnIiBhbHQ9IkIzIEJsdWUgTG9nbyIgIGNsYXNzTmFtZT0ncC02IGJnLWJsYWNrIHJvdW5kZWQteGwgbXktMycvPgogICAgCiAgICA8ZGl2IGNsYXNzTmFtZT0iZmxleCBqdXN0aWZ5LXN0YXJ0IGl0ZW1zLWNlbnRlciBnYXAtNCI+CiAgICAgIDxhIGhyZWY9Imh0dHBzOi8vY2RuLmIzLmZ1bi9iM19sb2dvLnN2ZyIgdGFyZ2V0PSJfYmxhbmsiIGRvd25sb2FkPSJiMy1sb2dvLWJsdWUuc3ZnIj5TVkc8L2E+CiAgICAgIDxhIGhyZWY9Imh0dHBzOi8vY2RuLmIzLmZ1bi9iM19sb2dvQC5wbmciIHRhcmdldD0iX2JsYW5rIiBkb3dubG9hZD0iYjMtbG9nby1ibHVlLnBuZyI+UE5HPC9hPgogICAgPC9kaXY+CiAgPC9DYXJkPgogIAogIDxDYXJkIHRpdGxlPSJXaGl0ZSBMb2dvIj4KICAgIDxpbWcgc3JjPSIvaW1hZ2VzL2IzLWxvZ28td2hpdGUuc3ZnIiBhbHQ9IkIzIFdoaXRlIExvZ28iICBjbGFzc05hbWU9J3AtNiBiZy1ibGFjayByb3VuZGVkLXhsIG15LTMnLz4KICAgIAogICAgPGRpdiBjbGFzc05hbWU9ImZsZXgganVzdGlmeS1zdGFydCBpdGVtcy1jZW50ZXIgZ2FwLTQiPgogICAgICA8YSBocmVmPSJodHRwczovL2Nkbi5iMy5mdW4vYjNfbG9nb193aGl0ZS5zdmciIHRhcmdldD0iX2JsYW5rIiBkb3dubG9hZD0iYjMtbG9nby13aGl0ZS5zdmciPlNWRzwvYT4KICAgIDwvZGl2PgogIDwvQ2FyZD4KICAKICA8Q2FyZCB0aXRsZT0iQmxhY2sgTG9nbyI+CiAgICA8aW1nIHNyYz0iL2ltYWdlcy9iM19sb2dvX2JsYWNrLnN2ZyIgYWx0PSJCMyBCbGFjayBMb2dvIiAgY2xhc3NOYW1lPSdwLTYgYmctd2hpdGUgcm91bmRlZC14bCBteS0zJy8+CiAgICAKICAgIDxkaXYgY2xhc3NOYW1lPSJmbGV4IGp1c3RpZnktc3RhcnQgaXRlbXMtY2VudGVyIGdhcC00Ij4KICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9jZG4uYjMuZnVuL2IzX2xvZ29fYmxhY2suc3ZnIiB0YXJnZXQ9Il9ibGFuayIgZG93bmxvYWQ9ImIzLWxvZ28tYmxhY2suc3ZnIj5TVkc8L2E+CiAgICA8L2Rpdj4KICA8L0NhcmQ+CjwvQ2FyZEdyb3VwPgoKIyMgQ29sb3JzCgpEb24ndCBsaW1pdCB5b3Vyc2VsZiB0byBqdXN0IHRoaXMgY29tbW9uIGJyYW5kIGNvbG9ycy4gQjMgaW52aXRlcyB5b3UgdG8gYmUgZXhwcmVzc2l2ZSB3aXRoIGRpZmZlcmVudCBmdW4sIHZpYnJhbnQgY29sb3IgcGFsbGV0ZXMuCgo8Q2FyZEdyb3VwIGNvbHM9ezN9PgogIDxDYXJkIHRpdGxlPSJQcmltYXJ5IEJsdWUiPgogICAgPGRpdiBzdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6ICIjMDA3QUZGIiwgaGVpZ2h0OiAiODBweCIsIGJvcmRlclJhZGl1czogIjhweCIsIG1hcmdpbjogIjFyZW0gMCIgfX0+PC9kaXY+CiAgICAKICAgIGBgYAogICAgIzAwN0FGRgogICAgYGBgCiAgPC9DYXJkPgogIAogIDxDYXJkIHRpdGxlPSJHcmV5Ij4KICAgIDxkaXYgc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAiIzZCNzI4MCIsIGhlaWdodDogIjgwcHgiLCBib3JkZXJSYWRpdXM6ICI4cHgiLCBtYXJnaW46ICIxcmVtIDAiIH19PjwvZGl2PgogICAgCiAgICBgYGAKICAgICM2QjcyODAKICAgIGBgYAogIDwvQ2FyZD4KICAKICA8Q2FyZCB0aXRsZT0iV2hpdGUiPgogICAgPGRpdiBzdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6ICIjRkZGRkZGIiwgaGVpZ2h0OiAiODBweCIsIGJvcmRlclJhZGl1czogIjhweCIsIGJvcmRlcjogIjJweCBzb2xpZCAjZTVlN2ViIiwgbWFyZ2luOiAiMXJlbSAwIiB9fT48L2Rpdj4KICAgIAogICAgYGBgCiAgICAjRkZGRkZGCiAgICBgYGAKICA8L0NhcmQ+CjwvQ2FyZEdyb3VwPgoKIyMgQnJhbmQgR3VpZGVsaW5lcwoKPENhcmRHcm91cCBjb2xzPXsyfT4KICA8Q2FyZCB0aXRsZT0iTGV0IGl0IGJyZWF0aGUiIGljb249ImV4cGFuZCI+CiAgICBPdXIgbG9nbyB3b3JrcyBiZXN0IHdoZW4gaXQgaGFzIGFkZXF1YXRlIG1hcmdpbnMuCiAgPC9DYXJkPgogIAogIDxDYXJkIHRpdGxlPSJNYWtlIGl0IGZ1biIgaWNvbj0iaGVhcnQiPgogICAgS2VlcCB0aGluZ3MgbGlnaHQsIGZyaWVuZGx5LCBhbmQgZW5nYWdpbmcuCiAgPC9DYXJkPgo8L0NhcmRHcm91cD4KCiMjIEZvbnRzCgpJbXBvcnQgaW5zaWRlIENTUyBzdHlsZXNoZWV0OgoKYGBgY3NzCkBpbXBvcnQgdXJsKCJodHRwczovL2Nkbi5iMy5mdW4vZm9udHMuY3NzIik7CmBgYAoKSW1wb3J0IHZpYSBgPGxpbms+YCB0YWc6CgpgYGBodG1sCjxsaW5rIGhyZWY9Imh0dHBzOi8vY2RuLmIzLmZ1bi9mb250cy5jc3MiIHJlbD0ic3R5bGVzaGVldCI+CmBgYAoKTm93IHlvdSBjYW4gdXNlIHRoZSBmb250czoKCmBgYGNzcwpib2R5IHsgZm9udC1mYW1pbHk6ICJOZXVlIE1vbnRyZWFsIE1lZGl1bSIsIHNhbnMtc2VyaWY7IH0KYGBgCgojIyMjIEF2YWlsYWJsZSBmb250czoKCi0gKipOZXVlIE1vbnRyZWFsIEJvbGQqKiAgCi0gKipOZXVlIE1vbnRyZWFsIFJlZ3VsYXIqKiAgCi0gKipOZXVlIE1vbnRyZWFsIEJvb2sqKiAgCi0gKipOZXVlIE1vbnRyZWFsIE1lZGl1bSoqICAKLSAqKk5ldWUgTW9udHJlYWwgU2VtaWJvbGQqKiAgCi0gKipDYWxpYnJlIEJvbGQqKiAgCi0gKipDYWxpYnJlIEhlYXZ5KiogIAotICoqUGFjayoqCgojIyMjIERvd25sb2FkIHRoZSBvcmlnaW5hbCBmb250czoKCjxDYXJkIHRpdGxlPSJDYWxpYnJlIj4KICBbTGljZW5zZV0oaHR0cHM6Ly9rbGltLmNvLm56L3JldGFpbC1mb250cy9jYWxpYnJlLykKPC9DYXJkPgoKPENhcmQgdGl0bGU9Ik5ldWUgTW9udHJlYWwiPgogIFtMaWNlbnNlXShodHRwczovL3BhbmdyYW1wYW5ncmFtLmNvbS9wcm9kdWN0cy9uZXVlLW1vbnRyZWFsKQo8L0NhcmQ+Cgo8Q2FyZCB0aXRsZT0iUEFDSyI+CiAgW0xpY2Vuc2VdKGh0dHBzOi8vaGFycnljcmVzc3dlbGwuY29tL3BhY2svKQo8L0NhcmQ+CgoKIyMgRnVuIEFzc2V0cwoKPENhcmRHcm91cCBjb2xzPXszfT4KICA8Q2FyZCB0aXRsZT0iVGhlIEN1cnNvciI+CiAgICA8aW1nIHNyYz0iL2ltYWdlcy9jdXJzb3IucG5nIiBhbHQ9IkIzIEN1cnNvciIgY2xhc3NOYW1lPSdyb3VuZGVkLXhsIG15LTMgYXNwZWN0LXNxdWFyZSBwLTYgYmctd2hpdGUnLz4KICAgIAogICAgPGRpdiBjbGFzc05hbWU9ImZsZXgganVzdGlmeS1zdGFydCBpdGVtcy1jZW50ZXIgZ2FwLTQiPgogICAgICA8YSBocmVmPSJodHRwczovL2Nkbi5iMy5mdW4vY3Vyc29yLnBuZyIgdGFyZ2V0PSJfYmxhbmsiIGRvd25sb2FkPSJjdXJzb3IucG5nIj5QTkc8L2E+CiAgICAgIDxhIGhyZWY9Imh0dHBzOi8vY2RuLmIzLmZ1bi9jdXJzb3IlNDAyeC5wbmciIHRhcmdldD0iX2JsYW5rIiBkb3dubG9hZD0iY3Vyc29yQDJ4LnBuZyI+UE5HIEAgMng8L2E+CiAgICA8L2Rpdj4KICA8L0NhcmQ+CiAgCiAgPENhcmQgdGl0bGU9IkJsdWUgVGV4dHVyZSI+CiAgICA8aW1nIHNyYz0iL2ltYWdlcy9iMy1iZy10ZXh0dXJlLmpwZyIgYWx0PSJCMyBCbHVlIFRleHR1cmUiIGNsYXNzTmFtZT0ncm91bmRlZC14bCBteS0zIGFzcGVjdC1zcXVhcmUnLz4KCiAgICA8ZGl2IGNsYXNzTmFtZT0iZmxleCBqdXN0aWZ5LXN0YXJ0IGl0ZW1zLWNlbnRlciBnYXAtNCI+CiAgICAgIDxhIGhyZWY9Imh0dHBzOi8vY2RuLmIzLmZ1bi9iMy1iZy10ZXh0dXJlLmpwZyIgdGFyZ2V0PSJfYmxhbmsiIGRvd25sb2FkPSJiMy1iZy10ZXh0dXJlLmpwZyI+SlBHPC9hPgogICAgPC9kaXY+CiAgPC9DYXJkPgogIAogIDxDYXJkIHRpdGxlPSJUaGUgR3JpZCI+CiAgICA8aW1nIHNyYz0iL2ltYWdlcy9iM19ncmlkLnN2ZyIgYWx0PSJCMyBHcmlkIiBjbGFzc05hbWU9J3JvdW5kZWQteGwgbXktMyBhc3BlY3Qtc3F1YXJlIHAtNiBiZy13aGl0ZScvPgogICAgCiAgICA8ZGl2IGNsYXNzTmFtZT0iZmxleCBqdXN0aWZ5LXN0YXJ0IGl0ZW1zLWNlbnRlciBnYXAtNCI+CiAgICAgIDxhIGhyZWY9Imh0dHBzOi8vY2RuLmIzLmZ1bi9iM19ncmlkLnN2ZyIgdGFyZ2V0PSJfYmxhbmsiIGRvd25sb2FkPSJiM19ncmlkLnN2ZyI+U1ZHPC9hPgogICAgICA8YSBocmVmPSJodHRwczovL2Nkbi5iMy5mdW4vYjNfZ3JpZC5wbmciIHRhcmdldD0iX2JsYW5rIiBkb3dubG9hZD0iYjNfZ3JpZC5wbmciPlBORzwvYT4KICAgIDwvZGl2PgogIDwvQ2FyZD4KPC9DYXJkR3JvdXA+CgojIyBNb3Rpb24KCkFuaW1hdGlvbnMgYXJlIHdlbGNvbWVkIHdoZW4gcmVwcmVzZW50aW5nIEIzLCBhZnRlciBhbGwgLSBtb3ZlbWVudCBpcyBmdW4hCgpXZSByZWNvbW1lbmQgRnJhbWVyIE1vdGlvbiBhcyBhIFJlYWN0IGFuaW1hdGlvbiBsaWJyYXJ5LCBidXQgeW91IGNhbiB1c2Ugd2hhdGV2ZXIgeW91IGxpa2UhCgo8Q2FyZEdyb3VwIGNvbHM9ezJ9PgogIDxDYXJkIHRpdGxlPSJMb2dvIEFuaW1hdGlvbiAoMTY6OSkiPgogICAgPHZpZGVvIAogICAgICBjb250cm9scyAKICAgICAgY2xhc3NOYW1lPSdyb3VuZGVkLXhsIG15LTMgYXNwZWN0LXZpZGVvJwogICAgICBzcmM9Ii9pbWFnZXMvYjMtbG9nby1hbmltYXRpb24td2lkZS5tcDQiCiAgICA+CiAgICAgIFlvdXIgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHRoZSB2aWRlbyB0YWcuCiAgICA8L3ZpZGVvPgogICAgCiAgICA8ZGl2IGNsYXNzTmFtZT0iZmxleCBqdXN0aWZ5LXN0YXJ0IGl0ZW1zLWNlbnRlciBnYXAtNCI+CiAgICAgIDxhIGhyZWY9Imh0dHBzOi8vY2RuLmIzLmZ1bi9iMy1sb2dvLWFuaW1hdGlvbi13aWRlLm1wNCIgdGFyZ2V0PSJfYmxhbmsiIGRvd25sb2FkPSJiMy1sb2dvLWFuaW1hdGlvbi13aWRlLm1wNCI+TVA0PC9hPgogICAgICA8YSBocmVmPSJodHRwczovL2Nkbi5iMy5mdW4vYjMtbG9nby1hbmltYXRpb24td2lkZS1hZnRlci1lZmZlY3RzLXByb2plY3QuemlwIiB0YXJnZXQ9Il9ibGFuayIgZG93bmxvYWQ9ImIzLWxvZ28tYW5pbWF0aW9uLXdpZGUtYWZ0ZXItZWZmZWN0cy1wcm9qZWN0LnppcCI+QWZ0ZXIgRWZmZWN0cyBQcm9qZWN0PC9hPgogICAgPC9kaXY+CiAgPC9DYXJkPgogIAogIDxDYXJkIHRpdGxlPSJMb2dvIEFuaW1hdGlvbiAoMToxKSI+CiAgICA8dmlkZW8gCiAgICAgIGNvbnRyb2xzIAogICAgICBjbGFzc05hbWU9J3JvdW5kZWQteGwgbXktMyBhc3BlY3Qtc3F1YXJlJwogICAgICBzcmM9Ii9pbWFnZXMvYjMtbG9nby1hbmltYXRpb24tc3F1YXJlLm1wNCIKICAgID4KICAgICAgWW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdGhlIHZpZGVvIHRhZy4KICAgIDwvdmlkZW8+CiAgICAKICAgIDxkaXYgY2xhc3NOYW1lPSJmbGV4IGp1c3RpZnktc3RhcnQgaXRlbXMtY2VudGVyIGdhcC00Ij4KICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9jZG4uYjMuZnVuL2IzLWxvZ28tYW5pbWF0aW9uLXNxdWFyZS5tcDQiIHRhcmdldD0iX2JsYW5rIiBkb3dubG9hZD0iYjMtbG9nby1hbmltYXRpb24tc3F1YXJlLm1wNCI+TVA0PC9hPgogICAgICA8YSBocmVmPSJodHRwczovL2Nkbi5iMy5mdW4vYjMtbG9nby1hbmltYXRpb24tc3F1YXJlLWFmdGVyLWVmZmVjdHMtcHJvamVjdC56aXAiIHRhcmdldD0iX2JsYW5rIiBkb3dubG9hZD0iYjMtbG9nby1hbmltYXRpb24tc3F1YXJlLWFmdGVyLWVmZmVjdHMtcHJvamVjdC56aXAiPkFmdGVyIEVmZmVjdHMgUHJvamVjdDwvYT4KICAgIDwvZGl2PgogIDwvQ2FyZD4KPC9DYXJkR3JvdXA+CgojIyBWaWJlIPCfkYwKCkIzIGlzIGFsbCBhYm91dCBoYXZpbmcgZnVuLCBhbmQgcmVwcmVzZW50aW5nIHRoYXQgaW4geW91ciBsaWZlIHRocm91Z2ggZ2FtaW5nICYgbW9yZS4KClJlcCBCMyBzd2FnIGluIG90aGVyIHdheXMhCgojIyBQaG9uZSBMb2NrIFNjcmVlbiBXYWxscGFwZXJzCgo8Q2FyZEdyb3VwIGNvbHM9ezN9PgogIDxDYXJkIHRpdGxlPSJMb2NrIFNjcmVlbiB2MSI+CiAgICA8aW1nIHNyYz0iL2ltYWdlcy9iMy1pcGhvbmUtd2FsbHBhcGVyLXYxLnBuZyIgYWx0PSJCMyBpUGhvbmUgV2FsbHBhcGVyIHYxIiBjbGFzc05hbWU9J3JvdW5kZWQteGwgbXktMycvPgogICAgCiAgICBbRG93bmxvYWRdKGh0dHBzOi8vY2RuLmIzLmZ1bi9iMy1pcGhvbmUtd2FsbHBhcGVyLXYxLnBuZykKICA8L0NhcmQ+CiAgCiAgPENhcmQgdGl0bGU9IkxvY2sgU2NyZWVuIHYyIj4KICAgIDxpbWcgc3JjPSIvaW1hZ2VzL2IzLWlwaG9uZS13YWxscGFwZXItdjIucG5nIiBhbHQ9IkIzIGlQaG9uZSBXYWxscGFwZXIgdjIiIGNsYXNzTmFtZT0ncm91bmRlZC14bCBteS0zJy8+CiAgICAKICAgIFtEb3dubG9hZF0oaHR0cHM6Ly9jZG4uYjMuZnVuL2IzLWlwaG9uZS13YWxscGFwZXItdjIucG5nKQogIDwvQ2FyZD4KICAKICA8Q2FyZCB0aXRsZT0iTG9jayBTY3JlZW4gdjMiPgogICAgPGltZyBzcmM9Ii9pbWFnZXMvYjMtaXBob25lLXdhbGxwYXBlci1zaW1wbGUucG5nIiBhbHQ9IkIzIGlQaG9uZSBXYWxscGFwZXIgU2ltcGxlIiBjbGFzc05hbWU9J3JvdW5kZWQteGwgbXktMycvPgogICAgCiAgICBbRG93bmxvYWRdKGh0dHBzOi8vY2RuLmIzLmZ1bi9iMy1pcGhvbmUtd2FsbHBhcGVyLXNpbXBsZS5wbmcpCiAgPC9DYXJkPgo8L0NhcmRHcm91cD4KCgojIyBDb250cmlidXRlIHRvIEIzIGJyYW5kCgpMZXQncyBidWlsZCBCMyB0b2dldGhlciAtIHdlIHdlbGNvbWUgY3JlYXRvcnMsIGFydGlzdHMsIGRldmVsb3BlcnMsIGdhbWVycywgcGxheWVycyAmIGV2ZXJ5b25lIHRvIGNvbnRyaWJ1dGUgJiBiZSByZXdhcmRlZC4KClJlYWNoIG91dCBpZiB5b3UndmUgYnVpbHQgc29tZXRoaW5nIGNvb2wgZm9yIHRoZSBCMyBjb21tdW5pdHkuCg==",
    "lastUpdated": "2025-09-03T04:50:53.191Z"
  },
  {
    "sourceFile": "protocol/b3-token.mdx",
    "sourceHash": "CjxpZnJhbWUgY2xhc3NOYW1lPSJhc3BlY3QtdmlkZW8gcm91bmRlZC14bCIgc3JjPSJodHRwczovL2N1c3RvbWVyLWdnNnFzN25tNXVlOTR0NjQuY2xvdWRmbGFyZXN0cmVhbS5jb20vZjQ4ZTRhMDc5OGQ0YmQ5ZWM4MTE1MmJiMjFiY2EwOGIvaWZyYW1lP211dGVkPXRydWUmbG9vcD10cnVlJmF1dG9wbGF5PXRydWUmcG9zdGVyPWh0dHBzJTNBJTJGJTJGY3VzdG9tZXItZ2c2cXM3bm01dWU5NHQ2NC5jbG91ZGZsYXJlc3RyZWFtLmNvbSUyRmY0OGU0YTA3OThkNGJkOWVjODExNTJiYjIxYmNhMDhiJTJGdGh1bWJuYWlscyUyRnRodW1ibmFpbC5qcGclM0Z0aW1lJTNEJTI2aGVpZ2h0JTNENjAwIiB0aXRsZT0iJEIzIFRva2Vub21pY3MiIGZyYW1lQm9yZGVyPSIwIiBhbGxvdz0iYWNjZWxlcm9tZXRlcjsgYXV0b3BsYXk7IGNsaXBib2FyZC13cml0ZTsgZW5jcnlwdGVkLW1lZGlhOyBneXJvc2NvcGU7IHBpY3R1cmUtaW4tcGljdHVyZSIgYWxsb3dGdWxsU2NyZWVuIC8+Cgo8Q29kZUdyb3VwPgoKYGBgdGV4dCBDb250cmFjdCBBZGRyZXNzCjB4QjNCMzJGOWY4ODI3RDQ2MzRmRTdkOTczRmExMDM0RWM5ZmREQjNCMwpgYGAKCjwvQ29kZUdyb3VwPgoKQ29weSB0aGlzIGFkZHJlc3MgdG8gYWRkIFwkQjMgdG8geW91ciB3YWxsZXQgb3IgdHJhZGUgb24gREVYcy4KCltWaWV3IG9uIEIzIEV4cGxvcmVyXShodHRwczovL2V4cGxvcmVyLmIzLmZ1bi9iMy10b2tlbikKCgoKIyMgV2hhdCBpcyBcJEIzPwoKKipcJEIzKiogaXMgdGhlIHV0aWxpdHkgdG9rZW4gdGhhdCBwb3dlcnMgdGhlIGVudGlyZSBCMyBlY29zeXN0ZW0uIEFzIHRoZSBmb3VuZGF0aW9uYWwgdG9rZW4gZm9yIGEgaG9yaXpvbnRhbGx5IHNjYWxpbmcgbXVsdGljaGFpbiBuZXR3b3JrLCBCMyBlbmFibGVzIGdvdmVybmFuY2UsIHN0YWtpbmcsIGFuZCB2YWx1ZSBhY3Jvc3MgYXBwY2hhaW5zIGFuZCBhcHBsaWNhdGlvbnMgYnVpbHQgb24gQjMuCgo8aW1nCiAgc3JjPSIvaW1hZ2VzL29wZW4tYXBwLWxheWVyLnBuZyIKICBhbHQ9IkIzIFRva2VuIgogIGhlaWdodD0iNDAwIgogIGNsYXNzTmFtZT0icm91bmRlZC14bCIKICB0aXRsZT0iIgovPgoKIyMgQSBwb3J0Zm9saW8gb2YgZnVuCgpCMyBpcyBub3QganVzdCBibG9ja2NoYWluIGluZnJhc3RydWN0dXJlLiAgV2UgYXJlIGNvbnN0YW50bHkgYnVpbGRpbmcgZnVuLCBtYXNzLXNjYWxlIHBvdGVudGlhbCBvbmNoYWluIGNvbnN1bWVyIGV4cGVyaWVuY2VzIC0gYWxsIHdpdGggdGhlIGdvYWwgb2YgY3JlYXRpbmcgdmFsdWUgZm9yICoqXCRCMyBob2xkZXJzLioqCgo8aWZyYW1lIGNsYXNzTmFtZT0iYXNwZWN0LXZpZGVvIHJvdW5kZWQteGwgbWItNiIgc3JjPSJodHRwczovL2N1c3RvbWVyLWdnNnFzN25tNXVlOTR0NjQuY2xvdWRmbGFyZXN0cmVhbS5jb20vMjEwMmM4MWQ3ZDk2ZGE5MjdmNzFlMDIzMjYwMTc1YzkvaWZyYW1lP211dGVkPXRydWUmbG9vcD10cnVlJmF1dG9wbGF5PXRydWUmcG9zdGVyPWh0dHBzJTNBJTJGJTJGY3VzdG9tZXItZ2c2cXM3bm01dWU5NHQ2NC5jbG91ZGZsYXJlc3RyZWFtLmNvbSUyRjIxMDJjODFkN2Q5NmRhOTI3ZjcxZTAyMzI2MDE3NWM5JTJGdGh1bWJuYWlscyUyRnRodW1ibmFpbC5qcGclM0Z0aW1lJTNEJTI2aGVpZ2h0JTNENjAwIiB0aXRsZT0iJEIzIFBvcnRmb2xpbyIgZnJhbWVCb3JkZXI9IjAiIGFsbG93PSJhY2NlbGVyb21ldGVyOyBhdXRvcGxheTsgY2xpcGJvYXJkLXdyaXRlOyBlbmNyeXB0ZWQtbWVkaWE7IGd5cm9zY29wZTsgcGljdHVyZS1pbi1waWN0dXJlIiBhbGxvd0Z1bGxTY3JlZW4gLz4KCjxDYXJkR3JvdXAgY29scz17Mn0+CiAgPENhcmQgaHJlZj0iaHR0cHM6Ly9hbnlzcGVuZC5iMy5mdW4iPgogICAgPGltZwogICAgICBzcmM9Ii9pbWFnZXMvYW55c3BlbmQtbG9nby13aGl0ZS5zdmciCiAgICAgIGNsYXNzTmFtZT0idy1mdWxsIGJnLWJsYWNrIGFzcGVjdC12aWRlbyBvYmplY3QtY29udGFpbiByb3VuZGVkLTJ4bCBtYi00IgogICAgICBzdHlsZT17eyBwYWRkaW5nOiAnNjRweCcsIGFzcGVjdFJhdGlvOiAnMTYvOScgfX0KICAgIC8+CgogICAgQ3Jvc3MtY2hhaW4gcGF5bWVudHMgJiBvbnJhbXAuCiAgPC9DYXJkPgogIDxDYXJkIGhyZWY9Ii9wcm90b2NvbC9zdGFraW5nLWIzIj4KICAgIDxpbWcKICAgICAgc3JjPSIvaW1hZ2VzL2IzLWxvZ28tYmx1ZS1jb2luLmF2aWYiCiAgICAgIGNsYXNzTmFtZT0idy1mdWxsIGJnLWJsYWNrIGFzcGVjdC12aWRlbyBvYmplY3QtY29udGFpbiByb3VuZGVkLTJ4bCBtYi00IgogICAgICBzdHlsZT17eyBwYWRkaW5nOiAnMzJweCcsIGFzcGVjdFJhdGlvOiAnMTYvOScgfX0KICAgIC8+CgogICAgU3Rha2UgdG8gd2luLgogIDwvQ2FyZD4KICA8Q2FyZCBocmVmPSIvYmFzZW1lbnQvaW50cm9kdWN0aW9uIj4KICAgIDxpbWcKICAgICAgc3JjPSIvaW1hZ2VzL2Jhc2VtZW50LWxvZ28tcHVycGxlLnN2ZyIKICAgICAgY2xhc3NOYW1lPSJ3LWZ1bGwgYmctYmxhY2sgYXNwZWN0LXZpZGVvIG9iamVjdC1jb250YWluIHJvdW5kZWQtMnhsIG1iLTQiCiAgICAgIHN0eWxlPXt7IHBhZGRpbmc6ICc2MHB4JywgYXNwZWN0UmF0aW86ICcxNi85JyB9fQogICAgLz4KCiAgICBUaGUgaHlwZXItY2FzdWFsIG9uY2hhaW4gZ2FtaW5nIHBsYXRmb3JtLgogIDwvQ2FyZD4KICA8Q2FyZCBocmVmPSIvc2RrL2ludHJvZHVjdGlvbiI+CiAgICA8aW1nCiAgICAgIHNyYz0iL2ltYWdlcy9jdXJzb3IucG5nIgogICAgICBjbGFzc05hbWU9InctZnVsbCBiZy1ibGFjayBhc3BlY3QtdmlkZW8gb2JqZWN0LWNvbnRhaW4gcm91bmRlZC0yeGwgbWItNCIKICAgICAgc3R5bGU9e3sgcGFkZGluZzogJzQ4cHgnLCBhc3BlY3RSYXRpbzogJzE2LzknIH19CiAgICAvPgoKICAgIFNES3MgZm9yIGJvbmRpbmcgdG9rZW5zLCB3YWdlcmluZyAmIG1vcmUuCiAgPC9DYXJkPgo8L0NhcmRHcm91cD4KCiMjIyBXaGVyZSB0byBidXkgXCRCMyB0b2tlbnMKCjxDYXJkR3JvdXAgY29scz17M30+CiAgPENhcmQgdGl0bGU9IkNvaW5iYXNlIiBob3Jpem9udGFsIGhyZWY9Imh0dHBzOi8vd3d3LmNvaW5iYXNlLmNvbS9wcmljZS9iMy1iYXNlIj4KICAgIDxpbWcKICAgICAgc3JjPSIvaW1hZ2VzL2NvaW5iYXNlLWxvZ28uc3ZnIgogICAgICBjbGFzc05hbWU9InctZnVsbCBiZy1ibGFjayBhc3BlY3QtdmlkZW8gb2JqZWN0LWNvbnRhaW4gcm91bmRlZC1sZyBwLTIgbXktMyIKICAgIC8+CgogICAgQnV5IFwkQjMgb24gQ29pbmJhc2UKICA8L0NhcmQ+CiAgPENhcmQgdGl0bGU9IkJ5Yml0IiBob3Jpem9udGFsIGhyZWY9Imh0dHBzOi8vd3d3LmJ5Yml0LmNvbS9lbi90cmFkZS9zcG90L0IzL1VTRFQiPgogICAgPGltZwogICAgICBzcmM9Ii9pbWFnZXMvYnliaXQtbG9nby5zdmciCiAgICAgIGNsYXNzTmFtZT0idy1mdWxsIGJnLWJsYWNrIGFzcGVjdC12aWRlbyBvYmplY3QtY29udGFpbiByb3VuZGVkLWxnIHAtMiBteS0zIgogICAgLz4KCiAgICBUcmFkZSBcJEIzIG9uIEJ5Yml0CiAgPC9DYXJkPgogIDxDYXJkIHRpdGxlPSJHYXRlLmlvIiBob3Jpem9udGFsIGhyZWY9Imh0dHBzOi8vd3d3LmdhdGUuaW8vdHJhZGUvQjNfVVNEVCI+CiAgICA8aW1nCiAgICAgIHNyYz0iL2ltYWdlcy9nYXRlaW8tbG9nby5zdmciCiAgICAgIGNsYXNzTmFtZT0idy1mdWxsIGJnLWJsYWNrIGFzcGVjdC12aWRlbyBvYmplY3QtY29udGFpbiByb3VuZGVkLWxnIHAtMiBteS0zIgogICAgLz4KCiAgICBQdXJjaGFzZSBcJEIzIG9uIEdhdGUuaW8KICA8L0NhcmQ+CiAgPENhcmQgdGl0bGU9Ikt1Q29pbiIgaG9yaXpvbnRhbCBocmVmPSJodHRwczovL3RyYWRlLmt1Y29pbi5jb20vQjMtVVNEVD91dG1fc291cmNlPWNvbW11bml0eV9wYXJ0bmVyX2luZm8iPgogICAgPGltZwogICAgICBzcmM9Ii9pbWFnZXMva3Vjb2luLWxvZ28uYXZpZiIKICAgICAgY2xhc3NOYW1lPSJ3LWZ1bGwgYmctYmxhY2sgYXNwZWN0LXZpZGVvIG9iamVjdC1jb250YWluIHJvdW5kZWQtbGcgcC0yIG15LTMiCiAgICAvPgoKICAgIEdldCBcJEIzIG9uIEt1Q29pbgogIDwvQ2FyZD4KICA8Q2FyZCB0aXRsZT0iTUVYQyIgaG9yaXpvbnRhbCBocmVmPSJodHRwczovL3d3dy5tZXhjLmNvbS9leGNoYW5nZS9CM19VU0RUIj4KICAgIDxpbWcKICAgICAgc3JjPSIvaW1hZ2VzL21leGMtbG9nby5zdmciCiAgICAgIGNsYXNzTmFtZT0idy1mdWxsIGJnLWJsYWNrIGFzcGVjdC12aWRlbyBvYmplY3QtY29udGFpbiByb3VuZGVkLWxnIHAtMiBteS0zIgogICAgLz4KCiAgICBUcmFkZSBcJEIzIG9uIE1FWEMKICA8L0NhcmQ+CiAgPENhcmQgdGl0bGU9IkFlcm9kcm9tZSIgaG9yaXpvbnRhbCBocmVmPSJodHRwczovL2Flcm9kcm9tZS5maW5hbmNlL3N3YXA/ZnJvbT1ldGgmdG89MHhiM2IzMmY5Zjg4MjdkNDYzNGZlN2Q5NzNmYTEwMzRlYzlmZGRiM2IzJmNoYWluMD04NDUzJmNoYWluMT04NDUzIj4KICAgIDxpbWcKICAgICAgc3JjPSIvaW1hZ2VzL2Flcm9kcm9tZS1sb2dvLnN2ZyIKICAgICAgY2xhc3NOYW1lPSJ3LWZ1bGwgYmctYmxhY2sgYXNwZWN0LXZpZGVvIG9iamVjdC1jb250YWluIHJvdW5kZWQtbGcgcC0yIG15LTMiCiAgICAvPgoKICAgIFN3YXAgXCRCMyBvbiBBZXJvZHJvbWUKICA8L0NhcmQ+CiAgPENhcmQgdGl0bGU9IkFsaWVuQmFzZSIgaG9yaXpvbnRhbCBocmVmPSJodHRwczovL2FwcC5hbGllbmJhc2UueHl6Lz9vdXRwdXRDdXJyZW5jeT0weEIzQjMyRjlmODgyN0Q0NjM0ZkU3ZDk3M0ZhMTAzNEVjOWZkZGIzQjMmY2hhaW5JZD04NDUzIj4KICAgIDxpbWcKICAgICAgc3JjPSIvaW1hZ2VzL2FsaWVuYmFzZS1sb2dvLnN2ZyIKICAgICAgY2xhc3NOYW1lPSJ3LWZ1bGwgYmctYmxhY2sgYXNwZWN0LXZpZGVvIG9iamVjdC1jb250YWluIHJvdW5kZWQtbGcgcC0yIG15LTMiCiAgICAvPgoKICAgIFRyYWRlIFwkQjMgb24gQWxpZW5CYXNlCiAgPC9DYXJkPgo8L0NhcmRHcm91cD4K",
    "lastUpdated": "2025-10-31T02:18:45.997Z"
  },
  {
    "sourceFile": "ecosystem/wallets.mdx",
    "sourceHash": "CjxDYXJkR3JvdXAgY29scz17Mn0+CiAgPENhcmQgdGl0bGU9IlByaXZ5IiBocmVmPSJodHRwczovL3ByaXZ5LmlvIj4KICAgIDxpbWcgc3JjPSIvaW1hZ2VzL3ByaXZ5LWxvZ28uc3ZnIiBjbGFzc05hbWU9InAtNCB3LWZ1bGwgaC0yNCBvYmplY3QtY29udGFpbiBiZy1ibGFjayByb3VuZGVkLXhsIG10LTMiIC8+CiAgICBTcGluIHVwIGVtYmVkZGVkIHdhbGxldHMgYW5kIGJlYXV0aWZ1bCBhdXRoZW50aWNhdGlvbiBmbG93cyBmb3IgYWxsIHVzZXJzLgogICAgPGRpdiBzdHlsZT17eyBtYXJnaW5Ub3A6ICc4cHgnIH19PgogICAgICA8c3BhbiBzdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6ICcjNkI3MjgwJywgY29sb3I6ICd3aGl0ZScsIHBhZGRpbmc6ICcycHggOHB4JywgYm9yZGVyUmFkaXVzOiAnNHB4JywgZm9udFNpemU6ICcxMnB4JyB9fT5XYWxsZXQgU0RLczwvc3Bhbj4KICAgIDwvZGl2PgogIDwvQ2FyZD4KICAKICA8Q2FyZCB0aXRsZT0iT0tYIFdlYjMgV2FsbGV0IiBocmVmPSJodHRwczovL29reC5jb20vd2ViMyI+CiAgICA8aW1nIHNyYz0iL2ltYWdlcy9va3h3YWxsZXQtbG9nby5hdmlmIiBjbGFzc05hbWU9InAtNCB3LWZ1bGwgaC0yNCBvYmplY3QtY29udGFpbiBiZy1ibGFjayByb3VuZGVkLXhsIG10LTMiIC8+CiAgICBZb3VyIHBvcnRhbCB0byBXZWIzLiBBY2Nlc3MgMTAwKyBkZWNlbnRyYWxpemVkIG5ldHdvcmtzIHdpdGggbWFueSBtb3JlIG9uIHRoZSB3YXkKICAgIDxkaXYgc3R5bGU9e3sgbWFyZ2luVG9wOiAnOHB4JyB9fT4KICAgICAgPHNwYW4gc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAnIzZCNzI4MCcsIGNvbG9yOiAnd2hpdGUnLCBwYWRkaW5nOiAnMnB4IDhweCcsIGJvcmRlclJhZGl1czogJzRweCcsIGZvbnRTaXplOiAnMTJweCcgfX0+V2FsbGV0IFNES3M8L3NwYW4+CiAgICA8L2Rpdj4KICA8L0NhcmQ+CiAgCiAgPENhcmQgdGl0bGU9IlRoaXJkd2ViIiBocmVmPSJodHRwczovL3RoaXJkd2ViLmNvbSI+CiAgICA8aW1nIHNyYz0iL2ltYWdlcy90aGlyZHdlYi1sb2dvLmF2aWYiIGNsYXNzTmFtZT0icC00IHctZnVsbCBoLTI0IG9iamVjdC1jb3ZlciBiZy1ibGFjayByb3VuZGVkLXhsIG10LTMiIC8+ICAgIAogICAgRnJvbnRlbmQsIGJhY2tlbmQsIGFuZCBvbmNoYWluIHRvb2xzLiBVbml0eSwgVW5yZWFsIEVuZ2luZSwgYW5kIFJlYWN0IE5hdGl2ZSBTREtzLgogICAgPGRpdiBzdHlsZT17eyBtYXJnaW5Ub3A6ICc4cHgnIH19PgogICAgICA8c3BhbiBzdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6ICcjNkI3MjgwJywgY29sb3I6ICd3aGl0ZScsIHBhZGRpbmc6ICcycHggOHB4JywgYm9yZGVyUmFkaXVzOiAnNHB4JywgZm9udFNpemU6ICcxMnB4JyB9fT5XYWxsZXQgU0RLczwvc3Bhbj4KICAgIDwvZGl2PgogIDwvQ2FyZD4KICAKICA8Q2FyZCB0aXRsZT0iT3BlbmZvcnQiIGhyZWY9Imh0dHBzOi8vb3BlbmZvcnQueHl6Ij4KICAgIDxpbWcgc3JjPSIvaW1hZ2VzL29wZW5mb3J0LWxvZ28uYXZpZiIgY2xhc3NOYW1lPSJwLTQgdy1mdWxsIGgtMjQgb2JqZWN0LWNvbnRhaW4gYmctYmxhY2sgcm91bmRlZC14bCBtdC0zIiAvPgogICAgT3BlbmZvcnQgaXMgYSBibG9ja2NoYWluIGFkdmFuY2VkIHBsYXRmb3JtIHRoYXQgcHJvdmlkZXMgZGV2ZWxvcGVycyB3aXRoIGFkdmFuY2VkIHdhbGxldCBTREsgc29sdXRpb25zLCBmb2N1c2luZyBvbiBzaW1wbGlmeWluZyB3ZWIzIGdhbWUgZGV2ZWxvcG1lbnQgdGhyb3VnaCBhY2NvdW50IGFic3RyYWN0aW9uIHRlY2hub2xvZ2llcy4KICAgIDxkaXYgc3R5bGU9e3sgbWFyZ2luVG9wOiAnOHB4JyB9fT4KICAgICAgPHNwYW4gc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAnIzZCNzI4MCcsIGNvbG9yOiAnd2hpdGUnLCBwYWRkaW5nOiAnMnB4IDhweCcsIGJvcmRlclJhZGl1czogJzRweCcsIGZvbnRTaXplOiAnMTJweCcgfX0+V2FsbGV0IFNES3M8L3NwYW4+CiAgICA8L2Rpdj4KICA8L0NhcmQ+CjwvQ2FyZEdyb3VwPgo=",
    "lastUpdated": "2025-09-03T02:45:56.762Z"
  },
  {
    "sourceFile": "ecosystem/onchain-sdks.mdx",
    "sourceHash": "CjxDYXJkR3JvdXAgY29scz17Mn0+CiAgPENhcmQgdGl0bGU9IlRoaXJkd2ViIiBocmVmPSJodHRwczovL3RoaXJkd2ViLmNvbSI+CiAgICA8aW1nIHNyYz0iL2ltYWdlcy90aGlyZHdlYi1sb2dvLmF2aWYiIGNsYXNzTmFtZT0icC00IHctZnVsbCBoLTI0IG9iamVjdC1jb3ZlciBiZy1ibGFjayByb3VuZGVkLXhsIG10LTMiIC8+CiAgICBGcm9udGVuZCwgYmFja2VuZCwgYW5kIG9uY2hhaW4gdG9vbHMuIFVuaXR5LCBVbnJlYWwgRW5naW5lLCBhbmQgUmVhY3QgTmF0aXZlIFNES3MuCiAgICA8ZGl2IHN0eWxlPXt7IG1hcmdpblRvcDogJzhweCcgfX0+CiAgICAgIDxzcGFuIHN0eWxlPXt7IGJhY2tncm91bmRDb2xvcjogJyMwMDdBRkYnLCBjb2xvcjogJ3doaXRlJywgcGFkZGluZzogJzJweCA4cHgnLCBib3JkZXJSYWRpdXM6ICc0cHgnLCBmb250U2l6ZTogJzEycHgnLCBtYXJnaW5SaWdodDogJzhweCcgfX0+QjMgU3VwcG9ydDwvc3Bhbj4KICAgICAgPHNwYW4gc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAnIzZCNzI4MCcsIGNvbG9yOiAnd2hpdGUnLCBwYWRkaW5nOiAnMnB4IDhweCcsIGJvcmRlclJhZGl1czogJzRweCcsIGZvbnRTaXplOiAnMTJweCcgfX0+R2FtaW5nIFNES3M8L3NwYW4+CiAgICA8L2Rpdj4KICA8L0NhcmQ+CiAgCiAgPENhcmQgdGl0bGU9IkJsb2NrdXMiIGhyZWY9Imh0dHBzOi8vYmxvY2t1cy5nZyI+CiAgICA8aW1nIHNyYz0iL2ltYWdlcy9ibG9ja3VzLWxvZ28uc3ZnIiBjbGFzc05hbWU9InAtNCB3LWZ1bGwgaC0yNCBvYmplY3QtY29udGFpbiBiZy1ibGFjayByb3VuZGVkLXhsIG10LTMiIC8+CiAgICBEZXZlbG9wZXIgdG9vbHMgZm9yIHNlYW1sZXNzIGJsb2NrY2hhaW4gaW50ZWdyYXRpb246IFNES3MsIGRldGFpbGVkIGRvY3VtZW50YXRpb24sIGFuZCBkZWRpY2F0ZWQgc3VwcG9ydCBlbXBvd2VyIHlvdSB0byBmb2N1cyBvbiBjcmVhdGluZyBlbmdhZ2luZyBnYW1lcGxheS4KICAgIDxkaXYgc3R5bGU9e3sgbWFyZ2luVG9wOiAnOHB4JyB9fT4KICAgICAgPHNwYW4gc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAnIzAwN0FGRicsIGNvbG9yOiAnd2hpdGUnLCBwYWRkaW5nOiAnMnB4IDhweCcsIGJvcmRlclJhZGl1czogJzRweCcsIGZvbnRTaXplOiAnMTJweCcsIG1hcmdpblJpZ2h0OiAnOHB4JyB9fT5CMyBTdXBwb3J0PC9zcGFuPgogICAgICA8c3BhbiBzdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6ICcjNkI3MjgwJywgY29sb3I6ICd3aGl0ZScsIHBhZGRpbmc6ICcycHggOHB4JywgYm9yZGVyUmFkaXVzOiAnNHB4JywgZm9udFNpemU6ICcxMnB4JyB9fT5HYW1pbmcgU0RLczwvc3Bhbj4KICAgIDwvZGl2PgogIDwvQ2FyZD4KPC9DYXJkR3JvdXA+Cg==",
    "lastUpdated": "2025-09-03T02:46:15.188Z"
  },
  {
    "sourceFile": "ecosystem/node-providers.mdx",
    "sourceHash": "CjxDYXJkR3JvdXAgY29scz17Mn0+CiAgPENhcmQgdGl0bGU9IlF1aWNrbm9kZSIgaHJlZj0iaHR0cHM6Ly9xdWlja25vZGUuY29tIj4KICAgIDxpbWcgc3JjPSIvaW1hZ2VzL3F1aWNrbm9kZS1sb2dvLmF2aWYiIGNsYXNzTmFtZT0icC00IHctZnVsbCBoLTI0IG9iamVjdC1jb250YWluIGJnLWJsYWNrIHJvdW5kZWQteGwgbXQtMyIgLz4KICAgIFF1aWNrbm9kZSBpcyBhIGJsb2NrY2hhaW4gaW5mcmFzdHJ1Y3R1cmUgYW5kIHNlcnZpY2VzIHByb3ZpZGVyIHRoYXQgcHJvdmlkZXMgZWFzeS1hY2Nlc3MgdG8gQjMgbWFpbm5ldAogICAgPGRpdiBzdHlsZT17eyBtYXJnaW5Ub3A6ICc4cHgnIH19PgogICAgICA8c3BhbiBzdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6ICcjMDA3QUZGJywgY29sb3I6ICd3aGl0ZScsIHBhZGRpbmc6ICcycHggOHB4JywgYm9yZGVyUmFkaXVzOiAnNHB4JywgZm9udFNpemU6ICcxMnB4JyB9fT5CMyBTdXBwb3J0PC9zcGFuPgogICAgPC9kaXY+CiAgPC9DYXJkPgo8L0NhcmRHcm91cD4K",
    "lastUpdated": "2025-09-03T02:46:25.712Z"
  },
  {
    "sourceFile": "ecosystem/nft-infrastructure.mdx",
    "sourceHash": "CjxDYXJkR3JvdXAgY29scz17Mn0+CiAgPENhcmQgdGl0bGU9IlJlc2Vydm9pciIgaHJlZj0iaHR0cHM6Ly9yZXNlcnZvaXIudG9vbHMiPgogICAgPGltZyBzcmM9Ii9pbWFnZXMvcmVzZXJ2b2lyLWxvZ28uc3ZnIiBjbGFzc05hbWU9InAtNCB3LWZ1bGwgaC0yNCBvYmplY3QtY29udGFpbiBiZy1ibGFjayByb3VuZGVkLXhsIG10LTMiIC8+CiAgICBORlQgaW5mcmFzdHJ1Y3R1cmUgZW5hYmxpbmcgdGhlIG5leHQtZ2VuIG9mIE5GVCBwcm9kdWN0cy4KICAgIDxkaXYgc3R5bGU9e3sgbWFyZ2luVG9wOiAnOHB4JyB9fT4KICAgICAgPHNwYW4gc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAnIzAwN0FGRicsIGNvbG9yOiAnd2hpdGUnLCBwYWRkaW5nOiAnMnB4IDhweCcsIGJvcmRlclJhZGl1czogJzRweCcsIGZvbnRTaXplOiAnMTJweCcgfX0+QjMgU3VwcG9ydDwvc3Bhbj4KICAgIDwvZGl2PgogIDwvQ2FyZD4KICAKICA8Q2FyZCB0aXRsZT0iU2ltcGxlSGFzaCIgaHJlZj0iaHR0cHM6Ly9zaW1wbGVoYXNoLmNvbSI+CiAgICA8aW1nIHNyYz0iL2ltYWdlcy9zaW1wbGVoYXNoLWxvZ28uYXZpZiIgY2xhc3NOYW1lPSJwLTQgdy1mdWxsIGgtMjQgb2JqZWN0LWNvbnRhaW4gYmctYmxhY2sgcm91bmRlZC14bCBtdC0zIiAvPgogICAgQWNjZXNzIHRva2VuICYgTkZUIGRhdGEgd2l0aCBlYXNlIHRocm91Z2ggU2ltcGxlSGFzaC4KICAgIDxkaXYgc3R5bGU9e3sgbWFyZ2luVG9wOiAnOHB4JyB9fT4KICAgICAgPHNwYW4gc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAnIzAwN0FGRicsIGNvbG9yOiAnd2hpdGUnLCBwYWRkaW5nOiAnMnB4IDhweCcsIGJvcmRlclJhZGl1czogJzRweCcsIGZvbnRTaXplOiAnMTJweCcgfX0+QjMgU3VwcG9ydDwvc3Bhbj4KICAgIDwvZGl2PgogIDwvQ2FyZD4KICAKICA8Q2FyZCB0aXRsZT0iVGhpcmR3ZWIgSW5zaWdodHMiIGhyZWY9Imh0dHBzOi8vdGhpcmR3ZWIuY29tIj4KICAgIDxpbWcgc3JjPSIvaW1hZ2VzL3RoaXJkd2ViLWxvZ28uYXZpZiIgY2xhc3NOYW1lPSJwLTQgdy1mdWxsIGgtMjQgb2JqZWN0LWNvdmVyIGJnLWJsYWNrIHJvdW5kZWQteGwgbXQtMyIgLz4gICAgCiAgICBGcm9udGVuZCwgYmFja2VuZCwgYW5kIG9uY2hhaW4gdG9vbHMuIFVuaXR5LCBVbnJlYWwgRW5naW5lLCBhbmQgUmVhY3QgTmF0aXZlIFNES3MuCiAgICA8ZGl2IHN0eWxlPXt7IG1hcmdpblRvcDogJzhweCcgfX0+CiAgICAgIDxzcGFuIHN0eWxlPXt7IGJhY2tncm91bmRDb2xvcjogJyMwMDdBRkYnLCBjb2xvcjogJ3doaXRlJywgcGFkZGluZzogJzJweCA4cHgnLCBib3JkZXJSYWRpdXM6ICc0cHgnLCBmb250U2l6ZTogJzEycHgnLCBtYXJnaW5SaWdodDogJzhweCcgfX0+QjMgU3VwcG9ydDwvc3Bhbj4KICAgICAgPHNwYW4gc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAnIzZCNzI4MCcsIGNvbG9yOiAnd2hpdGUnLCBwYWRkaW5nOiAnMnB4IDhweCcsIGJvcmRlclJhZGl1czogJzRweCcsIGZvbnRTaXplOiAnMTJweCcgfX0+R2FtaW5nIFNES3M8L3NwYW4+CiAgICA8L2Rpdj4KICA8L0NhcmQ+CjwvQ2FyZEdyb3VwPgo=",
    "lastUpdated": "2025-09-03T02:46:42.555Z"
  },
  {
    "sourceFile": "ecosystem/introduction.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-10-31T02:26:48.877Z"
  },
  {
    "sourceFile": "ecosystem/infrastructure.mdx",
    "sourceHash": "CjxDYXJkR3JvdXAgY29scz17Mn0+CiAgPENhcmQgdGl0bGU9IlB5dGgiIGhyZWY9Imh0dHBzOi8vcHl0aC5uZXR3b3JrIj4KICAgIDxpbWcgc3JjPSIvaW1hZ2VzL3B5dGgtbG9nby5zdmciIGNsYXNzTmFtZT0icC00IHctZnVsbCBoLTI0IG9iamVjdC1jb250YWluIGJnLWJsYWNrIHJvdW5kZWQteGwgbXQtMyIgLz4KICAgIFNlY3VyZSB5b3VyIHNtYXJ0IGNvbnRyYWN0cyB3aXRoIHJlbGlhYmxlLCBsb3ctbGF0ZW5jeSBtYXJrZXQgZGF0YSBmcm9tIGluc3RpdHV0aW9uYWwgc291cmNlcy4KICAgIDxkaXYgc3R5bGU9e3sgbWFyZ2luVG9wOiAnOHB4JyB9fT4KICAgICAgPHNwYW4gc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAnIzZCNzI4MCcsIGNvbG9yOiAnd2hpdGUnLCBwYWRkaW5nOiAnMnB4IDhweCcsIGJvcmRlclJhZGl1czogJzRweCcsIGZvbnRTaXplOiAnMTJweCcgfX0+T3JhY2xlczwvc3Bhbj4KICAgIDwvZGl2PgogIDwvQ2FyZD4KICAKICA8Q2FyZCB0aXRsZT0iQ2FsZGVyYSIgaHJlZj0iaHR0cHM6Ly9jYWxkZXJhLnh5eiI+CiAgICA8aW1nIHNyYz0iL2ltYWdlcy9jYWxkZXJhLWxvZ28uYXZpZiIgY2xhc3NOYW1lPSJwLTQgdy1mdWxsIGgtMjQgb2JqZWN0LWNvbnRhaW4gYmctYmxhY2sgcm91bmRlZC14bCBtdC0zIiAvPgogICAgTGF1bmNoIE9QIFN0YWNrLCBBcmJpdHJ1bSBPcmJpdCwgWksgU3RhY2ssIGFuZCBQb2x5Z29uIENESyByb2xsdXBzIHdpdGggQ2FsZGVyYSwgeW91ciBwYXJ0bmVyIGZyb20gZGV2ZWxvcG1lbnQgdG8gbGF1bmNoLCBhbmQgYmV5b25kCiAgICA8ZGl2IHN0eWxlPXt7IG1hcmdpblRvcDogJzhweCcgfX0+CiAgICAgIDxzcGFuIHN0eWxlPXt7IGJhY2tncm91bmRDb2xvcjogJyM2QjcyODAnLCBjb2xvcjogJ3doaXRlJywgcGFkZGluZzogJzJweCA4cHgnLCBib3JkZXJSYWRpdXM6ICc0cHgnLCBmb250U2l6ZTogJzEycHgnIH19PlJvbGx1cC1hcy1hLVNlcnZpY2U8L3NwYW4+CiAgICA8L2Rpdj4KICA8L0NhcmQ+CiAgCiAgPENhcmQgdGl0bGU9IkRlbiIgaHJlZj0iaHR0cHM6Ly9vbmNoYWluZGVuLmNvbSI+CiAgICA8aW1nIHNyYz0iL2ltYWdlcy9kZW4tbG9nby5hdmlmIiBjbGFzc05hbWU9InAtNCB3LWZ1bGwgaC0yNCBvYmplY3QtY29udGFpbiBiZy1ibGFjayByb3VuZGVkLXhsIG10LTMiIC8+CiAgICBUaGUgZmFzdGVzdCBtdWx0aXNpZyBmb3Igb25jaGFpbiB0ZWFtcy4KICAgIDxkaXYgc3R5bGU9e3sgbWFyZ2luVG9wOiAnOHB4JyB9fT4KICAgICAgPHNwYW4gc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAnIzZCNzI4MCcsIGNvbG9yOiAnd2hpdGUnLCBwYWRkaW5nOiAnMnB4IDhweCcsIGJvcmRlclJhZGl1czogJzRweCcsIGZvbnRTaXplOiAnMTJweCcgfX0+TXVsdGlTaWc8L3NwYW4+CiAgICA8L2Rpdj4KICA8L0NhcmQ+CiAgCiAgPENhcmQgdGl0bGU9IlBpbWxpY28iIGhyZWY9Imh0dHBzOi8vcGltbGljby5pbyI+CiAgICA8aW1nIHNyYz0iL2ltYWdlcy9waW1saWNvLWxvZ28uc3ZnIiBjbGFzc05hbWU9InAtNCB3LWZ1bGwgaC0yNCBvYmplY3QtY29udGFpbiBiZy1ibGFjayByb3VuZGVkLXhsIG10LTMiIC8+CiAgICBQaW1saWNvIHByb3ZpZGVzIGEgc3VpdGUgb2YgdG9vbHMgYW5kIHNlcnZpY2VzIHRvIGhlbHAgeW91IGJ1aWxkLCBkZXBsb3ksIGFuZCBtYW5hZ2Ugc21hcnQgYWNjb3VudHMgb24gRXRoZXJldW0gYW5kIG90aGVyIEVWTS1jb21wYXRpYmxlIGNoYWlucy4KICAgIDxkaXYgc3R5bGU9e3sgbWFyZ2luVG9wOiAnOHB4JyB9fT4KICAgICAgPHNwYW4gc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAnIzZCNzI4MCcsIGNvbG9yOiAnd2hpdGUnLCBwYWRkaW5nOiAnMnB4IDhweCcsIGJvcmRlclJhZGl1czogJzRweCcsIGZvbnRTaXplOiAnMTJweCcgfX0+QWNjb3VudCBBYnN0cmFjdGlvbjwvc3Bhbj4KICAgIDwvZGl2PgogIDwvQ2FyZD4KICAKICA8Q2FyZCB0aXRsZT0iQmxvY2tzY291dCIgaHJlZj0iaHR0cHM6Ly9ibG9ja3Njb3V0LmIzLmZ1biI+CiAgICA8aW1nIHNyYz0iL2ltYWdlcy9ibG9ja3Njb3V0LWxvZ28uc3ZnIiBjbGFzc05hbWU9InAtNCB3LWZ1bGwgaC0yNCBvYmplY3QtY29udGFpbiBiZy1ibGFjayByb3VuZGVkLXhsIG10LTMiIC8+CiAgICBPcGVuLXNvdXJjZSwgdW5pdmVyc2FsbHkgYWNjZXNzaWJsZSwgYmxvY2sgZXhwbG9yZXIuCiAgICA8ZGl2IHN0eWxlPXt7IG1hcmdpblRvcDogJzhweCcgfX0+CiAgICAgIDxzcGFuIHN0eWxlPXt7IGJhY2tncm91bmRDb2xvcjogJyMwMDdBRkYnLCBjb2xvcjogJ3doaXRlJywgcGFkZGluZzogJzJweCA4cHgnLCBib3JkZXJSYWRpdXM6ICc0cHgnLCBmb250U2l6ZTogJzEycHgnIH19PkIzIE1haW5uZXQgRXhwbG9yZXI8L3NwYW4+CiAgICA8L2Rpdj4KICA8L0NhcmQ+CjwvQ2FyZEdyb3VwPgo=",
    "lastUpdated": "2025-09-03T02:47:54.359Z"
  },
  {
    "sourceFile": "ecosystem/governance.mdx",
    "sourceHash": "CjxDYXJkR3JvdXAgY29scz17Mn0+CiAgPENhcmQgdGl0bGU9IkFnb3JhIiBocmVmPSJodHRwczovL2Fnb3JhLnZvdGUiPgogICAgPGltZyBzcmM9Ii9pbWFnZXMvYWdvcmEtbG9nby5hdmlmIiBjbGFzc05hbWU9InAtNCB3LWZ1bGwgaC0yNCBvYmplY3QtY29udGFpbiBiZy1ibGFjayByb3VuZGVkLXhsIG10LTMiIC8+CiAgICBBZ29yYSBpcyB0aGUgaG9tZSBvZiBvbmNoYWluIGdvdmVybmFuY2UuCiAgICA8ZGl2IHN0eWxlPXt7IG1hcmdpblRvcDogJzhweCcgfX0+CiAgICAgIDxzcGFuIHN0eWxlPXt7IGJhY2tncm91bmRDb2xvcjogJyM2QjcyODAnLCBjb2xvcjogJ3doaXRlJywgcGFkZGluZzogJzJweCA4cHgnLCBib3JkZXJSYWRpdXM6ICc0cHgnLCBmb250U2l6ZTogJzEycHgnIH19PkdvdmVybmFuY2UgUGxhdGZvcm1zPC9zcGFuPgogICAgPC9kaXY+CiAgPC9DYXJkPgo8L0NhcmRHcm91cD4K",
    "lastUpdated": "2025-09-03T02:48:02.001Z"
  },
  {
    "sourceFile": "ecosystem/data-analytics.mdx",
    "sourceHash": "CjxDYXJkR3JvdXAgY29scz17Mn0+CiAgPENhcmQgdGl0bGU9IlN1YnNxdWlkIiBocmVmPSJodHRwczovL3N1YnNxdWlkLmlvIj4KICAgIDxpbWcgc3JjPSIvaW1hZ2VzL3N1YnNxdWlkLWxvZ28uYXZpZiIgY2xhc3NOYW1lPSJwLTQgdy1mdWxsIGgtMjQgb2JqZWN0LWNvbnRhaW4gYmctYmxhY2sgcm91bmRlZC14bCBtdC0zIiAvPgogICAgQSBwZWVyLXRvLXBlZXIgbmV0d29yayB0byBiYXRjaCBxdWVyeSBhbmQgYWdncmVnYXRlIHRlcmFieXRlcyBvZiBvbi1jaGFpbiBhbmQgb2ZmLWNoYWluIGRhdGEKICAgIDxkaXYgc3R5bGU9e3sgbWFyZ2luVG9wOiAnOHB4JyB9fT4KICAgICAgPHNwYW4gc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAnIzZCNzI4MCcsIGNvbG9yOiAnd2hpdGUnLCBwYWRkaW5nOiAnMnB4IDhweCcsIGJvcmRlclJhZGl1czogJzRweCcsIGZvbnRTaXplOiAnMTJweCcgfX0+RGF0YSBJbmRleGVyczwvc3Bhbj4KICAgIDwvZGl2PgogIDwvQ2FyZD4KCiAgPENhcmQgdGl0bGU9IkR1bmUiIGhyZWY9Imh0dHBzOi8vZHVuZS5jb20vYjMvYjMtb3ZlcnZpZXctcHVibGljIj4KICAgIDxpbWcgc3JjPSJodHRwczovL2R1bmUuY29tL2Fzc2V0cy9EdW5lTG9nb0NpcmNsZS5zdmciIGNsYXNzTmFtZT0icC00IHctZnVsbCBoLTI0IG9iamVjdC1jb250YWluIGJnLWJsYWNrIHJvdW5kZWQteGwgbXQtMyIgLz4KICAgIER1bmUgaXMgYSBwbGF0Zm9ybSBmb3IgYnVpbGRpbmcgYW5kIHNoYXJpbmcgZGF0YSB2aXN1YWxpemF0aW9ucy4KICAgIDxkaXYgc3R5bGU9e3sgbWFyZ2luVG9wOiAnOHB4JyB9fT4KICAgICAgPHNwYW4gc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAnIzZCNzI4MCcsIGNvbG9yOiAnd2hpdGUnLCBwYWRkaW5nOiAnMnB4IDhweCcsIGJvcmRlclJhZGl1czogJzRweCcsIGZvbnRTaXplOiAnMTJweCcgfX0+RGF0YSBBbmFseXRpY3M8L3NwYW4+CiAgICA8L2Rpdj4KICA8L0NhcmQ+CiAgCiAgPENhcmQgdGl0bGU9IkhlbGlrYSIgaHJlZj0iaHR0cHM6Ly9oZWxpa2EuaW8iPgogICAgPGltZyBzcmM9Ii9pbWFnZXMvaGVsaWthLWxvZ28td2hpdGUuc3ZnIiBjbGFzc05hbWU9InAtNCB3LWZ1bGwgaC0yNCBvYmplY3QtY29udGFpbiBiZy1ibGFjayByb3VuZGVkLXhsIG10LTMiIC8+CiAgICBIZWxpa2EgcHJvdmlkZXMgY3VzdG9tIGdhbWUgb3B0aW1pemF0aW9uIHRocm91Z2ggcGVyc29uYWxpemVkIGluc2lnaHRzIGZyb20gZXhwZXJpZW5jZWQgYW5hbHlzdHMsIHVuaWZ5aW5nIG9uLWNoYWluLCBpbi1nYW1lLCBhbmQgY29tbXVuaXR5IGRhdGEgdG8gZHJpdmUgZ3Jvd3RoLgogICAgPGRpdiBzdHlsZT17eyBtYXJnaW5Ub3A6ICc4cHgnIH19PgogICAgICA8c3BhbiBzdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6ICcjNkI3MjgwJywgY29sb3I6ICd3aGl0ZScsIHBhZGRpbmc6ICcycHggOHB4JywgYm9yZGVyUmFkaXVzOiAnNHB4JywgZm9udFNpemU6ICcxMnB4JyB9fT5Vc2VyIEFjcXVpc2l0aW9uPC9zcGFuPgogICAgPC9kaXY+CiAgPC9DYXJkPgo8L0NhcmRHcm91cD4K",
    "lastUpdated": "2025-09-03T02:48:17.056Z"
  },
  {
    "sourceFile": "ecosystem/bridges.mdx",
    "sourceHash": "CjxDYXJkR3JvdXAgY29scz17Mn0+CiAgPENhcmQgdGl0bGU9IkJhc2VtZW50LmZ1biIgaHJlZj0iaHR0cHM6Ly9iYXNlbWVudC5mdW4iPgogICAgPGltZyBzcmM9Ii9pbWFnZXMvYmFzZW1lbnQtbG9nby1wdXJwbGUuc3ZnIiBjbGFzc05hbWU9InAtNCB3LWZ1bGwgaC0yNCBvYmplY3QtY29udGFpbiBiZy1ibGFjayByb3VuZGVkLXhsIG10LTMiIC8+CiAgICBJbnN0YW50LCBzZWFtbGVzcyBicmlkZ2luZyB0byBCMyB1c2luZyBmdW5kcyBvbiBvdGhlciBwb3B1bGFyIG5ldHdvcmtzLgogICAgPGRpdiBzdHlsZT17eyBtYXJnaW5Ub3A6ICc4cHgnIH19PgogICAgICA8c3BhbiBzdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6ICcjMDA3QUZGJywgY29sb3I6ICd3aGl0ZScsIHBhZGRpbmc6ICcycHggOHB4JywgYm9yZGVyUmFkaXVzOiAnNHB4JywgZm9udFNpemU6ICcxMnB4JyB9fT5CcmlkZ2UgTm93PC9zcGFuPgogICAgPC9kaXY+CiAgPC9DYXJkPgogIAogIDxDYXJkIHRpdGxlPSJSZWxheSIgaHJlZj0iaHR0cHM6Ly9yZWxheS5saW5rIj4KICAgIDxpbWcgc3JjPSIvaW1hZ2VzL3JlbGF5LWxvZ28uYXZpZiIgY2xhc3NOYW1lPSJwLTQgdy1mdWxsIGgtMjQgb2JqZWN0LWNvbnRhaW4gYmctYmxhY2sgcm91bmRlZC14bCBtdC0zIiAvPgogICAgSW5zdGFudCwgbG93LWNvc3QgYnJpZGdpbmcgYW5kIHN3YXBwaW5nLiBQb3dlcmVkIGJ5IFJlc2Vydm9pcgogICAgPGRpdiBzdHlsZT17eyBtYXJnaW5Ub3A6ICc4cHgnIH19PgogICAgICA8c3BhbiBzdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6ICcjMDA3QUZGJywgY29sb3I6ICd3aGl0ZScsIHBhZGRpbmc6ICcycHggOHB4JywgYm9yZGVyUmFkaXVzOiAnNHB4JywgZm9udFNpemU6ICcxMnB4JyB9fT5CcmlkZ2U8L3NwYW4+CiAgICA8L2Rpdj4KICA8L0NhcmQ+CiAgCiAgPENhcmQgdGl0bGU9Ik9wdGltaXNtIENhbm9uaWNhbCBCcmlkZ2UiIGhyZWY9Imh0dHBzOi8vYnJpZGdlLmIzLmZ1biI+CiAgICA8aW1nIHNyYz0iL2ltYWdlcy9iMy1sb2dvLWJsdWUuc3ZnIiBjbGFzc05hbWU9InAtNCB3LWZ1bGwgaC0yNCBvYmplY3QtY29udGFpbiBiZy1ibGFjayByb3VuZGVkLXhsIG10LTMiIC8+CiAgICBCYXR0bGUgdGVzdGVkIE9QIHN0YWNrIGNhbm9uaWNhbCBicmlkZ2UuIEhhcyBhIDctZGF5IGNoYWxsZW5nZSBwZXJpb2Qgb24gd2l0aGRyYXdhbHMgb25seS4KICAgIDxkaXYgc3R5bGU9e3sgbWFyZ2luVG9wOiAnOHB4JyB9fT4KICAgICAgPHNwYW4gc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAnIzAwN0FGRicsIGNvbG9yOiAnd2hpdGUnLCBwYWRkaW5nOiAnMnB4IDhweCcsIGJvcmRlclJhZGl1czogJzRweCcsIGZvbnRTaXplOiAnMTJweCcgfX0+QnJpZGdlPC9zcGFuPgogICAgPC9kaXY+CiAgPC9DYXJkPgo8L0NhcmRHcm91cD4K",
    "lastUpdated": "2025-09-03T02:48:35.473Z"
  },
  {
    "sourceFile": "hypeduel/tokens-overview.mdx",
    "sourceHash": "CjxpbWcgc3JjPSIvaW1hZ2VzL2h5cGVkdWVsLWhvdy1oeXBlcy13b3JrLnBuZyIgY2xhc3NOYW1lPSJ3LWZ1bGwgcm91bmRlZC14bCBtYi02IiAvPgoKIyMjIFRva2VuIEhpZXJhcmNoeQoKPFRhYnM+CiAgPFRhYiB0aXRsZT0iJEIzIFRva2VuIiBpY29uPSJjb2lucyI+CiAgICAqKkZvdW5kYXRpb24gQ3VycmVuY3kqKiAtIEJhc2UgZWNvc3lzdGVtIHRva2VuIC0gUHJpbWFyeSBzdG9yZSBvZiB2YWx1ZSAtIENyb3NzLXBsYXRmb3JtIHV0aWxpdHkgLSBUcmVhc3VyeSByZXNlcnZlcwogICAgLSBBcmVuYUNvaW5zIGJvbmRpbmcKICA8L1RhYj4KCjxUYWIgdGl0bGU9IkhZUEVTIENyZWRpdHMiIGljb249ImJvbHQiPgogICoqR2FtaW5nIEN1cnJlbmN5KiogLSAxOjEgcGVnIHdpdGggJEIzIC0gSW5zdGFudCBiZXQgcGxhY2VtZW50IC0gWmVybyBnYXMgZmVlcyAtIFNlYW1sZXNzIHdpdGhkcmF3YWxzIC0gQm9vc3QKICBwdXJjaGFzZXMKPC9UYWI+CgogIDxUYWIgdGl0bGU9IkFyZW5hQ29pbnMiIGljb249ImNoYXJ0LWxpbmUiPgogICAgKipBcmVuYSBPd25lcnNoaXAqKiAtIFVuaXF1ZSBwZXIgYXJlbmEgLSBCb25kaW5nIGN1cnZlIHByaWNpbmcgLSBGZWUgc2hhcmluZyByaWdodHMgLSBUcmFkaW5nIG9wcG9ydHVuaXRpZXMgLQogICAgQ29tbXVuaXR5IGdvdmVybmFuY2UKICA8L1RhYj4KPC9UYWJzPgoKIyMgVG9rZW4gRmxvdyBEaWFncmFtCgpgYGBtZXJtYWlkCmdyYXBoIFRCCiAgICBBW1BsYXllcnNdIC0tPiBCW0RlcG9zaXQgJEIzXQogICAgQiAtLT4gQ1tSZWNlaXZlIEhZUEVTIDE6MV0KICAgIEMgLS0+IERbUGxhY2UgQmV0cyAmIEJ1eSBCb29zdHNdCiAgICBEIC0tPiBFW0dlbmVyYXRlIEFyZW5hIFJldmVudWVdCiAgICBFIC0tPiBGW0FyZW5hIFRyZWFzdXJ5XQogICAgRiAtLT4gR1tCdXkgJEIzXQogICAgRiAtLT4gSFtCdXkgQXJlbmFDb2luc10KICAgIEcgLS0+IElbJEIzIFByaWNlIFN1cHBvcnRdCiAgICBIIC0tPiBKW0FyZW5hQ29pbiBWYWx1ZSBJbmNyZWFzZV0KICAgIEogLS0+IEtbQXR0cmFjdCBBcmVuYSBJbnZlc3RvcnNdCiAgICBJIC0tPiBMW0F0dHJhY3QgTW9yZSBQbGF5ZXJzXQogICAgSyAtLT4gQQogICAgTCAtLT4gQQoKICAgIE1bQXJlbmEgQ3JlYXRvcnNdIC0tPiBOW0xhdW5jaCBBcmVuYV0KICAgIE4gLS0+IE9bUGxheWVycyBCb25kICRCM10KICAgIE8gLS0+IFBbUmVjZWl2ZSBBcmVuYUNvaW5zXQogICAgUCAtLT4gUVtBcmVuYUNvaW5zIEFwcHJlY2lhdGVdCiAgICBRIC0tPiBNCmBgYAoKIyMgV2h5IFRocmVlIFRva2Vucz8KCiMjIyBVc2VyIEV4cGVyaWVuY2UgT3B0aW1pemF0aW9uCgpUaGUgdGhyZWUtdG9rZW4gc3lzdGVtIHNvbHZlcyBjcml0aWNhbCBVWCBwcm9ibGVtczoKCjxBY2NvcmRpb25Hcm91cD4KICA8QWNjb3JkaW9uIHRpdGxlPSJJbnN0YW50IFRyYW5zYWN0aW9ucyI+CiAgICAqKlByb2JsZW0qKjogQmxvY2tjaGFpbiB0cmFuc2FjdGlvbnMgaGF2ZSBkZWxheXMgYW5kIGdhcyBjb3N0cyB0aGF0IGludGVycnVwdCBnYW1pbmcgZmxvdy4gKipTb2x1dGlvbioqOiBIWVBFUwogICAgZW5hYmxlIGluc3RhbnQgYmV0dGluZyBhbmQgYm9vc3RzIHdpdGhvdXQgYmxvY2tjaGFpbiBmcmljdGlvbiB3aGlsZSBtYWludGFpbmluZyBmdWxsICRCMyBiYWNraW5nLgogIDwvQWNjb3JkaW9uPgoKPEFjY29yZGlvbiB0aXRsZT0iQXJlbmEgSW52ZXN0bWVudCI+CiAgKipQcm9ibGVtKio6IE5vIHdheSBmb3IgdXNlcnMgdG8gaW52ZXN0IGluIG9yIGJlbmVmaXQgZnJvbSBzdWNjZXNzZnVsIGFyZW5hIGdyb3d0aC4gKipTb2x1dGlvbioqOiBBcmVuYUNvaW5zIGxldAogIHBsYXllcnMgb3duIGEgcGllY2Ugb2YgYXJlbmEgZWNvbm9taWVzIGFuZCBlYXJuIGZyb20gdGhlaXIgc3VjY2Vzcy4KPC9BY2NvcmRpb24+Cgo8QWNjb3JkaW9uIHRpdGxlPSJWYWx1ZSBDYXB0dXJlIj4KICAqKlByb2JsZW0qKjogUGxhdGZvcm0gcmV2ZW51ZSB0eXBpY2FsbHkgYmVuZWZpdHMgb25seSB0aGUgcGxhdGZvcm0gb3duZXIuICoqU29sdXRpb24qKjogVHJlYXN1cnkgYnV5YmFja3Mgb2YgYm90aCAkQjMKICBhbmQgQXJlbmFDb2lucyBkaXN0cmlidXRlIHZhbHVlIHRvIGFsbCBzdGFrZWhvbGRlcnMuCjwvQWNjb3JkaW9uPgoKICA8QWNjb3JkaW9uIHRpdGxlPSJDcmVhdG9yIEluY2VudGl2ZXMiPgogICAgKipQcm9ibGVtKio6IERpZmZpY3VsdCB0byBmYWlybHkgY29tcGVuc2F0ZSBhcmVuYSBhbmQgQUkgbW9kZWwgY3JlYXRvcnMuICoqU29sdXRpb24qKjogQXJlbmFDb2lucyBwcm92aWRlIGRpcmVjdAogICAgcmV2ZW51ZSBzaGFyaW5nIGFuZCBhcHByZWNpYXRpb24gcG90ZW50aWFsIGZvciBjcmVhdG9ycy4KICA8L0FjY29yZGlvbj4KPC9BY2NvcmRpb25Hcm91cD4KCiMjIyBFY29ub21pYyBTdXN0YWluYWJpbGl0eQoKRWFjaCB0b2tlbiBjcmVhdGVzIHZhbHVlIGluIGRpZmZlcmVudCB3YXlzOgoKPENhcmQgdGl0bGU9IiRCMyBWYWx1ZSBEcml2ZXJzIiBpY29uPSJhcnJvdy1yaWdodCI+CiAgLSBCYXNlIGVjb3N5c3RlbSBncm93dGggCiAgLSBUcmVhc3VyeSBidXliYWNrIHByZXNzdXJlIAogIC0gQ3Jvc3MtcGxhdGZvcm0gdXRpbGl0eSAKICAtIFN0YWtpbmcgYW5kIERlRmkgaW50ZWdyYXRpb24KPC9DYXJkPgoKPENhcmQgdGl0bGU9IkhZUEVTIFN0YWJpbGl0eSIgaWNvbj0ic2hpZWxkIj4KICAtIDE6MSAkQjMgYmFja2luZyBndWFyYW50ZWUKICAtIEluc3RhbnQgY29udmVyc2lvbiBhYmlsaXR5IAogIC0gR2FtaW5nIHV0aWxpdHkgcHJlbWl1bSAKICAtIFBsYXRmb3JtIGNvbnZlbmllbmNlIHZhbHVlCjwvQ2FyZD4KCjxDYXJkIHRpdGxlPSJBcmVuYUNvaW4gQXBwcmVjaWF0aW9uIiBpY29uPSJyb2NrZXQiPgogIC0gQXJlbmEgcG9wdWxhcml0eSBncm93dGggCiAgLSBGZWUgZ2VuZXJhdGlvbiBpbmNyZWFzZSAKICAtIENvbW11bml0eSBkZXZlbG9wbWVudCAKICAtIFRyYWRpbmcgdm9sdW1lIGV4cGFuc2lvbgo8L0NhcmQ+CgojIyBUb2tlbiBVdGlsaXR5IE1hdHJpeAoKfCBGZWF0dXJlICAgICAgICAgICAgfCAkQjMgfCBIWVBFUyB8IEFyZW5hQ29pbnMgfAp8IC0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLSB8IC0tLS0tIHwgLS0tLS0tLS0tLSB8CnwgKipCZXR0aW5nKiogICAgICAgIHwg4p2MICB8IOKchSAgICB8IOKdjCAgICAgICAgIHwKfCAqKkJvb3N0cyoqICAgICAgICAgfCDinYwgIHwg4pyFICAgIHwg4p2MICAgICAgICAgfAp8ICoqQXJlbmEgQm9uZGluZyoqICB8IOKchSAgfCDinYwgICAgfCDinYwgICAgICAgICB8CnwgKipGZWUgRWFybmluZyoqICAgIHwg4pyFICB8IOKdjCAgICB8IOKchSAgICAgICAgIHwKfCAqKlRyYWRpbmcqKiAgICAgICAgfCDinIUgIHwg4p2MICAgIHwg4pyFICAgICAgICAgfAp8ICoqR292ZXJuYW5jZSoqICAgICB8IOKchSAgfCDinYwgICAgfCDinIUgICAgICAgICB8CnwgKipDcm9zcy1QbGF0Zm9ybSoqIHwg4pyFICB8IOKdjCAgICB8IOKdjCAgICAgICAgIHwKCiMjIyBUcmVhc3VyeSBNZWNoYW5pY3MKCkFyZW5hIHRyZWFzdXJpZXMgY3JlYXRlIHN1c3RhaW5lZCBidXlpbmcgcHJlc3N1cmU6CgoxLiAqKlJldmVudWUgQ29sbGVjdGlvbioqOiBGZWVzIGFjY3VtdWxhdGUgaW4gYXJlbmEgdHJlYXN1cmllcwoyLiAqKkFzc2V0IEFsbG9jYXRpb24qKjogNTAlIGZvciAkQjMgYnV5YmFja3MsIDUwJSBmb3IgQXJlbmFDb2luIGJ1eWJhY2tzCjMuICoqTWFya2V0IFB1cmNoYXNpbmcqKjogQXV0b21hdGVkIG1hcmtldCBidXlzIGNyZWF0ZSBwcmljZSBzdXBwb3J0CjQuICoqVmFsdWUgRGlzdHJpYnV0aW9uKio6IEJlbmVmaXRzIGZsb3cgdG8gYWxsIHRva2VuIGhvbGRlcnMK",
    "lastUpdated": "2025-10-31T02:19:25.396Z"
  },
  {
    "sourceFile": "hypeduel/quick-start.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-10-31T02:20:14.496Z"
  },
  {
    "sourceFile": "hypeduel/platform-overview.mdx",
    "sourceHash": "CiMjIENvcmUgQ29tcG9uZW50cwoKIyMjIDEuIEJhdHRsZSBBcmVuYXMKCioqSW5kaXZpZHVhbCBBSSBDb21wZXRpdGlvbiBFbnZpcm9ubWVudHMqKgoKRWFjaCBhcmVuYSByZXByZXNlbnRzIGEgdW5pcXVlIGJhdHRsZWZpZWxkIHdoZXJlIEFJIG1vZGVscyBjb21wZXRlIGluIHNwZWNpYWxpemVkIHNjZW5hcmlvczoKCi0gKipDb21iYXQgU2ltdWxhdGlvbnMqKjogTWlsaXRhcnkgc3RyYXRlZ3kgYW5kIHRhY3RpY2FsIGRlY2lzaW9uLW1ha2luZwotICoqUmFjaW5nIENpcmN1aXRzKio6IEhpZ2gtc3BlZWQgbmF2aWdhdGlvbiBhbmQgb3B0aW1pemF0aW9uCi0gKipUcmFkaW5nIEZsb29ycyoqOiBGaW5hbmNpYWwgbWFya2V0IHByZWRpY3Rpb24gYW5kIHBvcnRmb2xpbyBtYW5hZ2VtZW50Ci0gKipQdXp6bGUgQ2hhbGxlbmdlcyoqOiBMb2dpYywgcGF0dGVybiByZWNvZ25pdGlvbiwgYW5kIHByb2JsZW0tc29sdmluZwotICoqQ3JlYXRpdmUgQ29udGVzdHMqKjogQXJ0IGdlbmVyYXRpb24sIG11c2ljIGNvbXBvc2l0aW9uLCBhbmQgc3Rvcnl0ZWxsaW5nCgoqKkFyZW5hIExpZmVjeWNsZSoqOgoKYGBgCkNyZWF0aW9uIOKGkiBCb25kaW5nIFBoYXNlIOKGkiBBY3RpdmUgVHJhZGluZyDihpIgTGl2ZSBCYXR0bGVzIOKGkiBGZWUgR2VuZXJhdGlvbgpgYGAKCiMjIyAyLiBBSSBNb2RlbCBJbnRlZ3JhdGlvbgoKKipDb21wZXRpdGl2ZSBBSSBGcmFtZXdvcmsqKgoKLSAqKk1vZGVsIE9uYm9hcmRpbmcqKjogRGV2ZWxvcGVycyBzdWJtaXQgQUkgbW9kZWxzIGZvciBhcmVuYSBwYXJ0aWNpcGF0aW9uCi0gKipQZXJmb3JtYW5jZSBUcmFja2luZyoqOiBDb21wcmVoZW5zaXZlIHN0YXRpc3RpY3MgYW5kIGJhdHRsZSBoaXN0b3J5Ci0gKipEeW5hbWljIEJhbGFuY2luZyoqOiBBdXRvbWF0aWMgYWRqdXN0bWVudHMgdG8gbWFpbnRhaW4gY29tcGV0aXRpdmUgZmFpcm5lc3MKLSAqKlZlcnNpb24gTWFuYWdlbWVudCoqOiBTdXBwb3J0IGZvciBtb2RlbCB1cGRhdGVzIGFuZCBpbXByb3ZlbWVudHMKCiMjIyAzLiBHbG9iYWwgQWNjb3VudCBTeXN0ZW0KCioqVW5pZmllZCBQbGF5ZXIgRXhwZXJpZW5jZSoqCgpZb3VyIGdsb2JhbCBhY2NvdW50IHByb3ZpZGVzIHNlYW1sZXNzIGFjY2VzcyBhY3Jvc3MgYWxsIGFyZW5hczoKCi0gKipDcm9zcy1BcmVuYSBCYWxhbmNlKio6IFNpbmdsZSBIWVBFUyB3YWxsZXQgZm9yIGFsbCBiZXR0aW5nIGFjdGl2aXRpZXMKLSAqKlVuaXZlcnNhbCBQcm9maWxlKio6IFN0YXRpc3RpY3MgYW5kIGFjaGlldmVtZW50cyBhY3Jvc3MgYWxsIGJhdHRsZSB0eXBlcwotICoqSW5zdGFudCBUcmFuc2FjdGlvbnMqKjogTm8gYmxvY2tjaGFpbiBkZWxheXMgZm9yIGJldHRpbmcgYW5kIHdpdGhkcmF3YWxzCi0gKipQb3J0Zm9saW8gTWFuYWdlbWVudCoqOiBUcmFjayBBcmVuYUNvaW5zIGFuZCBiZXR0aW5nIHBlcmZvcm1hbmNlCgojIyBFY29ub21pYyBFbmdpbmUKCiMjIyBUaHJlZS1Ub2tlbiBTeXN0ZW0KCjxUYWJzPgogIDxUYWIgdGl0bGU9IiRCMyBUb2tlbiI+CiAgICAqKkZvdW5kYXRpb24gQ3VycmVuY3kqKiAtIEJhc2UgZWNvc3lzdGVtIHRva2VuIC0gVXNlZCBmb3IgQXJlbmFDb2lucyBib25kaW5nIC0gVHJlYXN1cnkgcmVzZXJ2ZXMgYW5kIGJ1eWJhY2tzIC0KICAgIENyb3NzLXBsYXRmb3JtIHZhbHVlIHRyYW5zZmVyCiAgPC9UYWI+Cgo8VGFiIHRpdGxlPSJIWVBFUyBDcmVkaXRzIj4KICAqKkJldHRpbmcgQ3VycmVuY3kqKiAtIDE6MSBwZWcgd2l0aCAkQjMgLSBJbnN0YW50IGJldCBwbGFjZW1lbnQgLSBObyB0cmFuc2FjdGlvbiBmZWVzIGZvciBnYW1lcGxheSAtIFdpdGhkcmF3IHRvICRCMwogIGFueXRpbWUKPC9UYWI+CgogIDxUYWIgdGl0bGU9IkFyZW5hQ29pbnMiPgogICAgKipBcmVuYSBPd25lcnNoaXAqKiAtIFVuaXF1ZSB0b2tlbiBwZXIgYXJlbmEgLSBCb25kaW5nIGN1cnZlIHByaWNpbmcgLSBGZWUgc2hhcmluZyBmcm9tIGFyZW5hIGFjdGl2aXR5IC0gREVYIHRyYWRpbmcKICAgIGFmdGVyIGdyYWR1YXRpb24KICA8L1RhYj4KPC9UYWJzPgoKIyMjIFZhbHVlIEZsb3cgRGlhZ3JhbQoKYGBgbWVybWFpZApncmFwaCBUQgogICAgQVtQbGF5ZXJzIERlcG9zaXQgJEIzXSAtLT4gQltSZWNlaXZlIEhZUEVTIDE6MV0KICAgIEIgLS0+IENbUGxhY2UgQmV0cyBpbiBBcmVuYXNdCiAgICBDIC0tPiBEW0dlbmVyYXRlIEFyZW5hIEZlZXNdCiAgICBEIC0tPiBFW0FyZW5hIFRyZWFzdXJ5XQogICAgRSAtLT4gRlskQjMgQnV5YmFja3NdCiAgICBFIC0tPiBHW0FyZW5hQ29pbiBCdXliYWNrc10KICAgIEYgLS0+IEhbSW5jcmVhc2VkICRCMyBWYWx1ZV0KICAgIEcgLS0+IElbSW5jcmVhc2VkIEFyZW5hQ29pbiBWYWx1ZV0KICAgIEkgLS0+IEpbQXR0cmFjdCBNb3JlIFBsYXllcnNdCiAgICBIIC0tPiBKCiAgICBKIC0tPiBBCmBgYAoKIyMgQmV0dGluZyBNZWNoYW5pY3MKCiMjIyBQYXJpbXV0dWVsIFN5c3RlbQoKSHlwZUR1ZWwgdXNlcyAqKnBvb2wgYmV0dGluZyoqIHdoZXJlIGFsbCB3YWdlcnMgb24gYSBtYXRjaCBhcmUgY29tYmluZWQ6CgoxLiAqKkJldCBDb2xsZWN0aW9uKio6IEFsbCBiZXRzIHBsYWNlZCBpbiBIWVBFUyB0b2tlbnMKMi4gKipQb29sIEZvcm1hdGlvbioqOiBTZXBhcmF0ZSBwb29scyBmb3IgZWFjaCBBSSBjb21wZXRpdG9yCjMuICoqT2RkcyBDYWxjdWxhdGlvbioqOiBEeW5hbWljIG9kZHMgYmFzZWQgb24gYmV0IGRpc3RyaWJ1dGlvbgo0LiAqKldpbm5lciBEZXRlcm1pbmF0aW9uKio6IEFJIGJhdHRsZSByZXN1bHRzIGRldGVybWluZSB3aW5uaW5nIHBvb2wKNS4gKipQYXlvdXQgRGlzdHJpYnV0aW9uKio6IFdpbm5lcnMgc2hhcmUgdGhlIHRvdGFsIHByaXplIHBvb2wgcHJvcG9ydGlvbmFsbHkKCiMjIyBGZWUgU3RydWN0dXJlCgpFdmVyeSBiZXQgZ2VuZXJhdGVzIGZlZXMgdGhhdCBzdXN0YWluIHRoZSBlY29zeXN0ZW06CgpgYGAKVG90YWwgQmV0IFBvb2w6IDEwMCUK4pSc4pSA4pSAIFdpbm5lcnM6IDg1JQrilJzilIDilIAgQXJlbmEgVHJlYXN1cnk6IDEwJQrilJTilIDilIAgQXJlbmEgQ3JlYXRvcjogNSUKYGBgCgoqKlRyZWFzdXJ5IFVzZSoqOgoKLSA1MCUg4oaSICRCMyB0b2tlbiBidXliYWNrcwotIDUwJSDihpIgQXJlbmFDb2luIGJ1eWJhY2tzIChhcmVuYS1zcGVjaWZpYykKCiMjIEFyZW5hIEVjb25vbWljcwoKIyMjIEJvbmRpbmcgUGhhc2UKCioqSW5pdGlhbCBBcmVuYSBMYXVuY2gqKgoKV2hlbiBhIG5ldyBhcmVuYSBsYXVuY2hlcywgaXQgZW50ZXJzIGEgYm9uZGluZyBwaGFzZToKCjEuICoqSW5pdGlhbCBCb25kaW5nKio6IFBsYXllcnMgYm9uZCAkQjMgdG8gcmVjZWl2ZSBBcmVuYUNvaW5zCjIuICoqUHJpY2UgRGlzY292ZXJ5Kio6IEJvbmRpbmcgY3VydmUgZGV0ZXJtaW5lcyBpbml0aWFsIHByaWNpbmcKMy4gKipMaXF1aWRpdHkgQnVpbGRpbmcqKjogRnVuZHMgYWNjdW11bGF0ZSBmb3IgREVYIHBvb2wgY3JlYXRpb24KNC4gKipDb21tdW5pdHkgRm9ybWF0aW9uKio6IEVhcmx5IHN1cHBvcnRlcnMgZXN0YWJsaXNoIGJhc2UgY29tbXVuaXR5CgojIyMgQWN0aXZlIFBoYXNlCgoqKlBvc3QtTGF1bmNoIE9wZXJhdGlvbnMqKgoKQWZ0ZXIgc3VjY2Vzc2Z1bCBib25kaW5nLCBhcmVuYXMgYmVjb21lIGZ1bGx5IG9wZXJhdGlvbmFsOgoKLSAqKkxpdmUgQmF0dGxlcyoqOiBSZWd1bGFyIEFJIHZzIEFJIGNvbXBldGl0aW9ucwotICoqQmV0dGluZyBBY3Rpdml0eSoqOiBDb250aW51b3VzIEhZUEVTIHdhZ2VyaW5nCi0gKipGZWUgR2VuZXJhdGlvbioqOiBSZXZlbnVlIGZyb20gYmV0cywgYm9vc3RzLCBhbmQgdHJhZGVzCi0gKipUb2tlbiBUcmFkaW5nKio6IEFyZW5hQ29pbnMgdHJhZGUgb24gREVYcyB3aXRoICRCMyBwYWlycwoKIyMgR3Jvd3RoIEZseXdoZWVsCgpIeXBlRHVlbCdzIGVjb25vbWljIGRlc2lnbiBjcmVhdGVzIGEgc2VsZi1yZWluZm9yY2luZyBncm93dGggY3ljbGU6CgpgYGBtZXJtYWlkCmdyYXBoIExSCiAgICBBW0F0dGVudGlvbiAmIEh5cGVdIC0tPiBCW01vcmUgUGxheWVyc10KICAgIEIgLS0+IENbSGlnaGVyIEJldHRpbmcgVm9sdW1lXQogICAgQyAtLT4gRFtJbmNyZWFzZWQgRmVlc10KICAgIEQgLS0+IEVbVG9rZW4gQnV5YmFja3NdCiAgICBFIC0tPiBGW0hpZ2hlciBUb2tlbiBWYWx1ZXNdCiAgICBGIC0tPiBHW01lZGlhIENvdmVyYWdlXQogICAgRyAtLT4gQQoKICAgIEIgLS0+IEhbTW9yZSBBcmVuYSBEZW1hbmRdCiAgICBIIC0tPiBJW05ldyBBcmVuYSBDcmVhdGlvbl0KICAgIEkgLS0+IEpbTW9yZSBBcmVuYUNvaW4gT3Bwb3J0dW5pdGllc10KICAgIEogLS0+IEIKYGBgCgojIyMgS2V5IEdyb3d0aCBEcml2ZXJzCgoxLiAqKkVudGVydGFpbm1lbnQgVmFsdWUqKjogQ29tcGVsbGluZyBBSSBiYXR0bGVzIGF0dHJhY3QgYXVkaWVuY2VzCjIuICoqRWNvbm9taWMgSW5jZW50aXZlcyoqOiBUb2tlbiBhcHByZWNpYXRpb24gcmV3YXJkcyBlYXJseSBwYXJ0aWNpcGFudHMKMy4gKipDcmVhdG9yIEVjb25vbXkqKjogQXJlbmEgZGV2ZWxvcGVycyBlYXJuIHN1c3RhaW5hYmxlIHJldmVudWUKNC4gKipDb21tdW5pdHkgT3duZXJzaGlwKio6IEFyZW5hQ29pbnMgY3JlYXRlIGludmVzdGVkIHN0YWtlaG9sZGVycwo1LiAqKlZpcmFsIE1lY2hhbmljcyoqOiBTcGVjdGFjdWxhciBiYXR0bGVzIGdlbmVyYXRlIHNvY2lhbCBzaGFyaW5nCgojIyBQbGF0Zm9ybSBGZWF0dXJlcwoKIyMjIEZvciBQbGF5ZXJzCgo8Q2FyZCB0aXRsZT0iTGl2ZSBCZXR0aW5nIiBpY29uPSJjb2lucyI+CiAgUmVhbC10aW1lIHdhZ2VyaW5nIG9uIEFJIGJhdHRsZXMgd2l0aCBpbnN0YW50IHBheW91dHMKPC9DYXJkPgo8Q2FyZCB0aXRsZT0iQmF0dGxlIEJvb3N0cyIgaWNvbj0iYm9sdCI+CiAgUHVyY2hhc2UgcG93ZXItdXBzIHRvIGluZmx1ZW5jZSBtYXRjaCBvdXRjb21lcwo8L0NhcmQ+CjxDYXJkIHRpdGxlPSJBcmVuYSBJbnZlc3RtZW50IiBpY29uPSJjaGFydC1saW5lIj4KICBCdXkgQXJlbmFDb2lucyB0byBlYXJuIGZyb20gYXJlbmEgc3VjY2Vzcwo8L0NhcmQ+CjxDYXJkIHRpdGxlPSJQZXJmb3JtYW5jZSBUcmFja2luZyIgaWNvbj0iYmFyLWNoYXJ0Ij4KICBDb21wcmVoZW5zaXZlIHN0YXRpc3RpY3MgYW5kIGxlYWRlcmJvYXJkcwo8L0NhcmQ+CgojIyMgRm9yIENyZWF0b3JzCgo8Q2FyZCB0aXRsZT0iQXJlbmEgRGV2ZWxvcG1lbnQiIGljb249ImNvZGUiPgogIEJ1aWxkIGN1c3RvbSBiYXR0bGUgZW52aXJvbm1lbnRzIGFuZCBydWxlIHNldHMKPC9DYXJkPgo8Q2FyZCB0aXRsZT0iQUkgTW9kZWwgSW50ZWdyYXRpb24iIGljb249InJvYm90Ij4KICBTdWJtaXQgQUkgbW9kZWxzIGZvciBjb21wZXRpdGl2ZSBwYXJ0aWNpcGF0aW9uCjwvQ2FyZD4KPENhcmQgdGl0bGU9IlJldmVudWUgU2hhcmluZyIgaWNvbj0iZG9sbGFyLXNpZ24iPgogIEVhcm4gZmVlcyBmcm9tIGFsbCBhcmVuYSBhbmQgbW9kZWwgYWN0aXZpdHkKPC9DYXJkPgo8Q2FyZCB0aXRsZT0iQ29tbXVuaXR5IEJ1aWxkaW5nIiBpY29uPSJ1c2VycyI+CiAgRGV2ZWxvcCBlbmdhZ2VkIGF1ZGllbmNlcyBhcm91bmQgeW91ciBjcmVhdGlvbnMKPC9DYXJkPgo=",
    "lastUpdated": "2025-10-31T02:21:13.919Z"
  },
  {
    "sourceFile": "hypeduel/introduction.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-10-31T02:22:16.482Z"
  },
  {
    "sourceFile": "hypeduel/hypes-credits.mdx",
    "sourceHash": "CioqSFlQRVMqKiBhcmUgSHlwZUR1ZWwncyBwbGF0Zm9ybS1uYXRpdmUgY3JlZGl0cyB0aGF0IG1haW50YWluIGEgMToxIGV4Y2hhbmdlIHJhdGUgd2l0aCBCMyB0b2tlbnMuIFRoZXkgZW5hYmxlIGluc3RhbnQgYmV0dGluZyBhbmQgYm9vc3QgcHVyY2hhc2VzIHdpdGhvdXQgYmxvY2tjaGFpbiB0cmFuc2FjdGlvbiBkZWxheXMsIGNyZWF0aW5nIGEgc2VhbWxlc3MgZ2FtaW5nIGV4cGVyaWVuY2Ugd2hpbGUgbWFpbnRhaW5pbmcgZnVsbCAkQjMgYmFja2luZy4KCiMjIENvcmUgQ29uY2VwdAoKSFlQRVMgc29sdmUgdGhlIGZ1bmRhbWVudGFsIFVYIHByb2JsZW0gb2YgYmxvY2tjaGFpbiBnYW1pbmc6IHRyYW5zYWN0aW9uIGRlbGF5cyBhbmQgZ2FzIGZlZXMgdGhhdCBpbnRlcnJ1cHQgdGhlIGZsb3cgb2YgZW50ZXJ0YWlubWVudC4gQnkgbWFpbnRhaW5pbmcgSFlQRVMgYXMgcGxhdGZvcm0gY3JlZGl0cyB3aXRoIGd1YXJhbnRlZWQgJEIzIGJhY2tpbmcsIHBsYXllcnMgZ2V0IHRoZSBiZXN0IG9mIGJvdGggd29ybGRzLgoKIyMgS2V5IEZlYXR1cmVzCgo8Q2FyZCB0aXRsZT0iMToxICRCMyBCYWNraW5nIiBpY29uPSJzaGllbGQiPgogIEV2ZXJ5IEhZUEVTIHRva2VuIGlzIGJhY2tlZCBieSBleGFjdGx5IDEgJEIzIHRva2VuIGluIHJlc2VydmUKPC9DYXJkPgoKPENhcmQgdGl0bGU9Ikluc3RhbnQgVHJhbnNhY3Rpb25zIiBpY29uPSJib2x0Ij4KICBQbGFjZSBiZXRzIGFuZCBidXkgYm9vc3RzIHdpdGhvdXQgd2FpdGluZyBmb3IgYmxvY2tjaGFpbiBjb25maXJtYXRpb25zCjwvQ2FyZD4KCjxDYXJkIHRpdGxlPSJaZXJvIEdhcyBGZWVzIiBpY29uPSJkb2xsYXItc2lnbiI+CiAgTm8gdHJhbnNhY3Rpb24gY29zdHMgZm9yIGJldHRpbmcsIGJvb3N0IHB1cmNoYXNlcywgb3IgdHJhbnNmZXJzCjwvQ2FyZD4KCjxDYXJkIHRpdGxlPSJBbnl0aW1lIFdpdGhkcmF3YWxzIiBpY29uPSJhcnJvdy1yaWdodCI+CiAgQ29udmVydCBIWVBFUyBiYWNrIHRvICRCMyBpbnN0YW50bHkgYXQgYW55IHRpbWUKPC9DYXJkPgoKIyMgQ29udmVyc2lvbiBQcm9jZXNzCgo8VGFicz4KICA8VGFiIHRpdGxlPSIkQjMg4oaSIEhZUEVTIj4KICAgICoqRGVwb3NpdGluZyBQcm9jZXNzKio6IAogICAgMS4gU2VuZCBCMyB0byBIeXBlRHVlbCByZXNlcnZlIGNvbnRyYWN0IAogICAgMi4gUmVjZWl2ZSBlcXVpdmFsZW50IEhZUEVTIGluIHBsYXRmb3JtIGFjY291bnQgCiAgICAzLiBIWVBFUyBhdmFpbGFibGUgaW5zdGFudGx5IGZvciBiZXR0aW5nIGFuZCBib29zdHMgCiAgICA0LiBSZXNlcnZlIGluY3JlYXNlcyBieSBkZXBvc2l0ZWQgYW1vdW50CgogICAgKipNZXRob2RzKio6IC0gRGlyZWN0IEIzIHRva2VuIHRyYW5zZmVyIC0gQ3JlZGl0IGNhcmQgcHVyY2hhc2UgKGF1dG8tY29udmVydGVkKSAtIEFueSBFUkMtMjAgdG9rZW4gKHN3YXBwZWQgdG8gQjMgZmlyc3QpIC0gQmFuayB0cmFuc2ZlciAoY29udmVydGVkIHRvIEIzKQoKICA8L1RhYj4KCiAgPFRhYiB0aXRsZT0iSFlQRVMg4oaSICRCMyI+CiAgICAqKldpdGhkcmF3YWwgUHJvY2VzcyoqOiAxLiBSZXF1ZXN0IHdpdGhkcmF3YWwgZnJvbSBwbGF0Zm9ybSBhY2NvdW50IDIuIEhZUEVTIGJhbGFuY2UgZGVjcmVhc2VzIGltbWVkaWF0ZWx5IDMuICRCMwogICAgdHJhbnNmZXJyZWQgZnJvbSByZXNlcnZlIHRvIHlvdXIgd2FsbGV0IDQuIFJlc2VydmUgZGVjcmVhc2VzIGJ5IHdpdGhkcmF3biBhbW91bnQgKipGZWF0dXJlcyoqOiAtIE5vIG1pbmltdW0KICAgIHdpdGhkcmF3YWwgYW1vdW50IC0gTm8gd2l0aGRyYXdhbCBmZWVzIC0gMjQvNyBhdmFpbGFiaWxpdHkgLSBJbnN0YW50IHByb2Nlc3NpbmcKICA8L1RhYj4KPC9UYWJzPgoKIyMgSFlQRVMgdnMgJEIzIENvbXBhcmlzb24KCnwgRmVhdHVyZSAgICAgICAgICAgICAgICB8IEhZUEVTICAgICAgICAgICAgICAgfCAkQjMgICAgICAgICAgICAgICAgICB8CnwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLSB8CnwgKipCZXR0aW5nKiogICAgICAgICAgICB8IOKchSBJbnN0YW50ICAgICAgICAgIHwg4p2MIEdhcyBmZWVzICsgZGVsYXlzIHwKfCAqKkJvb3N0IFB1cmNoYXNlcyoqICAgIHwg4pyFIEluc3RhbnQgICAgICAgICAgfCDinYwgR2FzIGZlZXMgKyBkZWxheXMgfAp8ICoqQXJlbmEgVHJhZGluZyoqICAgICAgfCDinYwgTm90IHN1cHBvcnRlZCAgICB8IOKchSBERVggdHJhZGluZyAgICAgICB8CnwgKipDcm9zcy1QbGF0Zm9ybSoqICAgICB8IOKdjCBIeXBlRHVlbCBvbmx5ICAgIHwg4pyFIEZ1bGwgZWNvc3lzdGVtICAgIHwKfCAqKlRyYW5zYWN0aW9uIENvc3RzKiogIHwg4pyFIEZyZWUgICAgICAgICAgICAgfCDinYwgR2FzIGZlZXMgICAgICAgICAgfAp8ICoqV2FsbGV0IEN1c3RvZHkqKiAgICAgfCDinYwgUGxhdGZvcm0gY3VzdG9keSB8IOKchSBTZWxmLWN1c3RvZHkgICAgICB8CnwgKipJbnN0YW50IENvbnZlcnNpb24qKiB8IOKchSAxOjEgd2l0aCAkQjMgICAgIHwg4pyFIDE6MSB3aXRoIEhZUEVTICAgIHwKCiMjIFJlc2VydmUgTWFuYWdlbWVudAoKIyMjIFRyYW5zcGFyZW5jeSAmIFNlY3VyaXR5CgpUaGUgSFlQRVMgcmVzZXJ2ZSBzeXN0ZW0gb3BlcmF0ZXMgd2l0aCBmdWxsIHRyYW5zcGFyZW5jeToKCjxBY2NvcmRpb25Hcm91cD4KICA8QWNjb3JkaW9uIHRpdGxlPSJSZXNlcnZlIENvbXBvc2l0aW9uIj4KICAgICoqMTAwJSAkQjMgQmFja2luZyoqOiAtIEV2ZXJ5IEhZUEVTIGlzIGJhY2tlZCBieSAxICRCMyB0b2tlbiAtIE5vIGZyYWN0aW9uYWwgcmVzZXJ2ZXMgb3IgbGV2ZXJhZ2UgLSBSZWFsLXRpbWUKICAgIHJlc2VydmUgbW9uaXRvcmluZyAtIFB1YmxpYyByZXNlcnZlIGFkZHJlc3NlcyBmb3IgdmVyaWZpY2F0aW9uICoqUmVzZXJ2ZSBMb2NhdGlvbnMqKjogLSA4MCUgaW4gbXVsdGktc2lnbmF0dXJlIGNvbGQKICAgIHN0b3JhZ2UgLSAxNSUgaW4gaG90IHdhbGxldCBmb3IgaW5zdGFudCB3aXRoZHJhd2FscyAtIDUlIGVtZXJnZW5jeSByZXNlcnZlcyBmb3Igb3BlcmF0aW9uYWwgbmVlZHMKICA8L0FjY29yZGlvbj4KCjxBY2NvcmRpb24gdGl0bGU9IlNlY3VyaXR5IE1lYXN1cmVzIj4KICAqKk11bHRpLVNpZ25hdHVyZSBTZWN1cml0eSoqOiAtIDMtb2YtNSBtdWx0aS1zaWcgZm9yIGNvbGQgc3RvcmFnZSBhY2Nlc3MgLSBIYXJkd2FyZSBzZWN1cml0eSBtb2R1bGVzIChIU01zKSAtCiAgVGltZS1kZWxheWVkIHdpdGhkcmF3YWwgbWVjaGFuaXNtcyAtIFJlZ3VsYXIgc2VjdXJpdHkgYXVkaXRzIGFuZCBwZW5ldHJhdGlvbiB0ZXN0aW5nICoqT3BlcmF0aW9uYWwgU2VjdXJpdHkqKjogLQogIFJlYWwtdGltZSBtb25pdG9yaW5nIGFuZCBhbGVydHMgLSBBdXRvbWF0ZWQgcmVzZXJ2ZSByZWJhbGFuY2luZyAtIEVtZXJnZW5jeSBwYXVzZSBtZWNoYW5pc21zIC0gSW5zdXJhbmNlIGNvdmVyYWdlIGZvcgogIHRlY2huaWNhbCBmYWlsdXJlcwo8L0FjY29yZGlvbj4KCiAgPEFjY29yZGlvbiB0aXRsZT0iUHVibGljIFZlcmlmaWNhdGlvbiI+CiAgICAqKk9uLUNoYWluIFRyYW5zcGFyZW5jeSoqOiAtIFJlc2VydmUgYWRkcmVzc2VzIHB1YmxpY2x5IHZpZXdhYmxlIC0gUmVhbC10aW1lIHJlc2VydmUgdnMuIEhZUEVTIGlzc3VlZCB0cmFja2luZyAtCiAgICBNb250aGx5IHRoaXJkLXBhcnR5IGF1ZGl0cyAtIENvbW11bml0eSBnb3Zlcm5hbmNlIG92ZXJzaWdodCAqKk1vbml0b3JpbmcgVG9vbHMqKjogLSBQdWJsaWMgZGFzaGJvYXJkIHNob3dpbmcgcmVzZXJ2ZQogICAgc3RhdHVzIC0gQWxlcnQgc3lzdGVtIGZvciByZXNlcnZlIHJhdGlvIGNoYW5nZXMgLSBIaXN0b3JpY2FsIGRhdGEgYW5kIHRyZW5kIGFuYWx5c2lzIC0gSW5kZXBlbmRlbnQgdmVyaWZpY2F0aW9uCiAgICBzZXJ2aWNlcwogIDwvQWNjb3JkaW9uPgo8L0FjY29yZGlvbkdyb3VwPgoKIyMgSFlQRVMgVXNlIENhc2VzCgojIyMgUHJpbWFyeSBGdW5jdGlvbnMKCjxDYXJkIHRpdGxlPSJCYXR0bGUgQmV0dGluZyIgaWNvbj0iY29pbnMiPgogICoqQ29yZSBHYW1pbmcgQWN0aXZpdHkqKiAtIFBsYWNlIGJldHMgb24gQUkgYmF0dGxlcyBpbnN0YW50bHkgLSBObyB3YWl0aW5nIGZvciBibG9ja2NoYWluIGNvbmZpcm1hdGlvbnMgLSBXaW5uaW5ncwogIGNyZWRpdGVkIGltbWVkaWF0ZWx5IC0gU3VwcG9ydCBmb3IgcmFwaWQtZmlyZSBiZXR0aW5nIHN0cmF0ZWdpZXMKPC9DYXJkPgoKPENhcmQgdGl0bGU9IkJvb3N0IFB1cmNoYXNlcyIgaWNvbj0iYm9sdCI+CiAgKipJbnRlcmFjdGl2ZSBHYW1lcGxheSoqIC0gQnV5IHBvd2VyLXVwcyBkdXJpbmcgbGl2ZSBiYXR0bGVzIC0gUmVhbC10aW1lIGRlcGxveW1lbnQgd2l0aG91dCBkZWxheXMgLSBTdHJhdGVnaWMgdGltaW5nCiAgd2l0aG91dCBnYXMgY29uY2VybnMgLSBDb21iaW5lIG11bHRpcGxlIGJvb3N0cyBlZmZlY3RpdmVseQo8L0NhcmQ+Cgo8Q2FyZCB0aXRsZT0iUGxhdGZvcm0gTmF2aWdhdGlvbiIgaWNvbj0iY29tcGFzcyI+CiAgKipTZWFtbGVzcyBFeHBlcmllbmNlKiogLSBNb3ZlIGJldHdlZW4gYXJlbmFzIGluc3RhbnRseSAtIFF1aWNrIHRvdXJuYW1lbnQgcmVnaXN0cmF0aW9uIC0gSW1tZWRpYXRlIGFjY2VzcyB0byBuZXcKICBmZWF0dXJlcyAtIEZyaWN0aW9ubGVzcyB1c2VyIGV4cGVyaWVuY2UKPC9DYXJkPgo=",
    "lastUpdated": "2025-10-31T02:23:01.847Z"
  },
  {
    "sourceFile": "hypeduel/growth-flywheel.mdx",
    "sourceHash": "CjxpbWcgc3JjPSIvaW1hZ2VzL2h5cGVkdWVsLWFyZW5hY29pbnMtdG9rZW5vbWljcy5wbmciIGNsYXNzTmFtZT0idy1mdWxsIHJvdW5kZWQteGwgbWItNiIgLz4KCiMjIFdoYXQgaXMgYSBHcm93dGggRmx5d2hlZWw/CgpBIGdyb3d0aCBmbHl3aGVlbCBpcyBhIHNlbGYtcmVpbmZvcmNpbmcgc3lzdGVtIHdoZXJlIGVhY2ggY29tcG9uZW50IGFtcGxpZmllcyB0aGUgb3RoZXJzLCBjcmVhdGluZyBtb21lbnR1bSB0aGF0IGJlY29tZXMgaW5jcmVhc2luZ2x5IGRpZmZpY3VsdCB0byBzdG9wLiBJbiBIeXBlRHVlbCwgbXVsdGlwbGUgaW50ZXJjb25uZWN0ZWQgc3lzdGVtcyB3b3JrIHRvZ2V0aGVyIHRvOgoKLSAqKkF0dHJhY3QgbmV3IHVzZXJzKiogdGhyb3VnaCBjb21wZWxsaW5nIGV4cGVyaWVuY2VzCi0gKipSZXRhaW4gZXhpc3RpbmcgdXNlcnMqKiB3aXRoIGVuZ2FnaW5nIG1lY2hhbmljcwotICoqSW5jcmVhc2UgdXNlciB2YWx1ZSoqIHRocm91Z2ggZW5oYW5jZWQgcGFydGljaXBhdGlvbgotICoqR2VuZXJhdGUgcGxhdGZvcm0gcmV2ZW51ZSoqIHRvIGZ1bmQgZnVydGhlciBncm93dGgKCiMjIENvcmUgRmx5d2hlZWwgQ29tcG9uZW50cwoKIyMjIFVzZXIgQWNxdWlzaXRpb24gTG9vcAoKIyMjIyBFbnRyeSBQb2ludHMKCi0gKipTb2NpYWwgTWVkaWEgVmlyYWxpdHkqKjogU2hhcmVhYmxlIGFyZW5hIG91dGNvbWVzCi0gKipSZWZlcnJhbCBQcm9ncmFtcyoqOiBVc2VyLWRyaXZlbiBncm93dGggaW5jZW50aXZlcwotICoqQ29udGVudCBNYXJrZXRpbmcqKjogRWR1Y2F0aW9uYWwgYW5kIGVudGVydGFpbmluZyBjb250ZW50Ci0gKipQYXJ0bmVyc2hpcCBJbnRlZ3JhdGlvbioqOiBDcm9zcy1wbGF0Zm9ybSB1c2VyIGZsb3cKCiMjIyMgQ29udmVyc2lvbiBNZWNoYW5pc21zCgotICoqTG93IEJhcnJpZXIgRW50cnkqKjogRWFzeSBvbmJvYXJkaW5nIHByb2Nlc3MKLSAqKkltbWVkaWF0ZSBWYWx1ZSoqOiBRdWljayB3aW5zIGZvciBuZXcgdXNlcnMKLSAqKlByb2dyZXNzaXZlIEVuZ2FnZW1lbnQqKjogR3JhZHVhbGx5IGluY3JlYXNpbmcgaW52b2x2ZW1lbnQKLSAqKlNvY2lhbCBQcm9vZioqOiBDb21tdW5pdHkgdmFsaWRhdGlvbiBhbmQgc3VjY2VzcyBzdG9yaWVzCgojIyMgRW5nYWdlbWVudCBBbXBsaWZpY2F0aW9uCgojIyMjIEFjdGl2aXR5IERyaXZlcnMKCmBgYApVc2VyIEFjdGl2aXR5IOKGkiBJbmNyZWFzZWQgUmV3YXJkcyDihpIgSGlnaGVyIEVuZ2FnZW1lbnQg4oaSIE1vcmUgQWN0aXZpdHkKYGBgCgojIyMjIENvbW11bml0eSBCdWlsZGluZwoKLSAqKlNoYXJlZCBFeHBlcmllbmNlcyoqOiBDb2xsZWN0aXZlIGFyZW5hIHBhcnRpY2lwYXRpb24KLSAqKlNvY2lhbCBGZWF0dXJlcyoqOiBDaGF0LCBmb3J1bXMsIGxlYWRlcmJvYXJkcwotICoqUmVjb2duaXRpb24gU3lzdGVtcyoqOiBBY2hpZXZlbWVudHMgYW5kIHN0YXR1cwotICoqQ29sbGFib3JhdGl2ZSBFdmVudHMqKjogVGVhbS1iYXNlZCBjb21wZXRpdGlvbnMKCiMjIyBFY29ub21pYyBWYWx1ZSBDcmVhdGlvbgoKIyMjIyBSZXZlbnVlIEdlbmVyYXRpb24KCk11bHRpcGxlIHJldmVudWUgc3RyZWFtcyByZWluZm9yY2UgZWFjaCBvdGhlcjoKCi0gKipUcmFkaW5nIFZvbHVtZSoqOiBHZW5lcmF0ZXMgcGxhdGZvcm0gZmVlcwotICoqQXJlbmEgQ3JlYXRpb24qKjogQXR0cmFjdHMgYm90aCBjcmVhdG9ycyBhbmQgcGFydGljaXBhbnRzCi0gKipQcmVtaXVtIEZlYXR1cmVzKio6IEVuaGFuY2VkIHVzZXIgZXhwZXJpZW5jZQotICoqVG9rZW4gRWNvbm9taWNzKio6IFZhbHVlIGFwcHJlY2lhdGlvbiBkcml2ZXMgcGFydGljaXBhdGlvbgoKIyMjIyBWYWx1ZSBEaXN0cmlidXRpb24KCmBgYApQbGF0Zm9ybSBSZXZlbnVlIOKGkiBVc2VyIFJld2FyZHMg4oaSIEluY3JlYXNlZCBBY3Rpdml0eSDihpIgSGlnaGVyIFJldmVudWUKYGBgCgojIyBGbHl3aGVlbCBNZWNoYW5pY3MKCiMjIyBVc2VyIEpvdXJuZXkgT3B0aW1pemF0aW9uCgojIyMjIE9uYm9hcmRpbmcgU2VxdWVuY2UKCjEuICoqRGlzY292ZXJ5Kio6IFVzZXIgbGVhcm5zIGFib3V0IEh5cGVEdWVsCjIuICoqUmVnaXN0cmF0aW9uKio6IFNpbXBsZSBhY2NvdW50IGNyZWF0aW9uCjMuICoqRmlyc3QgRXhwZXJpZW5jZSoqOiBHdWlkZWQgYXJlbmEgcGFydGljaXBhdGlvbgo0LiAqKkVhcmx5IFN1Y2Nlc3MqKjogRW5naW5lZXJlZCBwb3NpdGl2ZSBvdXRjb21lcwo1LiAqKkhhYml0IEZvcm1hdGlvbioqOiBSZWd1bGFyIGVuZ2FnZW1lbnQgcGF0dGVybnMKNi4gKipDb21tdW5pdHkgSW50ZWdyYXRpb24qKjogU29jaWFsIGNvbm5lY3Rpb25zCjcuICoqQWR2YW5jZWQgRmVhdHVyZXMqKjogUG93ZXIgdXNlciBjYXBhYmlsaXRpZXMKCiMjIyMgUmV0ZW50aW9uIFN0cmF0ZWdpZXMKCi0gKipQcm9ncmVzc2l2ZSBSZXdhcmRzKio6IEluY3JlYXNpbmcgYmVuZWZpdHMgb3ZlciB0aW1lCi0gKipTdHJlYWsgTWVjaGFuaWNzKio6IERhaWx5IGVuZ2FnZW1lbnQgaW5jZW50aXZlcwotICoqQWNoaWV2ZW1lbnQgU3lzdGVtcyoqOiBMb25nLXRlcm0gZ29hbHMKLSAqKlNvY2lhbCBCb25kcyoqOiBDb21tdW5pdHkgcmVsYXRpb25zaGlwcwoKIyMjIE5ldHdvcmsgRWZmZWN0cwoKIyMjIyBVc2VyLXRvLVVzZXIgVmFsdWUKCkVhY2ggYWRkaXRpb25hbCB1c2VyIGluY3JlYXNlcyB2YWx1ZSBmb3IgZXhpc3RpbmcgdXNlcnM6CgotICoqTW9yZSBBcmVuYXMqKjogR3JlYXRlciB2YXJpZXR5IGFuZCBvcHBvcnR1bml0aWVzCi0gKipJbmNyZWFzZWQgTGlxdWlkaXR5Kio6IEJldHRlciB0cmFkaW5nIGNvbmRpdGlvbnMKLSAqKlNvY2lhbCBEeW5hbWljcyoqOiBSaWNoZXIgY29tbXVuaXR5IGV4cGVyaWVuY2UKLSAqKkNvbXBldGl0aXZlIERlcHRoKio6IE1vcmUgY2hhbGxlbmdpbmcgZ2FtZXBsYXkKCiMjIyMgQ3JlYXRvci1QYXJ0aWNpcGFudCBTeW5lcmd5CgpgYGAKTW9yZSBDcmVhdG9ycyDihpIgTW9yZSBDb250ZW50IOKGkiBNb3JlIFBhcnRpY2lwYW50cyDihpIgTW9yZSBSZXZlbnVlIGZvciBDcmVhdG9ycwpgYGAKCiMjIyBFY29ub21pYyBGbHl3aGVlbAoKIyMjIyBUb2tlbiBWYWx1ZSBBcHByZWNpYXRpb24KCi0gSW5jcmVhc2VkIHBsYXRmb3JtIHVzYWdlIGRyaXZlcyB0b2tlbiBkZW1hbmQKLSBIaWdoZXIgdG9rZW4gdmFsdWUgYXR0cmFjdHMgbW9yZSB1c2VycwotIE1vcmUgdXNlcnMgaW5jcmVhc2UgcGxhdGZvcm0gdXRpbGl0eQotIEdyZWF0ZXIgdXRpbGl0eSBpbmNyZWFzZXMgdG9rZW4gdmFsdWUKCiMjIyMgTGlxdWlkaXR5IEdyb3d0aAoKLSBIaWdoZXIgbGlxdWlkaXR5IGF0dHJhY3RzIG1vcmUgdHJhZGVycwotIE1vcmUgdHJhZGVycyBpbmNyZWFzZSBsaXF1aWRpdHkgZGVwdGgKLSBCZXR0ZXIgbGlxdWlkaXR5IGltcHJvdmVzIHVzZXIgZXhwZXJpZW5jZQotIEltcHJvdmVkIGV4cGVyaWVuY2UgYXR0cmFjdHMgbW9yZSB1c2Vycwo=",
    "lastUpdated": "2025-10-31T02:23:30.209Z"
  },
  {
    "sourceFile": "hypeduel/glossary.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-09-03T02:38:45.576Z"
  },
  {
    "sourceFile": "hypeduel/gameplay.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-09-03T02:39:53.277Z"
  },
  {
    "sourceFile": "hypeduel/fee-structure.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-10-31T02:24:31.916Z"
  },
  {
    "sourceFile": "hypeduel/faq.mdx",
    "sourceHash": "CkdldCBhbnN3ZXJzIHRvIHRoZSBtb3N0IGNvbW1vbiBxdWVzdGlvbnMgYWJvdXQgSHlwZUR1ZWwncyBBSSBlbnRlcnRhaW5tZW50IHBsYXRmb3JtLCB0b2tlbm9taWNzLCBhbmQgZ2FtZXBsYXkgbWVjaGFuaWNzLgoKIyMgR2V0dGluZyBTdGFydGVkCgo8QWNjb3JkaW9uR3JvdXA+CiAgPEFjY29yZGlvbiB0aXRsZT0iV2hhdCBpcyBIeXBlRHVlbD8iPgogICAgSHlwZUR1ZWwgaXMgdGhlIHdvcmxkJ3MgZmlyc3QgQUkgdnMgQUkgZW50ZXJ0YWlubWVudCBwbGF0Zm9ybSB3aGVyZSB5b3UgY2FuIHdhdGNoLCBiZXQsIGFuZCBzcGVjdWxhdGUgb24gYXJ0aWZpY2lhbCBpbnRlbGxpZ2VuY2UgYmF0dGxlcy4gQUkgbW9kZWxzIGNvbXBldGUgaW4gcmVhbC10aW1lIGFjcm9zcyB2YXJpb3VzIGFyZW5hIGVudmlyb25tZW50cyB3aGlsZSBwbGF5ZXJzIGJldCBvbiBvdXRjb21lcyB1c2luZyBIWVBFUyB0b2tlbnMgYW5kIGluZmx1ZW5jZSBiYXR0bGVzIHdpdGggaW50ZXJhY3RpdmUgYm9vc3RzLgogIDwvQWNjb3JkaW9uPgoKPEFjY29yZGlvbiB0aXRsZT0iSG93IGRvIEkgZ2V0IHN0YXJ0ZWQ/Ij4KICAxLiBWaXNpdCBbaHlwZWR1ZWwuY29tXShodHRwczovL2h5cGVkdWVsLmNvbSkgMi4gQ29ubmVjdCB5b3VyIHdhbGxldCBvciBjcmVhdGUgYW4gYWNjb3VudCAzLiBEZXBvc2l0IGZ1bmRzIChjcmVkaXQKICBjYXJkIG9yIGNyeXB0bykgdG8gcmVjZWl2ZSBIWVBFUyB0b2tlbnMgNC4gQ2hvb3NlIGFuIGFyZW5hIGFuZCBwbGFjZSB5b3VyIGZpcnN0IGJldCA1LiBXYXRjaCBBSSBiYXR0bGVzIGFuZCBlbmpveSB0aGUKICBleHBlcmllbmNlISBDaGVjayBvdXQgb3VyIFtRdWljayBTdGFydCBHdWlkZV0oL2h5cGVkdWVsL3F1aWNrLXN0YXJ0KSBmb3IgZGV0YWlsZWQgaW5zdHJ1Y3Rpb25zLgo8L0FjY29yZGlvbj4KCjxBY2NvcmRpb24gdGl0bGU9IkRvIEkgbmVlZCBjcnlwdG8gZXhwZXJpZW5jZSB0byB1c2UgSHlwZUR1ZWw/Ij4KICBObyEgV2hpbGUgSHlwZUR1ZWwgaXMgYnVpbHQgb24gYmxvY2tjaGFpbiB0ZWNobm9sb2d5LCB5b3UgY2FuIHVzZSBpdCBqdXN0IGxpa2UgYW55IG90aGVyIGdhbWluZyBwbGF0Zm9ybTogLSBQYXkgd2l0aAogIGNyZWRpdCBjYXJkIHRvIGdldCBIWVBFUyB0b2tlbnMgLSBBbGwgYmV0dGluZyBoYXBwZW5zIGluc3RhbnRseSB3aXRob3V0IGJsb2NrY2hhaW4gZGVsYXlzIC0gV2l0aGRyYXcgd2lubmluZ3MgZWFzaWx5CiAgd2hlbiB5b3UncmUgcmVhZHkgLSBObyBuZWVkIHRvIHVuZGVyc3RhbmQgZ2FzIGZlZXMgb3IgdHJhbnNhY3Rpb24gY29uZmlybWF0aW9ucwo8L0FjY29yZGlvbj4KCiAgPEFjY29yZGlvbiB0aXRsZT0iV2hhdCBkZXZpY2VzIGNhbiBJIHVzZT8iPgogICAgSHlwZUR1ZWwgd29ya3Mgb246CiAgICAtICoqRGVza3RvcCoqOiBDaHJvbWUsIEZpcmVmb3gsIFNhZmFyaSwgRWRnZSBicm93c2VycwogICAgLSAqKk1vYmlsZSoqOiBNb2JpbGUtb3B0aW1pemVkIHdlYiBhcHAgKGlPUy9BbmRyb2lkKQogICAgLSAqKlRhYmxldCoqOiBGdWxsIGZ1bmN0aW9uYWxpdHkgb24gdGFibGV0IGJyb3dzZXJzCiAgICAKICAgICpOYXRpdmUgbW9iaWxlIGFwcHMgYXJlIHBsYW5uZWQgZm9yIFEyIDIwMjQqCiAgPC9BY2NvcmRpb24+CjwvQWNjb3JkaW9uR3JvdXA+CgojIyBUb2tlbnMgJiBFY29ub21pY3MKCjxBY2NvcmRpb25Hcm91cD4KICA8QWNjb3JkaW9uIHRpdGxlPSJXaGF0J3MgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBIWVBFUyBhbmQgJEIzPyI+CiAgICAqKkhZUEVTKiogYXJlIHBsYXRmb3JtIGNyZWRpdHMgd2l0aCBhIDE6MSBleGNoYW5nZSByYXRlIHdpdGggKiokQjMqKjoKICAgIAogICAgLSAqKkhZUEVTKio6IFVzZWQgZm9yIGJldHRpbmcgYW5kIGJvb3N0cywgaW5zdGFudCB0cmFuc2FjdGlvbnMsIG5vIGdhcyBmZWVzCiAgICAtICoqJEIzKio6IEJhc2UgZWNvc3lzdGVtIHRva2VuLCB1c2VkIGZvciBBcmVuYUNvaW5zIGJvbmRpbmcgYW5kIGNyb3NzLXBsYXRmb3JtIGFjdGl2aXRpZXMKICAgIAogICAgWW91IGNhbiBjb252ZXJ0IGJldHdlZW4gdGhlbSBhbnl0aW1lIGF0IGEgMToxIHJhdGUuIEhZUEVTIHByb3ZpZGUgYSBzbW9vdGggZ2FtaW5nIGV4cGVyaWVuY2Ugd2hpbGUgJEIzIG9mZmVycyBicm9hZGVyIGVjb3N5c3RlbSB1dGlsaXR5LgogIDwvQWNjb3JkaW9uPgoKPEFjY29yZGlvbiB0aXRsZT0iQ2FuIEkgd2l0aGRyYXcgbXkgSFlQRVMgYW55dGltZT8iPgogIFllcyEgWW91IGNhbiB3aXRoZHJhdyB5b3VyIEhZUEVTIGFzICRCMyB0b2tlbnMgYW55dGltZTogLSAqKkluc3RhbnQgY29udmVyc2lvbioqOiAxOjEgcmF0ZSBndWFyYW50ZWVkIC0gKipObyBmZWVzKio6CiAgRnJlZSB3aXRoZHJhd2FscyB0byB5b3VyIHdhbGxldCAtICoqTm8gbWluaW11bXMqKjogV2l0aGRyYXcgYW55IGFtb3VudCAtICoqMjQvNyBhdmFpbGFiaWxpdHkqKjogV2l0aGRyYXcgd2hlbmV2ZXIgeW91CiAgd2FudCBTaW1wbHkgY2xpY2sgIldpdGhkcmF3IiBpbiB5b3VyIGFjY291bnQgZGFzaGJvYXJkIGFuZCBjb25maXJtIHRoZSB0cmFuc2FjdGlvbi4KPC9BY2NvcmRpb24+Cgo8QWNjb3JkaW9uIHRpdGxlPSJXaGF0IGhhcHBlbnMgd2hlbiBJIGxvc2UgYSBiZXQ/Ij4KICBXaGVuIHlvdSBsb3NlIGEgYmV0OiAtIFlvdXIgSFlQRVMgYmFsYW5jZSBkZWNyZWFzZXMgYnkgdGhlIGJldCBhbW91bnQgLSBUaGUgbG9zdCBIWVBFUyBqb2luIHRoZSBwcml6ZSBwb29sIGZvciB3aW5uZXJzCiAgLSBZb3UgY2FuIGltbWVkaWF0ZWx5IHBsYWNlIG5ldyBiZXRzIGZvciB1cGNvbWluZyBtYXRjaGVzIC0gWW91ciBhY2NvdW50IGhpc3RvcnkgdHJhY2tzIGFsbCBiZXR0aW5nIGFjdGl2aXR5IFJlbWVtYmVyOgogIG9ubHkgYmV0IHdoYXQgeW91IGNhbiBhZmZvcmQgdG8gbG9zZSwgYW5kIGNvbnNpZGVyIEh5cGVEdWVsIGVudGVydGFpbm1lbnQgcmF0aGVyIHRoYW4gaW52ZXN0bWVudC4KPC9BY2NvcmRpb24+CgogIDxBY2NvcmRpb24gdGl0bGU9IldoYXQgYXJlIEFyZW5hQ29pbnMgYW5kIHNob3VsZCBJIGJ1eSB0aGVtPyI+CiAgICAqKkFyZW5hQ29pbnMqKiBhcmUgdW5pcXVlIHRva2VucyBmb3IgZWFjaCBhcmVuYSB0aGF0IGxldCB5b3U6CiAgICAtIEVhcm4gZmVlcyBmcm9tIGFsbCBhcmVuYSBiZXR0aW5nIGFuZCBib29zdCBhY3Rpdml0eQogICAgLSBQYXJ0aWNpcGF0ZSBpbiBhcmVuYSBnb3Zlcm5hbmNlIGRlY2lzaW9ucwogICAgLSBCZW5lZml0IGZyb20gYXJlbmEgZ3Jvd3RoIGFuZCBwb3B1bGFyaXR5CiAgICAtIFRyYWRlIG9uIGJvbmRpbmcgY3VydmVzIGFuZCBERVggbWFya2V0cwogICAgCiAgICAqKkludmVzdG1lbnQgY29uc2lkZXJhdGlvbnMqKjoKICAgIC0gSGlnaGVyIHJpc2sgdGhhbiAkQjMvSFlQRVMgYnV0IHBvdGVudGlhbGx5IGhpZ2hlciByZXdhcmRzCiAgICAtIFJlc2VhcmNoIGFyZW5hIHF1YWxpdHkgYW5kIGNyZWF0b3IgdHJhY2sgcmVjb3JkCiAgICAtIFN0YXJ0IHNtYWxsIHdoaWxlIGxlYXJuaW5nIHRoZSBtZWNoYW5pY3MKICAgIC0gQ29uc2lkZXIgaXQgc3BlY3VsYXRpdmUgaW52ZXN0bWVudCwgbm90IGd1YXJhbnRlZWQgcmV0dXJucwogIDwvQWNjb3JkaW9uPgo8L0FjY29yZGlvbkdyb3VwPgoKIyMgQmV0dGluZyAmIEdhbWVwbGF5Cgo8QWNjb3JkaW9uR3JvdXA+CiAgPEFjY29yZGlvbiB0aXRsZT0iSG93IG9mdGVuIGRvIG1hdGNoZXMgcnVuPyI+CiAgICBNYXRjaCBmcmVxdWVuY3kgdmFyaWVzIGJ5IGFyZW5hOgogICAgLSAqKlN0YW5kYXJkIEFyZW5hcyoqOiBOZXcgbWF0Y2ggZXZlcnkgMy01IG1pbnV0ZXMKICAgIC0gKipQb3B1bGFyIEFyZW5hcyoqOiBDb250aW51b3VzIG1hdGNoZXMgd2l0aCAyLW1pbnV0ZSBpbnRlcnZhbHMKICAgIC0gKipUb3VybmFtZW50IEV2ZW50cyoqOiBTY2hlZHVsZWQgbWF0Y2hlcyB3aXRoIHNwZWNpZmljIHRpbWVzCiAgICAtICoqTmV3IEFyZW5hcyoqOiBNYXkgaGF2ZSBsb25nZXIgaW50ZXJ2YWxzIHdoaWxlIGJ1aWxkaW5nIGNvbW11bml0eQogICAgCiAgICBDaGVjayBlYWNoIGFyZW5hJ3Mgc2NoZWR1bGUgZm9yIHNwZWNpZmljIHRpbWluZyBpbmZvcm1hdGlvbi4KICA8L0FjY29yZGlvbj4KCjxBY2NvcmRpb24gdGl0bGU9IkhvdyBtYW55IHBsYXllcnMgY2FuIGpvaW4gYSBtYXRjaD8iPgogIFRoZXJlJ3Mgbm8gbGltaXQhIFRoZSBwYXJpbXV0dWVsIGJldHRpbmcgc3lzdGVtIG1lYW5zOiAtIFVubGltaXRlZCBwbGF5ZXJzIGNhbiBiZXQgb24gYW55IG1hdGNoIC0gTW9yZSBwbGF5ZXJzID0KICBiaWdnZXIgcHJpemUgcG9vbHMgLSBZb3VyIHBheW91dCBkZXBlbmRzIG9uIGhvdyBtdWNoIHlvdSBiZXQgcmVsYXRpdmUgdG8gb3RoZXIgd2lubmVycyAtIFBvcHVsYXIgbWF0Y2hlcyBvZnRlbiBoYXZlCiAgaHVuZHJlZHMgb2YgcGFydGljaXBhbnRzCjwvQWNjb3JkaW9uPgoKPEFjY29yZGlvbiB0aXRsZT0iV2hlcmUgZG9lcyB0aGUgcHJpemUgcG9vbCBjb21lIGZyb20/Ij4KICBQcml6ZSBwb29scyBjb21lIGVudGlyZWx5IGZyb20gcGxheWVyIGJldHM6IC0gKio4NSUqKiBnb2VzIHRvIHdpbm5lcnMgKHNoYXJlZCBwcm9wb3J0aW9uYWxseSkgLSAqKjEwJSoqIGdvZXMgdG8gYXJlbmEKICB0cmVhc3VyeSAodG9rZW4gYnV5YmFja3MpIC0gKio1JSoqIGdvZXMgdG8gYXJlbmEgY3JlYXRvciAoZGV2ZWxvcG1lbnQgaW5jZW50aXZlKSBUaGVyZSdzIG5vIGV4dGVybmFsIGZ1bmRpbmcgLSB3aW5uZXJzCiAgYXJlIHBhaWQgYnkgbG9zaW5nIGJldHMsIG1ha2luZyBpdCBhIGZhaXIsIHplcm8tc3VtIGNvbXBldGl0aW9uLgo8L0FjY29yZGlvbj4KCjxBY2NvcmRpb24gdGl0bGU9IkhvdyBhcmUgQUkgYmF0dGxlIHJlc3VsdHMgZGV0ZXJtaW5lZD8iPgogIEFJIGJhdHRsZXMgdXNlIGRldGVybWluaXN0aWMgc3lzdGVtczogLSAqKkZhaXIgQ29tcGV0aXRpb24qKjogQWxsIEFJIG1vZGVscyBmb2xsb3cgdGhlIHNhbWUgcnVsZXMgLSAqKlZlcmlmaWFibGUKICBSZXN1bHRzKio6IEJhdHRsZSBvdXRjb21lcyBhcmUgcmVwcm9kdWNpYmxlIC0gKipBbnRpLU1hbmlwdWxhdGlvbioqOiBNdWx0aXBsZSBzYWZlZ3VhcmRzIHByZXZlbnQgY2hlYXRpbmcgLQogICoqVHJhbnNwYXJlbnQgTG9naWMqKjogQ29yZSBiYXR0bGUgbWVjaGFuaWNzIGFyZSBvcGVuIGZvciByZXZpZXcgUmVzdWx0cyBkZXBlbmQgb24gQUkgbW9kZWwgcXVhbGl0eSwgYXJlbmEtc3BlY2lmaWMKICBjaGFsbGVuZ2VzLCBhbmQgc29tZSBjb250cm9sbGVkIHJhbmRvbW5lc3MgZm9yIGV4Y2l0ZW1lbnQuCjwvQWNjb3JkaW9uPgoKPEFjY29yZGlvbiB0aXRsZT0iQ2FuIEkgaW5mbHVlbmNlIGJhdHRsZSBvdXRjb21lcz8iPgogIFllcywgdGhyb3VnaCB0aGUgKipCb29zdHMgc3lzdGVtKio6IC0gUHVyY2hhc2UgcG93ZXItdXBzIHdpdGggSFlQRVMgZHVyaW5nIGxpdmUgYmF0dGxlcyAtIEJvb3N0cyBwcm92aWRlIHRlbXBvcmFyeQogIGFkdmFudGFnZXMgdG8gc3BlY2lmaWMgQUkgbW9kZWxzIC0gRWZmZWN0cyBhcmUgaW1tZWRpYXRlbHkgdmlzaWJsZSBpbiB0aGUgYmF0dGxlIC0gU3RyYXRlZ2ljIHRpbWluZyBhbmQgYm9vc3QKICBzZWxlY3Rpb24gY2FuIGltcGFjdCByZXN1bHRzIExlYXJuIG1vcmUgaW4gb3VyIFtCb29zdHMgR3VpZGVdKC9oeXBlZHVlbC9ib29zdHMpLgo8L0FjY29yZGlvbj4KCiAgPEFjY29yZGlvbiB0aXRsZT0iV2hhdCBhcmUgdGhlIGJldHRpbmcgbGltaXRzPyI+CiAgICBCZXR0aW5nIGxpbWl0cyBlbnN1cmUgZmFpciBwbGF5OgogICAgCiAgICAqKk1pbmltdW1zKio6CiAgICAtIFN0YW5kYXJkIGFyZW5hczogMTAgSFlQRVMKICAgIC0gUHJlbWl1bSBhcmVuYXM6IDUwIEhZUEVTCiAgICAtIFRvdXJuYW1lbnQgZXZlbnRzOiAxMDAgSFlQRVMKICAgIAogICAgKipNYXhpbXVtcyoqOgogICAgLSBQZXIgYmF0dGxlOiAxMCwwMDAgSFlQRVMKICAgIC0gRGFpbHkgbGltaXQ6IDUwLDAwMCBIWVBFUwogICAgLSBQb29sIHBlcmNlbnRhZ2U6IE1heGltdW0gNTAlIG9mIGN1cnJlbnQgcG9vbAogICAgCiAgICBMaW1pdHMgbWF5IGJlIGFkanVzdGVkIGJhc2VkIG9uIGFyZW5hIHBvcHVsYXJpdHkgYW5kIGNvbW11bml0eSBmZWVkYmFjay4KICA8L0FjY29yZGlvbj4KPC9BY2NvcmRpb25Hcm91cD4KCiMjIFRlY2huaWNhbCAmIFNlY3VyaXR5Cgo8QWNjb3JkaW9uR3JvdXA+CiAgPEFjY29yZGlvbiB0aXRsZT0iSXMgSHlwZUR1ZWwgc2FmZSBhbmQgc2VjdXJlPyI+CiAgICBZZXMhIEh5cGVEdWVsIGltcGxlbWVudHMgbXVsdGlwbGUgc2VjdXJpdHkgbGF5ZXJzOgogICAgCiAgICAqKlNtYXJ0IENvbnRyYWN0IFNlY3VyaXR5Kio6CiAgICAtIFByb2Zlc3Npb25hbCBzZWN1cml0eSBhdWRpdHMgb2YgYWxsIGNvcmUgY29udHJhY3RzCiAgICAtIE11bHRpLXNpZ25hdHVyZSBjb250cm9scyBmb3IgdHJlYXN1cnkgbWFuYWdlbWVudAogICAgLSBFbWVyZ2VuY3kgcGF1c2UgbWVjaGFuaXNtcyBmb3IgdW51c3VhbCBldmVudHMKICAgIAogICAgKipCYXR0bGUgSW50ZWdyaXR5Kio6CiAgICAtIERldGVybWluaXN0aWMgQUkgYmF0dGxlIHJlc3VsdHMKICAgIC0gQW50aS1tYW5pcHVsYXRpb24gZGV0ZWN0aW9uIHN5c3RlbXMKICAgIC0gQ29tbXVuaXR5IHJlcG9ydGluZyBhbmQgdmVyaWZpY2F0aW9uCiAgICAKICAgICoqRmluYW5jaWFsIFNlY3VyaXR5Kio6CiAgICAtIEhZUEVTIGJhY2tlZCAxOjEgYnkgJEIzIHJlc2VydmVzCiAgICAtIFRyYW5zcGFyZW50IHRyZWFzdXJ5IG9wZXJhdGlvbnMgb24tY2hhaW4KICAgIC0gSW5zdXJhbmNlIHJlc2VydmVzIGZvciBleGNlcHRpb25hbCBjaXJjdW1zdGFuY2VzCiAgPC9BY2NvcmRpb24+Cgo8QWNjb3JkaW9uIHRpdGxlPSJXaGF0IGJsb2NrY2hhaW4gZG9lcyBIeXBlRHVlbCB1c2U/Ij4KICBIeXBlRHVlbCBvcGVyYXRlcyBvbiAqKkJhc2UqKiwgQ29pbmJhc2UncyBMYXllciAyIEV0aGVyZXVtIG5ldHdvcms6IC0gKipGYXN0IHRyYW5zYWN0aW9ucyoqOiBOZWFyLWluc3RhbnQKICBjb25maXJtYXRpb25zIC0gKipMb3cgZmVlcyoqOiBNaW5pbWFsIGdhcyBjb3N0cyBmb3IgYmxvY2tjaGFpbiBvcGVyYXRpb25zIC0gKipFdGhlcmV1bSBzZWN1cml0eSoqOiBJbmhlcml0cyBFdGhlcmV1bSdzCiAgc2VjdXJpdHkgZ3VhcmFudGVlcyAtICoqRWFzeSBvbmJvYXJkaW5nKio6IENvaW5iYXNlIGludGVncmF0aW9uIGZvciBuZXcgdXNlcnMgRnV0dXJlIGV4cGFuc2lvbiB0byBvdGhlciBjaGFpbnMgaXMKICBwbGFubmVkIGJhc2VkIG9uIGNvbW11bml0eSBkZW1hbmQuCjwvQWNjb3JkaW9uPgoKICA8QWNjb3JkaW9uIHRpdGxlPSJXaGF0IGlmIHRoZXJlJ3MgYSB0ZWNobmljYWwgcHJvYmxlbSBkdXJpbmcgYSBtYXRjaD8iPgogICAgVGVjaG5pY2FsIGlzc3VlcyBhcmUgaGFuZGxlZCB0aHJvdWdoIGVzdGFibGlzaGVkIHByb3RvY29sczoKICAgIAogICAgKipNaW5vciBJc3N1ZXMqKjoKICAgIC0gQXV0b21hdGljIHJldHJ5IG1lY2hhbmlzbXMKICAgIC0gUmVhbC10aW1lIG1vbml0b3JpbmcgYW5kIGFsZXJ0cwogICAgLSBRdWljayByZXNvbHV0aW9uIHdpdGggbWluaW1hbCBkaXNydXB0aW9uCiAgICAKICAgICoqTWFqb3IgSXNzdWVzKio6CiAgICAtIE1hdGNoIG1heSBiZSBwYXVzZWQgb3IgcmVzdGFydGVkCiAgICAtIEFsbCBiZXRzIHJlZnVuZGVkIGlmIG1hdGNoIGNhbm5vdCBjb21wbGV0ZQogICAgLSBEZXRhaWxlZCBpbmNpZGVudCByZXBvcnRzIHByb3ZpZGVkIHRvIGNvbW11bml0eQogICAgLSBJbnN1cmFuY2UgcmVzZXJ2ZXMgYXZhaWxhYmxlIGZvciBjb21wZW5zYXRpb24KICAgIAogICAgKipDb21tdW5pY2F0aW9uKio6CiAgICAtIFJlYWwtdGltZSBzdGF0dXMgdXBkYXRlcyBvbiBwbGF0Zm9ybQogICAgLSBEaXNjb3JkIGFubm91bmNlbWVudHMgZm9yIG1ham9yIGlzc3VlcwogICAgLSBQb3N0LWluY2lkZW50IGFuYWx5c2lzIGFuZCBpbXByb3ZlbWVudCBwbGFucwogIDwvQWNjb3JkaW9uPgo8L0FjY29yZGlvbkdyb3VwPgoKIyMgQXJlbmEgQ3JlYXRpb24gJiBJbnZlc3RtZW50Cgo8QWNjb3JkaW9uR3JvdXA+CiAgPEFjY29yZGlvbiB0aXRsZT0iQ2FuIEkgY3JlYXRlIG15IG93biBhcmVuYT8iPgogICAgWWVzISBBcmVuYSBjcmVhdGlvbiBpcyBvcGVuIHRvIGRldmVsb3BlcnM6CiAgICAKICAgICoqUmVxdWlyZW1lbnRzKio6CiAgICAtIFRlY2huaWNhbCBhYmlsaXR5IHRvIGJ1aWxkIGFyZW5hIGVudmlyb25tZW50cwogICAgLSBBSSBtb2RlbHMgb3IgcGFydG5lcnNoaXBzIHdpdGggQUkgZGV2ZWxvcGVycwogICAgLSBDb21tdW5pdHkgYnVpbGRpbmcgYW5kIG1hcmtldGluZyBjYXBhYmlsaXRpZXMKICAgIC0gVW5kZXJzdGFuZGluZyBvZiBIeXBlRHVlbCdzIGVjb25vbWljIG1vZGVsCiAgICAKICAgICoqUHJvY2VzcyoqOgogICAgMS4gU3VibWl0IGFyZW5hIHByb3Bvc2FsIHRvIGNvbW11bml0eQogICAgMi4gVGVjaG5pY2FsIHJldmlldyBhbmQgYXBwcm92YWwgcHJvY2VzcwogICAgMy4gTGF1bmNoIGJvbmRpbmcgcGhhc2UgZm9yIGNvbW11bml0eSBmdW5kaW5nCiAgICA0LiBPbmdvaW5nIGRldmVsb3BtZW50IGFuZCBjb21tdW5pdHkgbWFuYWdlbWVudAogICAgCiAgICBTZWUgb3VyIFtBcmVuYSBDcmVhdGlvbiBHdWlkZV0oL2h5cGVkdWVsL2FyZW5hLWNyZWF0aW9uKSBmb3IgZGV0YWlscy4KICA8L0FjY29yZGlvbj4KCjxBY2NvcmRpb24gdGl0bGU9IkhvdyBkbyBJIGV2YWx1YXRlIHdoaWNoIEFyZW5hQ29pbnMgdG8gYnV5PyI+CiAgUmVzZWFyY2ggdGhlc2Uga2V5IGZhY3RvcnMgYmVmb3JlIGludmVzdGluZzogKipBcmVuYSBRdWFsaXR5Kio6IC0gVW5pcXVlIGFuZCBlbmdhZ2luZyBnYW1lcGxheSBtZWNoYW5pY3MgLQogIEhpZ2gtcXVhbGl0eSBBSSBtb2RlbCBjb21wZXRpdGlvbiAtIFN0cm9uZyB2aXN1YWwgYW5kIHRlY2huaWNhbCBleGVjdXRpb24gLSBBY3RpdmUgY29tbXVuaXR5IGFuZCByZWd1bGFyIHVwZGF0ZXMKICAqKkNyZWF0b3IgVHJhY2sgUmVjb3JkKio6IC0gUHJldmlvdXMgc3VjY2Vzc2Z1bCBwcm9qZWN0cyAtIFRlY2huaWNhbCBleHBlcnRpc2UgYW5kIGNvbW1pdG1lbnQgLSBDb21tdW5pdHkgZW5nYWdlbWVudAogIGFuZCBjb21tdW5pY2F0aW9uIC0gQ2xlYXIgcm9hZG1hcCBhbmQgdmlzaW9uICoqTWFya2V0IE1ldHJpY3MqKjogLSBEYWlseSBhY3RpdmUgdXNlcnMgYW5kIGVuZ2FnZW1lbnQgLSBCZXR0aW5nIHZvbHVtZQogIGFuZCByZXZlbnVlIGdyb3d0aCAtIFRva2VuIGhvbGRlciBkaXN0cmlidXRpb24gLSBTb2NpYWwgbWVkaWEgYWN0aXZpdHkgYW5kIHNlbnRpbWVudCBBbHdheXMgZG8geW91ciBvd24gcmVzZWFyY2ggYW5kCiAgbmV2ZXIgaW52ZXN0IG1vcmUgdGhhbiB5b3UgY2FuIGFmZm9yZCB0byBsb3NlLgo8L0FjY29yZGlvbj4KCiAgPEFjY29yZGlvbiB0aXRsZT0iV2hhdCdzIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gYm9uZGluZyBwaGFzZSBhbmQgREVYIHRyYWRpbmc/Ij4KICAgIEFyZW5hQ29pbnMgZ28gdGhyb3VnaCB0d28gZGlzdGluY3QgcGhhc2VzOgogICAgCiAgICAqKkJvbmRpbmcgUGhhc2UqKiAoRWFybHkgU3RhZ2UpOgogICAgLSBCdXkvc2VsbCBkaXJlY3RseSB3aXRoIGJvbmRpbmcgY3VydmUgcHJpY2luZwogICAgLSBQcmljZSBpbmNyZWFzZXMgbWF0aGVtYXRpY2FsbHkgd2l0aCBkZW1hbmQKICAgIC0gR3VhcmFudGVlZCBsaXF1aWRpdHkgZnJvbSB0aGUgY3VydmUKICAgIC0gRWFybHkgaW52ZXN0b3IgYWR2YW50YWdlcwogICAgCiAgICAqKkRFWCBUcmFkaW5nKiogKEFmdGVyIEdyYWR1YXRpb24pOgogICAgLSBUcmFkZSBvbiBVbmlzd2FwIHdpdGggJEIzIHBhaXJzCiAgICAtIE1hcmtldC1kcml2ZW4gcHJpY2UgZGlzY292ZXJ5CiAgICAtIEhpZ2hlciBsaXF1aWRpdHkgYW5kIHZvbHVtZQogICAgLSBBZHZhbmNlZCB0cmFkaW5nIGZlYXR1cmVzIGF2YWlsYWJsZQogICAgCiAgICBNb3N0IHN1Y2Nlc3NmdWwgYXJlbmFzIGdyYWR1YXRlIGZyb20gYm9uZGluZyB0byBERVggdHJhZGluZyB3aXRoaW4gMS0zIG1vbnRocy4KICA8L0FjY29yZGlvbj4KPC9BY2NvcmRpb25Hcm91cD4KCiMjIFBsYXRmb3JtIEZlYXR1cmVzCgo8QWNjb3JkaW9uR3JvdXA+CiAgPEFjY29yZGlvbiB0aXRsZT0iSXMgdGhlcmUgYSBsZWFkZXJib2FyZCBzeXN0ZW0/Ij4KICAgIFllcyEgTXVsdGlwbGUgbGVhZGVyYm9hcmRzIHRyYWNrIGRpZmZlcmVudCBhY2hpZXZlbWVudHM6CiAgICAKICAgICoqUGxheWVyIFJhbmtpbmdzKiogKFtoeXBlZHVlbC5jb20vbGVhZGVyYm9hcmRdKGh0dHBzOi8vaHlwZWR1ZWwuY29tL2xlYWRlcmJvYXJkKSk6CiAgICAtIFRvcCB3aW5uZXJzIGJ5IHRvdGFsIHByb2ZpdHMKICAgIC0gQmVzdCB3aW4gcmF0ZXMgYWNyb3NzIGFsbCBhcmVuYXMKICAgIC0gSGlnaGVzdCBzaW5nbGUtbWF0Y2ggd2lubmluZ3MKICAgIC0gTW9zdCBzdWNjZXNzZnVsIGJvb3N0IHVzZXJzCiAgICAKICAgICoqQXJlbmEgUmFua2luZ3MqKjoKICAgIC0gTW9zdCBwb3B1bGFyIGFyZW5hcyBieSBiZXR0aW5nIHZvbHVtZQogICAgLSBIaWdoZXN0IHJldmVudWUtZ2VuZXJhdGluZyBhcmVuYXMKICAgIC0gRmFzdGVzdC1ncm93aW5nIGNvbW11bml0aWVzCiAgICAtIEJlc3QtcGVyZm9ybWluZyBBcmVuYUNvaW5zCiAgICAKICAgICoqQUkgTW9kZWwgUmFua2luZ3MqKjoKICAgIC0gV2luIHJhdGVzIGJ5IGFyZW5hIHR5cGUKICAgIC0gTW9zdCBpbXByb3ZlZCBtb2RlbHMKICAgIC0gQ29tbXVuaXR5IGZhdm9yaXRlcwogICAgLSBUZWNobmljYWwgcGVyZm9ybWFuY2UgbWV0cmljcwogIDwvQWNjb3JkaW9uPgoKPEFjY29yZGlvbiB0aXRsZT0iV2lsbCB0aGVyZSBiZSByZWZlcnJhbHMgYW5kIHJld2FyZHM/Ij4KICBZZXMhIEEgY29tcHJlaGVuc2l2ZSByZWZlcnJhbCBzeXN0ZW0gaXMgcGxhbm5lZDogKipSZWZlcnJhbCBCZW5lZml0cyoqOiAtIEVhcm4gcGVyY2VudGFnZSBvZiBmcmllbmRzJyBiZXR0aW5nIGZlZXMgLQogIEJvbnVzIEhZUEVTIGZvciBzdWNjZXNzZnVsIHJlZmVycmFscyAtIFNwZWNpYWwgcmVjb2duaXRpb24gYW5kIGJhZGdlcyAtIEV4Y2x1c2l2ZSBhY2Nlc3MgdG8gbmV3IGZlYXR1cmVzICoqTG95YWx0eQogIFJld2FyZHMqKjogLSBEYWlseSBsb2dpbiBib251c2VzIC0gVm9sdW1lLWJhc2VkIHRpZXIgcmV3YXJkcyAtIEFjaGlldmVtZW50IHVubG9ja3MgYW5kIHByaXplcyAtIENvbW11bml0eSBldmVudAogIHBhcnRpY2lwYXRpb24gcmV3YXJkcyAqTGF1bmNoIHBsYW5uZWQgZm9yIFExIDIwMjQgLSBqb2luIERpc2NvcmQgZm9yIGVhcmx5IGFjY2VzcyoKPC9BY2NvcmRpb24+CgogIDxBY2NvcmRpb24gdGl0bGU9IkNhbiBJIHVzZSBIeXBlRHVlbCBvbiBtb2JpbGU/Ij4KICAgIEN1cnJlbnRseSBIeXBlRHVlbCBpcyBvcHRpbWl6ZWQgZm9yIG1vYmlsZSB3ZWIgYnJvd3NlcnM6CiAgICAtICoqTW9iaWxlIFdlYioqOiBGdWxsIGZ1bmN0aW9uYWxpdHkgb24gcGhvbmUgYnJvd3NlcnMKICAgIC0gKipSZXNwb25zaXZlIERlc2lnbioqOiBBZGFwdHMgdG8gYW55IHNjcmVlbiBzaXplCiAgICAtICoqVG91Y2ggT3B0aW1pemVkKio6IEVhc3kgYmV0dGluZyBhbmQgYm9vc3QgY29udHJvbHMKICAgIC0gKipGYXN0IExvYWRpbmcqKjogT3B0aW1pemVkIGZvciBtb2JpbGUgY29ubmVjdGlvbnMKICAgIAogICAgKipOYXRpdmUgQXBwcyBDb21pbmcqKjoKICAgIC0gaU9TIGFwcCBwbGFubmVkIGZvciBRMiAyMDI0CiAgICAtIEFuZHJvaWQgYXBwIHBsYW5uZWQgZm9yIFEyIDIwMjQKICAgIC0gUHVzaCBub3RpZmljYXRpb25zIGZvciBtYXRjaCByZXN1bHRzCiAgICAtIE9mZmxpbmUgdmlld2luZyBvZiBiYXR0bGUgaGlzdG9yeQogIDwvQWNjb3JkaW9uPgo8L0FjY29yZGlvbkdyb3VwPgoKIyMgVHJvdWJsZXNob290aW5nCgo8QWNjb3JkaW9uR3JvdXA+CiAgPEFjY29yZGlvbiB0aXRsZT0iTXkgYmV0IGRpZG4ndCBnbyB0aHJvdWdoIC0gd2hhdCBoYXBwZW5lZD8iPgogICAgQ29tbW9uIHJlYXNvbnMgYmV0cyBmYWlsOgogICAgCiAgICAqKkluc3VmZmljaWVudCBCYWxhbmNlKio6CiAgICAtIENoZWNrIHlvdXIgSFlQRVMgYmFsYW5jZQogICAgLSBEZXBvc2l0IG1vcmUgZnVuZHMgaWYgbmVlZGVkCiAgICAKICAgICoqTWF0Y2ggQWxyZWFkeSBTdGFydGVkKio6CiAgICAtIEJldHRpbmcgY2xvc2VzIDE1LTYwIHNlY29uZHMgYmVmb3JlIG1hdGNoIHN0YXJ0CiAgICAtIFdhaXQgZm9yIHRoZSBuZXh0IG1hdGNoIGluIHRoZSBhcmVuYQogICAgCiAgICAqKlRlY2huaWNhbCBJc3N1ZXMqKjoKICAgIC0gUmVmcmVzaCB0aGUgcGFnZSBhbmQgdHJ5IGFnYWluCiAgICAtIENoZWNrIHlvdXIgaW50ZXJuZXQgY29ubmVjdGlvbgogICAgLSBDbGVhciBicm93c2VyIGNhY2hlIGlmIHByb2JsZW1zIHBlcnNpc3QKICAgIAogICAgKipBcmVuYSBNYWludGVuYW5jZSoqOgogICAgLSBTb21lIGFyZW5hcyBtYXkgYmUgdGVtcG9yYXJpbHkgb2ZmbGluZQogICAgLSBDaGVjayBhcmVuYSBzdGF0dXMgaW5kaWNhdG9ycwogICAgLSBUcnkgYSBkaWZmZXJlbnQgYXJlbmEKICAgIAogICAgSWYgcHJvYmxlbXMgcGVyc2lzdCwgY29udGFjdCBzdXBwb3J0IHRocm91Z2ggRGlzY29yZC4KICA8L0FjY29yZGlvbj4KCjxBY2NvcmRpb24gdGl0bGU9IkkgY2FuJ3Qgc2VlIG15IHdpbm5pbmdzIC0gd2hlcmUgYXJlIHRoZXk/Ij4KICBXaW5uaW5ncyBzaG91bGQgYXBwZWFyIGF1dG9tYXRpY2FsbHk6ICoqTm9ybWFsIFByb2Nlc3MqKjogLSBXaW5uaW5ncyBjcmVkaXRlZCB3aXRoaW4gMzAgc2Vjb25kcyBvZiBtYXRjaCBlbmQgLSBDaGVjawogIHlvdXIgSFlQRVMgYmFsYW5jZSBpbiBhY2NvdW50IGRhc2hib2FyZCAtIFJldmlldyB0cmFuc2FjdGlvbiBoaXN0b3J5IGZvciBjb25maXJtYXRpb24gKipJZiBNaXNzaW5nKio6IC0gUmVmcmVzaCB0aGUKICBwYWdlIGFuZCB3YWl0IHVwIHRvIDIgbWludXRlcyAtIENoZWNrIHRoYXQgeW91IGJldCBvbiB0aGUgd2lubmluZyBBSSAtIFZlcmlmeSBtYXRjaCBhY3R1YWxseSBjb21wbGV0ZWQgKHdhc24ndAogIGNhbmNlbGxlZCkgLSBDb250YWN0IHN1cHBvcnQgd2l0aCBtYXRjaCBkZXRhaWxzIGlmIHN0aWxsIG1pc3NpbmcgQWxsIHRyYW5zYWN0aW9ucyBhcmUgcmVjb3JkZWQgb24tY2hhaW4gZm9yCiAgdmVyaWZpY2F0aW9uLgo8L0FjY29yZGlvbj4KCiAgPEFjY29yZGlvbiB0aXRsZT0iVGhlIGFyZW5hIHNlZW1zIGZyb3plbiAtIHdoYXQgc2hvdWxkIEkgZG8/Ij4KICAgIEFyZW5hIGRpc3BsYXkgaXNzdWVzIGFyZSB1c3VhbGx5IHRlbXBvcmFyeToKICAgIAogICAgKipRdWljayBGaXhlcyoqOgogICAgLSBSZWZyZXNoIHRoZSBicm93c2VyIHBhZ2UKICAgIC0gQ2hlY2sgeW91ciBpbnRlcm5ldCBjb25uZWN0aW9uCiAgICAtIFRyeSBhIGRpZmZlcmVudCBicm93c2VyCiAgICAtIERpc2FibGUgYnJvd3NlciBleHRlbnNpb25zIHRlbXBvcmFyaWx5CiAgICAKICAgICoqQXJlbmEgU3RhdHVzKio6CiAgICAtIEFyZW5hIG1heSBiZSBiZXR3ZWVuIG1hdGNoZXMgKGNoZWNrIGNvdW50ZG93biB0aW1lcikKICAgIC0gTWFpbnRlbmFuY2UgbWF5IGJlIGluIHByb2dyZXNzCiAgICAtIENoZWNrIERpc2NvcmQgZm9yIGFubm91bmNlbWVudHMKICAgIAogICAgKipQZXJzaXN0ZW50IElzc3VlcyoqOgogICAgLSBUcnkgYWNjZXNzaW5nIGEgZGlmZmVyZW50IGFyZW5hCiAgICAtIFJlcG9ydCB0aGUgaXNzdWUgaW4gY29tbXVuaXR5IERpc2NvcmQKICAgIC0gQ2hlY2sgcGxhdGZvcm0gc3RhdHVzIHBhZ2UgZm9yIGtub3duIGlzc3VlcwogIDwvQWNjb3JkaW9uPgo8L0FjY29yZGlvbkdyb3VwPgoKIyMgQ29tbXVuaXR5ICYgU3VwcG9ydAoKPEFjY29yZGlvbkdyb3VwPgogIDxBY2NvcmRpb24gdGl0bGU9IkhvdyBjYW4gSSBnZXQgaGVscCBvciByZXBvcnQgaXNzdWVzPyI+CiAgICBNdWx0aXBsZSBzdXBwb3J0IGNoYW5uZWxzIGF2YWlsYWJsZToKICAgIAogICAgKipEaXNjb3JkIENvbW11bml0eSoqOiBSZWFsLXRpbWUgaGVscCBmcm9tIGNvbW11bml0eSBhbmQgdGVhbQogICAgKipEb2N1bWVudGF0aW9uKio6IENvbXByZWhlbnNpdmUgZ3VpZGVzIGFuZCB0dXRvcmlhbHMKICAgICoqUGxhdGZvcm0gU3RhdHVzKio6IENoZWNrIGZvciBrbm93biBpc3N1ZXMgYW5kIG1haW50ZW5hbmNlCiAgICAqKkJ1ZyBSZXBvcnRzKio6IFN1Ym1pdCB0ZWNobmljYWwgaXNzdWVzIHRocm91Z2ggRGlzY29yZAogICAgCiAgICAqKlJlc3BvbnNlIFRpbWVzKio6CiAgICAtIERpc2NvcmQ6IFVzdWFsbHkgd2l0aGluIDEtMiBob3VycwogICAgLSBDcml0aWNhbCBpc3N1ZXM6IEltbWVkaWF0ZSBhdHRlbnRpb24KICAgIC0gRmVhdHVyZSByZXF1ZXN0czogV2Vla2x5IGNvbW11bml0eSByZXZpZXcKICA8L0FjY29yZGlvbj4KCjxBY2NvcmRpb24gdGl0bGU9IkhvdyBjYW4gSSBzdGF5IHVwZGF0ZWQgb24gbmV3IGZlYXR1cmVzPyI+CiAgU3RheSBpbmZvcm1lZCB0aHJvdWdoIG11bHRpcGxlIGNoYW5uZWxzOiAqKk9mZmljaWFsIENoYW5uZWxzKio6IC0gRGlzY29yZCBhbm5vdW5jZW1lbnRzIC0gUGxhdGZvcm0gbm90aWZpY2F0aW9ucyAtCiAgRW1haWwgdXBkYXRlcyAob3B0LWluKSAqKkNvbW11bml0eSBDaGFubmVscyoqOiAtIERpc2NvcmQgZ2VuZXJhbCBjaGF0IC0gUmVkZGl0IGNvbW11bml0eSAtIENvbW11bml0eS1jcmVhdGVkIGNvbnRlbnQgLQogIEFyZW5hLXNwZWNpZmljIGNoYW5uZWxzICoqRGV2ZWxvcG1lbnQgVXBkYXRlcyoqOiAtIE1vbnRobHkgZGV2ZWxvcG1lbnQgYmxvZ3MgLSBRdWFydGVybHkgcm9hZG1hcCB1cGRhdGVzIC0gRmVhdHVyZQogIHZvdGluZyBhbmQgZmVlZGJhY2sgLSBCZXRhIHRlc3Rpbmcgb3Bwb3J0dW5pdGllcwo8L0FjY29yZGlvbj4KCiAgPEFjY29yZGlvbiB0aXRsZT0iQ2FuIEkgcHJvdmlkZSBmZWVkYmFjayBvciBzdWdnZXN0IGZlYXR1cmVzPyI+CiAgICBBYnNvbHV0ZWx5ISBDb21tdW5pdHkgaW5wdXQgZHJpdmVzIGRldmVsb3BtZW50OgogICAgCiAgICAqKkZlZWRiYWNrIENoYW5uZWxzKio6CiAgICAtIERpc2NvcmQgI2ZlZWRiYWNrIGNoYW5uZWwKICAgIC0gQ29tbXVuaXR5IGdvdmVybmFuY2Ugdm90ZXMKICAgIC0gQXJlbmEtc3BlY2lmaWMgc3VnZ2VzdGlvbnMKICAgIC0gRGlyZWN0IGRldmVsb3BlciBjb21tdW5pY2F0aW9uCiAgICAKICAgICoqRmVhdHVyZSBSZXF1ZXN0cyoqOgogICAgLSBTdWJtaXQgaWRlYXMgdGhyb3VnaCBEaXNjb3JkCiAgICAtIENvbW11bml0eSB2b3Rpbmcgb24gcHJvcG9zYWxzCiAgICAtIFRlY2huaWNhbCBmZWFzaWJpbGl0eSByZXZpZXcKICAgIC0gSW1wbGVtZW50YXRpb24gcGxhbm5pbmcKICAgIAogICAgKipCdWcgUmVwb3J0cyoqOgogICAgLSBEZXRhaWxlZCBpc3N1ZSBkZXNjcmlwdGlvbnMKICAgIC0gU3RlcHMgdG8gcmVwcm9kdWNlIHByb2JsZW1zCiAgICAtIFNjcmVlbnNob3RzIG9yIHNjcmVlbiByZWNvcmRpbmdzCiAgICAtIFN5c3RlbSBpbmZvcm1hdGlvbgogICAgCiAgICBUaGUgYmVzdCBzdWdnZXN0aW9ucyBvZnRlbiBiZWNvbWUgcGxhdGZvcm0gZmVhdHVyZXMhCiAgPC9BY2NvcmRpb24+CjwvQWNjb3JkaW9uR3JvdXA+Cg==",
    "lastUpdated": "2025-09-03T02:42:44.616Z"
  },
  {
    "sourceFile": "hypeduel/developers.mdx",
    "sourceHash": "CjxpbWcgc3JjPSIvaW1hZ2VzL2h5cGVkdWVsLWFyZW5hY29pbnMtdG9rZW5vbWljcy5wbmciIGNsYXNzTmFtZT0idy1mdWxsIHJvdW5kZWQteGwgbWItNiIgLz4KCkh5cGVEdWVsIEFyZW5hcyBhcmUgYnVpbHQgaW4gVW5pdHksIHdpdGggZWFjaCBhcmVuYSBoYXZpbmcgb25lIHNlcnZlciBoZWFkbGVzcyBidWlsZCB0aGF0IHJ1bnMgb24gdGhlIEh5cGVEdWVsIHNlcnZlcnMgYW5kIHNpbXVsYXRlcyB0aGUgZHVlbCBpbiByZWFsIHRpbWUsIGFuZCBvbmUgd2ViR0wgYnVpbGQgd2hpY2ggcnVucyBvbiB0aGUgY2xpZW50c2lkZSBhbmQgcmVjZWl2ZXMgdGhlIHN0cmVhbWVkIHNpbXVsYXRpb24gZGF0YSB0byBwbGF5YmFjay4KCltDb250YWN0IHVzIHRvIGFkZCB5b3VyIGdhbWVdKGh0dHBzOi8vYjNidWlsZGVycy50eXBlZm9ybS5jb20vaHlwZWR1ZWwpCgojIyBVbml0eSBTREsKCldlIG9mZmVyIGEgdW5pdHkgU0RLIHRvIGZhc2NpbGxpdGF0ZSB0aGUgY3JlYXRpb24gb2YgYXJlbmFzLiBXaGF0IGZvbGxvd3MgaXMgYW4gb3ZlcnZpZXcgb2YgdGhlIHN0ZXBzIHJlcXVpcmVkIHRvIGludGVncmF0ZSB0aGUgU0RLIGFuZCBjcmVhdGUgdGhlIGFyZW5hIGluIHVuaXR5LgoKLSBDcmVhdGUgeW91ciBzZXJ2ZXItc2lkZSBzY2VuZS4KICAtIFNldHVwIHlvdXIgZW52aXJvbm1lbnQsIGdhbWVwbGF5IG1lY2hhbmljcywgYW5kIHRyYWluIHlvdXIgYWdlbnRzIHdpdGggdW5pdHkgbWwtYWdlbnRzCiAgLSBTZXR1cCAqKkh5cGVEdWVsUmVjb3JkZXIgKip0byB0cmFjayB5b3VyIG1haW4gc2NlbmUgb2JqZWN0cyBpbiBzcGFjZS4KICAtIENhbGwgdGhlIHJlY29yZGVyJ3MgKipQdXNoU3RhdGVDaGFuZ2UgKiptZXRob2QgdG8gc3RyZWFtIGFueSBzdGF0ZSBkYXRhIHRvIHRoZSBjbGllbnRzLgogICAgLSBTZXQgdGhlIHN0YXRlIHNjb3JlcyBwcm9wZXJ0eSBpbiBvcmRlciBmb3IgdGhlIHNlcnZlciB0byBiZSBhYmxlIHRvIGRldGVjdCB0aGUgbWF0Y2gncyBwcm9ncmVzcyBhbmQgcmVzb2x1dGlvbiBhdCB0aGUgZW5kLgogIC0gQnVpbGQgZm9yIExpbnV4IERlZGljYXRlZCBTZXJ2ZXIgYW5kIHVwbG9hZCB5b3VyIGJ1aWxkIHRvIGh5cGVkdWVsLgotIENyZWF0ZSB5b3VyIGNsaWVudC1zaWRlIHNjZW5lLgogIC0gRHVwbGljYXRlIG9mIHRoZSBzZXJ2ZXIgc2lkZSwgYnV0IHdpdGggZ3JhcGhpY3MgYW5kIHdpdGhvdXQgdGhlIGFnZW50IGxvZ2ljLgogIC0gVGhlICoqSHlwZUR1ZWxSZWNvcmRlciAqKndpbGwgYXV0b21hdGljYWxseSBwbGF5YmFjayB0aGUgcG9zaXRpb25zIG9mIHlvdXIgbWFpbiBzY2VuZSBvYmplY3RzCiAgLSBMaXN0ZW4gdG8gZXZlbnRzIG9mIHRoZSAqKkh5cGVEdWVsQ2xpZW50ICoqaW5zdGFuY2UgdG8gdXNlIHlvdXIgc3RhdGUgY2hhbmdlcyB0byBtYW5hZ2UgdGhlIFVJIGFuZCBncmFwaGljYWwgZWxlbWVudHMgb2YgeW91ciBnYW1lLgoKRklORCBUSEUgVU5JVFkgU0RLIE9OIFtHaXRIdWJdKGh0dHBzOi8vZ2l0aHViLmNvbS9iMy1mdW4vaHlwZWR1ZWwtdW5pdHkpCi0gSW50ZWdyYXRpb24gZ3VpZGUgYW5kIGZ1cnRoZXIgZG9jdW1lbnRhdGlvbiBvbiByZWFkbWUubWQKCiAgCiMjICBIb3cgaXQgV29ya3MKCldoZW4gYSBtYXRjaCBiZWdpbnMgb24gSHlwZUR1ZWwsIHdlIHJ1biB0aGUgYXJlbmEncyBzZXJ2ZXIgYnVpbGQgd2hpY2ggc2VuZHMgYmFjayByZWFsdGltZSBkYXRhIGZyb20gdGhlIHNpbXVsYXRpb24uIENsaWVudHMgb24gdGhlIHdlYnNpdGUgYXJlIHJ1bm5pbmcgdGhlaXIgb3duIHdlYkdMIHZlcnNpb25zIG9mIHRoZSBhcmVuYSAodGhlIGNsaWVudC1zaWRlIGJ1aWxkKSBhbmQgY29ubmVjdCB0byBvdXIgQVBJIHdoaWNoIHN0cmVhbXMgYWxsIHRoZSBzaW11bGF0aW9uIGRhdGEsIHdoaWNoIGlzIHRoZW4gdXNlZCBpbiB1bml0eSB0byByZWNyZWF0ZSB0aGUgZXhhY3Qgc2FtZSBzY2VuZS4KCmBgYG1lcm1haWQKZ3JhcGggVEQKICAgIEFbIlVuaXR5IFNESzxici8+4pqZ77iPIl0gLS0+IEJbIlNlcnZlciBTY2VuZTxici8+8J+Wpe+4jyJdCiAgICBBIC0tPiBDWyJDbGllbnQgU2NlbmU8YnIvPvCfjq4iXQoKICAgIEIgLS0+IEVbIk1MLUFnZW50cyAmIEdhbWVwbGF5IExvZ2ljIl0KICAgIEIgLS0+IEZbIlJlY29yZGVyIFRyYWNraW5nIl0KICAgIEIgLS0+IEdbIlB1c2hTdGF0ZUNoYW5nZTxici8+KyBTY29yZXMiXQoKICAgIEMgLS0+IEhbIkR1cGxpY2F0ZSBTY2VuZSJdCiAgICBDIC0tPiBJWyJSZWNvcmRlciBQbGF5YmFjayJdCiAgICBDIC0tPiBKWyJDbGllbnQgRXZlbnRzIOKGkiBVSSJdCmBgYAo=",
    "lastUpdated": "2025-10-31T02:24:54.868Z"
  },
  {
    "sourceFile": "hypeduel/boosts.mdx",
    "sourceHash": "ClRoZSBCb29zdHMgc3lzdGVtIHRyYW5zZm9ybXMgSHlwZUR1ZWwgZnJvbSBwYXNzaXZlIHZpZXdpbmcgdG8gYWN0aXZlIHBhcnRpY2lwYXRpb24uIFB1cmNoYXNlIHNpbmdsZS11c2UgcG93ZXItdXBzIHdpdGggSFlQRVMgdG9rZW5zIHRvIGRpcmVjdGx5IGluZmx1ZW5jZSBBSSBiYXR0bGUgb3V0Y29tZXMgd2hpbGUgbWF0Y2hlcyBhcmUgaGFwcGVuaW5nLgoKIyMgV2hhdCBBcmUgQm9vc3RzPwoKKipCb29zdHMqKiBhcmUgcmVhbC10aW1lIHBvd2VyLXVwcyB0aGF0IHByb3ZpZGUgdGVtcG9yYXJ5LCByYW5kb20gYWR2YW50YWdlcyB0byBzb21lL2FsbCBBSSBjb21wZXRpdG9ycyBkdXJpbmcgYmF0dGxlcy4gVW5saWtlIGJldHRpbmcgKHdoaWNoIGlzIHBhc3NpdmUpLCBib29zdHMgbGV0IHlvdSBhY3RpdmVseSBwYXJ0aWNpcGF0ZSBpbiB0aGUgY29tcGV0aXRpb24gYXMgaXQgdW5mb2xkcy4KCiMjIyBLZXkgQ2hhcmFjdGVyaXN0aWNzCgotICoqU2luZ2xlLVVzZSoqOiBFYWNoIGJvb3N0IGNhbiBvbmx5IGJlIHVzZWQgb25jZSBwZXIgYmF0dGxlCi0gKipSZWFsLVRpbWUqKjogRGVwbG95IGR1cmluZyBsaXZlIG1hdGNoZXMgZm9yIGltbWVkaWF0ZSBlZmZlY3QKLSAqKkxpbWl0ZWQgQXZhaWxhYmlsaXR5Kio6IEZpbml0ZSBxdWFudGl0aWVzIGNyZWF0ZSBzdHJhdGVnaWMgc2NhcmNpdHkKLSAqKkFyZW5hLVNwZWNpZmljKio6IERpZmZlcmVudCBib29zdCB0eXBlcyBmb3IgZWFjaCBhcmVuYSBlbnZpcm9ubWVudAoKIyMgSG93IHRvIFVzZSBCb29zdHMKCiMjIyBQdXJjaGFzaW5nIEJvb3N0cwoKPFN0ZXBzPgogIDxTdGVwIHRpdGxlPSJFbnRlciBBcmVuYSI+TmF2aWdhdGUgdG8gYW4gYWN0aXZlIGJhdHRsZSBhcmVuYSB3aXRoIGxpdmUgbWF0Y2hlczwvU3RlcD4KICA8U3RlcCB0aXRsZT0iU2VsZWN0IGEgQm9vc3QiPkJvb3N0cyBhcmUgZGlzcGxheWVkIGJlbG93IHRoZSBsaXZlIGdhbWUgc2NyZWVuPC9TdGVwPgogIDxTdGVwIHRpdGxlPSJDb25maXJtIFB1cmNoYXNlIj5QYXkgSFlQRVMgY29zdCBhbmQgYm9vc3RzIGFyZSBhZGRlZCB0byB5b3VyIGludmVudG9yeTwvU3RlcD4KPC9TdGVwcz4KCiMjIEJvb3N0IEVjb25vbWljcwoKIyMjIFJldmVudWUgRGlzdHJpYnV0aW9uCgpCb29zdCBwdXJjaGFzZXMgZ2VuZXJhdGUgcmV2ZW51ZSBzaGFyZWQgYmV0d2VlbiBhcmVuYSBzdGFrZWhvbGRlcnM6CgpgYGAKQm9vc3QgUHVyY2hhc2U6IDEwMCUK4pSc4pSA4pSAIDUwJSDihpIgQXJlbmEgVHJlYXN1cnkgKHRva2VuIGJ1eWJhY2tzKQrilJTilIDilIAgNTAlIOKGkiBBcmVuYSBDcmVhdG9yIChkZXZlbG9wbWVudCBpbmNlbnRpdmUpCmBgYAoKIyMjIEVjb25vbWljIE9wdGltaXphdGlvbgoKU21hcnQgYm9vc3QgdXNhZ2UgY2FuIGltcHJvdmUgUk9JOgoKMS4gKipWYWx1ZSBCZXR0aW5nKio6IEJvb3N0IHVuZGVyZG9ncyBmb3IgaGlnaGVyIHBheW91dCBtdWx0aXBsaWVycwoyLiAqKkluc3VyYW5jZSBCb29zdGluZyoqOiBQcm90ZWN0IGxhcmdlIGJldHMgd2l0aCBkZWZlbnNpdmUgYm9vc3RzCjMuICoqTW9tZW50dW0gVHJhZGluZyoqOiBDaGFpbiBib29zdHMgdG8gY3JlYXRlIGRlY2lzaXZlIGFkdmFudGFnZXMKNC4gKipBcmJpdHJhZ2UgT3Bwb3J0dW5pdGllcyoqOiBJZGVudGlmeSBtaXNwcmljZWQgYm9vc3QgZWZmZWN0cwo=",
    "lastUpdated": "2025-09-03T02:43:22.506Z"
  },
  {
    "sourceFile": "hypeduel/betting-system.mdx",
    "sourceHash": "Ckh5cGVEdWVsJ3MgYmV0dGluZyBzeXN0ZW0gaXMgYnVpbHQgb24gKipwYXJpbXV0dWVsIHByaW5jaXBsZXMqKiAtIGEgZmFpciwgdHJhbnNwYXJlbnQgbWV0aG9kIHdoZXJlIGFsbCBiZXRzIGFyZSBwb29sZWQgdG9nZXRoZXIgYW5kIHdpbm5lcnMgc2hhcmUgdGhlIHRvdGFsIHByaXplIHBvb2wuIFRoaXMgY3JlYXRlcyBkeW5hbWljIG9kZHMgYW5kIGVuc3VyZXMgdGhlIGhvdXNlIG5ldmVyIGhhcyBhbiB1bmZhaXIgYWR2YW50YWdlLgoKIyMgSG93IFBhcmltdXR1ZWwgQmV0dGluZyBXb3JrcwoKVW5saWtlIHRyYWRpdGlvbmFsIHNwb3J0c2Jvb2tzIHdpdGggZml4ZWQgb2RkcywgcGFyaW11dHVlbCBiZXR0aW5nIGNyZWF0ZXMgYSBmYWlyLCBjb21tdW5pdHktZHJpdmVuIHdhZ2VyaW5nIGVudmlyb25tZW50OgoKIyMjIFRyYWRpdGlvbmFsIEJldHRpbmcgdnMgUGFyaW11dHVlbAoKPFRhYnM+CiAgPFRhYiB0aXRsZT0iVHJhZGl0aW9uYWwgU3BvcnRzYm9vayI+CiAgICBgYGAKICAgIEhvdXNlIHNldHMgb2RkczogQUkgQWxwaGEgd2lucyBhdCAyOjEKICAgIOKUnOKUgOKUgCBQbGF5ZXIgYmV0cyAxMDAgSFlQRVMKICAgIOKUnOKUgOKUgCBJZiB3aW5zOiByZWNlaXZlcyAyMDAgSFlQRVMKICAgIOKUnOKUgOKUgCBJZiBsb3NlczogaG91c2Uga2VlcHMgMTAwIEhZUEVTCiAgICDilJTilIDilIAgSG91c2UgcHJvZml0IGJ1aWx0IGludG8gb2RkcwogICAgYGBgCiAgPC9UYWI+CgogIDxUYWIgdGl0bGU9Ikh5cGVEdWVsIFBhcmltdXR1ZWwiPgogICAgYGBgCiAgICBDb21tdW5pdHkgY3JlYXRlcyBwb29sOiBBbGwgYmV0cyBjb21iaW5lZAogICAg4pSc4pSA4pSAIFBsYXllcnMgYmV0IG9uIGRpZmZlcmVudCBBSXMKICAgIOKUnOKUgOKUgCBXaW5uZXJzIHNoYXJlIGVudGlyZSBwcml6ZSBwb29sCiAgICDilJzilIDilIAgT2RkcyBjaGFuZ2UgYmFzZWQgb24gYmV0dGluZyBwYXR0ZXJucwogICAg4pSU4pSA4pSAIE5vIGhvdXNlIGFkdmFudGFnZSAtIHRyYW5zcGFyZW50IGZlZXMgb25seQogICAgYGBgCiAgPC9UYWI+CjwvVGFicz4KCiMjIEJldHRpbmcgUHJvY2VzcwoKIyMjIFN0ZXAtYnktU3RlcCBCZXR0aW5nCgo8U3RlcHM+CiAgPFN0ZXAgdGl0bGU9IkFyZW5hIFNlbGVjdGlvbiI+Q2hvb3NlIGFuIGFjdGl2ZSBhcmVuYSB3aXRoIHVwY29taW5nIEFJIGJhdHRsZXM8L1N0ZXA+CiAgPFN0ZXAgdGl0bGU9IkFJIEFuYWx5c2lzIj4KICAgIFJldmlldyBjb21wZXRpbmcgQUkgbW9kZWxzOiAtIFJlY2VudCBwZXJmb3JtYW5jZSBzdGF0aXN0aWNzIC0gSGVhZC10by1oZWFkIGJhdHRsZSBoaXN0b3J5IC0gQ29tbXVuaXR5IGJldHRpbmcKICAgIHBhdHRlcm5zIC0gVGVjaG5pY2FsIHNwZWNpZmljYXRpb25zCiAgPC9TdGVwPgogIDxTdGVwIHRpdGxlPSJCZXQgUGxhY2VtZW50Ij4KICAgIC0gU2VsZWN0IHlvdXIgcHJlZmVycmVkIEFJIC0gRW50ZXIgYmV0IGFtb3VudCBpbiBIWVBFUyAtIFJldmlldyBwb3RlbnRpYWwgcGF5b3V0IHJhbmdlIC0gQ29uZmlybSBiZXQgcGxhY2VtZW50CiAgPC9TdGVwPgogIDxTdGVwIHRpdGxlPSJQb29sIE1vbml0b3JpbmciPldhdGNoIGhvdyBiZXR0aW5nIHBhdHRlcm5zIGFmZmVjdCBwb3RlbnRpYWwgcGF5b3V0cyBhcyBtb3JlIHBsYXllcnMgam9pbjwvU3RlcD4KPC9TdGVwcz4KCiMjIFByaXplIFBvb2wgRGlzdHJpYnV0aW9uCgpFdmVyeSBiZXR0aW5nIHBvb2wgZm9sbG93cyBhIHRyYW5zcGFyZW50IGZlZSBzdHJ1Y3R1cmU6CgpgYGAKVG90YWwgQmV0dGluZyBQb29sOiAxMDAlCuKUnOKUgOKUgCA4NSUg4oaSIFdpbm5lcnMgKHByb3BvcnRpb25hbCBkaXN0cmlidXRpb24pCuKUnOKUgOKUgCAxMCUg4oaSIEFyZW5hIFRyZWFzdXJ5ICh0b2tlbiBidXliYWNrcykK4pSU4pSA4pSAIDUlIOKGkiBBcmVuYSBDcmVhdG9yIChkZXZlbG9wbWVudCByZXdhcmQpCmBgYAoKIyMjIFdpbm5lciBQYXlvdXQgQ2FsY3VsYXRpb24KCldpbm5lcnMgcmVjZWl2ZSBwYXlvdXRzIHByb3BvcnRpb25hbCB0byB0aGVpciBiZXQgc2l6ZSB3aXRoaW4gdGhlIHdpbm5pbmcgcG9vbDoKCmBgYHR5cGVzY3JpcHQKZnVuY3Rpb24gY2FsY3VsYXRlUGF5b3V0KHBsYXllckJldDogbnVtYmVyLCB3aW5uaW5nUG9vbDogbnVtYmVyLCB0b3RhbFdpbm5lclBheW91dDogbnVtYmVyKTogbnVtYmVyIHsKICBjb25zdCBwbGF5ZXJTaGFyZSA9IHBsYXllckJldCAvIHdpbm5pbmdQb29sOwogIGNvbnN0IHBheW91dCA9IHRvdGFsV2lubmVyUGF5b3V0ICogcGxheWVyU2hhcmU7CiAgcmV0dXJuIHBheW91dDsKfQpgYGAKCioqRXhhbXBsZSBTY2VuYXJpbyoqOgoKLSBUb3RhbCBwb29sOiAxMCwwMDAgSFlQRVMKLSBZb3VyIGJldCBvbiBBSSBBbHBoYTogNTAwIEhZUEVTCi0gVG90YWwgYmV0cyBvbiBBSSBBbHBoYTogMiwwMDAgSFlQRVMKLSBBSSBBbHBoYSB3aW5zIQoKKipZb3VyIHBheW91dCoqOgoKYGBgCldpbm5lciBwb29sIHNoYXJlOiA4LDUwMCBIWVBFUyAoODUlIG9mIDEwLDAwMCkKWW91ciBzaGFyZTogNTAwIC8gMiwwMDAgPSAyNSUgb2Ygd2lubmluZyBiZXRzCllvdXIgcGF5b3V0OiA4LDUwMCDDlyAwLjI1ID0gMiwxMjUgSFlQRVMKUmV0dXJuOiAzMjUlICg0LjI1OjEgb2RkcykKYGBgCgojIyBCZXR0aW5nIExpbWl0cyAmIFJ1bGVzCgojIyMgTWluaW11bSAmIE1heGltdW0gQmV0cwoKPEFjY29yZGlvbkdyb3VwPgogIDxBY2NvcmRpb24gdGl0bGU9Ik1pbmltdW0gQmV0IFJlcXVpcmVtZW50cyI+CiAgICAtICoqU3RhbmRhcmQgQXJlbmFzKio6IDEwIEhZUEVTIG1pbmltdW0KICAgIC0gKipQcmVtaXVtIEFyZW5hcyoqOiA1MCBIWVBFUyBtaW5pbXVtCiAgICAtICoqVG91cm5hbWVudCBFdmVudHMqKjogMTAwIEhZUEVTIG1pbmltdW0KICAgIAogICAgKk1pbmltdW1zIGVuc3VyZSBtZWFuaW5nZnVsIHByaXplIHBvb2xzIGFuZCBwcmV2ZW50IHNwYW0gYmV0dGluZyoKICA8L0FjY29yZGlvbj4KCjxBY2NvcmRpb24gdGl0bGU9Ik1heGltdW0gQmV0IExpbWl0cyI+CiAgLSAqKlBlciBCYXR0bGUqKjogMTAsMDAwIEhZUEVTIG1heGltdW0gLSAqKlBlciBQbGF5ZXIgRGFpbHkqKjogNTAsMDAwIEhZUEVTIG1heGltdW0gLSAqKkFyZW5hIFBvb2wqKjogTm8gc2luZ2xlIGJldAogIGNhbiBleGNlZWQgNTAlIG9mIGN1cnJlbnQgcG9vbCAqTWF4aW11bXMgcHJldmVudCBtYXJrZXQgbWFuaXB1bGF0aW9uIGFuZCBlbnN1cmUgZmFpciBwbGF5Kgo8L0FjY29yZGlvbj4KCiAgPEFjY29yZGlvbiB0aXRsZT0iU3BlY2lhbCBFdmVudCBSdWxlcyI+CiAgICAtICoqVG91cm5hbWVudCBGaW5hbHMqKjogSGlnaGVyIGxpbWl0cyBtYXkgYXBwbHkKICAgIC0gKipOZXcgQXJlbmEgTGF1bmNoKio6IFJlZHVjZWQgbGltaXRzIGR1cmluZyBib25kaW5nIHBoYXNlCiAgICAtICoqTWFpbnRlbmFuY2UgUGVyaW9kcyoqOiBCZXR0aW5nIG1heSBiZSB0ZW1wb3JhcmlseSBzdXNwZW5kZWQKICA8L0FjY29yZGlvbj4KPC9BY2NvcmRpb25Hcm91cD4KCiMjIyBCZXR0aW5nIEN1dG9mZiBUaW1lcwoKQmV0IHBsYWNlbWVudCBkZWFkbGluZXMgZW5zdXJlIGZhaXIgY29tcGV0aXRpb246CgotICoqU3RhbmRhcmQgQmF0dGxlcyoqOiAzMCBzZWNvbmRzIGJlZm9yZSBtYXRjaCBzdGFydAotICoqUXVpY2sgQmF0dGxlcyoqOiAxNSBzZWNvbmRzIGJlZm9yZSBtYXRjaCBzdGFydAotICoqVG91cm5hbWVudCBNYXRjaGVzKio6IDYwIHNlY29uZHMgYmVmb3JlIG1hdGNoIHN0YXJ0Cgo8V2FybmluZz5CZXRzIHBsYWNlZCBhZnRlciBjdXRvZmYgdGltZSB3aWxsIGJlIHJlamVjdGVkIGFuZCBmdW5kcyByZXR1cm5lZCBpbW1lZGlhdGVseSB0byB5b3VyIEhZUEVTIGJhbGFuY2UuPC9XYXJuaW5nPgo=",
    "lastUpdated": "2025-09-03T02:44:03.372Z"
  },
  {
    "sourceFile": "hypeduel/arenas.mdx",
    "sourceHash": "CkFyZW5hcyBhcmUgdGhlIGhlYXJ0IG9mIEh5cGVEdWVsIC0gdW5pcXVlIGNvbXBldGl0aXZlIGVudmlyb25tZW50cyB3aGVyZSBBSSBtb2RlbHMgYmF0dGxlIGluIHNwZWNpYWxpemVkIHNjZW5hcmlvcy4gRWFjaCBhcmVuYSBmZWF0dXJlcyBkaXN0aW5jdCBnYW1lcGxheSBtZWNoYW5pY3MsIEFJIGNoYWxsZW5nZXMsIGFuZCBjb21tdW5pdHkgZWNvbm9taWVzIHBvd2VyZWQgYnkgQXJlbmFDb2lucy4KCiMjIEFyZW5hIExpZmVjeWNsZQoKIyMjIERldmVsb3BtZW50IFN0YWdlcwoKPFN0ZXBzPgogIDxTdGVwIHRpdGxlPSJDb25jZXB0ICYgRGVzaWduIj5BcmVuYSBjcmVhdG9ycyBkZXZlbG9wIHRoZSBjb3JlIGdhbWVwbGF5IGNvbmNlcHQsIHJ1bGVzLCBhbmQgQUkgcmVxdWlyZW1lbnRzPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IlRlY2huaWNhbCBJbXBsZW1lbnRhdGlvbiI+QnVpbGQgdGhlIGJhdHRsZSBlbmdpbmUsIEFJIGludGVncmF0aW9uLCBhbmQgYm9vc3Qgc3lzdGVtPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IlRlc3RpbmcgJiBCYWxhbmNpbmciPkFscGhhIGFuZCBiZXRhIHRlc3Rpbmcgd2l0aCBjb21tdW5pdHkgZmVlZGJhY2sgYW5kIEFJIG1vZGVsIG9wdGltaXphdGlvbjwvU3RlcD4KCjxTdGVwIHRpdGxlPSJMYXVuY2ggJiBCb25kaW5nIj5QdWJsaWMgbGF1bmNoIHdpdGggQXJlbmFDb2luIGJvbmRpbmcgcGhhc2UgYW5kIGluaXRpYWwgY29tbXVuaXR5IGJ1aWxkaW5nPC9TdGVwPgoKICA8U3RlcCB0aXRsZT0iR3Jvd3RoICYgRXZvbHV0aW9uIj5PbmdvaW5nIGRldmVsb3BtZW50LCBmZWF0dXJlIGFkZGl0aW9ucywgYW5kIGNvbW11bml0eSBleHBhbnNpb248L1N0ZXA+CjwvU3RlcHM+CgojIyMgQ29tbXVuaXR5IEJ1aWxkaW5nCgoqKkFyZW5hIFN1Y2Nlc3MgRmFjdG9ycyoqOgoKPFRhYnM+CiAgPFRhYiB0aXRsZT0iRW5nYWdlbWVudCI+CiAgICAqKlBsYXllciBSZXRlbnRpb24gU3RyYXRlZ2llcyoqIC0gUmVndWxhciBjb250ZW50IHVwZGF0ZXMgYW5kIG5ldyBmZWF0dXJlcyAtIENvbW11bml0eSBldmVudHMgYW5kIHRvdXJuYW1lbnRzIC0KICAgIExlYWRlcmJvYXJkcyBhbmQgYWNoaWV2ZW1lbnQgc3lzdGVtcyAtIFNvY2lhbCBmZWF0dXJlcyBhbmQgcGxheWVyIGludGVyYWN0aW9uIC0gQ3JlYXRvciBjb21tdW5pY2F0aW9uIGFuZAogICAgdHJhbnNwYXJlbmN5CiAgPC9UYWI+Cgo8VGFiIHRpdGxlPSJCYWxhbmNlIj4KICAqKkZhaXIgQ29tcGV0aXRpb24gTWFpbnRlbmFuY2UqKiAtIEFJIG1vZGVsIHBlcmZvcm1hbmNlIGJhbGFuY2luZyAtIEJvb3N0IGVmZmVjdGl2ZW5lc3MgdHVuaW5nIC0gRWNvbm9taWMgcGFyYW1ldGVyCiAgYWRqdXN0bWVudHMgLSBDb21tdW5pdHkgZmVlZGJhY2sgaW50ZWdyYXRpb24gLSBSZWd1bGFyIG1ldGEgYW5hbHlzaXMgYW5kIHVwZGF0ZXMKPC9UYWI+CgogIDxUYWIgdGl0bGU9Iklubm92YXRpb24iPgogICAgKipDb250aW51b3VzIEltcHJvdmVtZW50KiogLSBOZXcgQUkgbW9kZWwgaW50ZWdyYXRpb24gLSBHYW1lcGxheSBtZWNoYW5pYyBlbmhhbmNlbWVudHMgLSBWaXN1YWwgYW5kIHRlY2huaWNhbAogICAgdXBncmFkZXMgLSBDcm9zcy1hcmVuYSBjb2xsYWJvcmF0aW9uIGZlYXR1cmVzIC0gQ3V0dGluZy1lZGdlIHRlY2hub2xvZ3kgYWRvcHRpb24KICA8L1RhYj4KPC9UYWJzPgoKIyMgQXJlbmEgRWNvbm9taWNzCgojIyMgUmV2ZW51ZSBHZW5lcmF0aW9uCgpFYWNoIGFyZW5hIGdlbmVyYXRlcyByZXZlbnVlIHRocm91Z2ggbXVsdGlwbGUgc3RyZWFtczoKCjxBY2NvcmRpb25Hcm91cD4KICA8QWNjb3JkaW9uIHRpdGxlPSJCZXR0aW5nIEZlZXMgKFByaW1hcnkgUmV2ZW51ZSkiPgogICAgKioxMCUgb2YgYWxsIGJldHRpbmcgcG9vbHMqKiAtIENvbnNpc3RlbnQgcmV2ZW51ZSBmcm9tIGFjdGl2ZSBwbGF5ZXIgYmFzZSAtIFNjYWxlcyB3aXRoIGJldHRpbmcgdm9sdW1lIGFuZCBmcmVxdWVuY3kKICAgIC0gUHJlZGljdGFibGUgaW5jb21lIHN0cmVhbSBmb3IgcGxhbm5pbmcgLSBEcml2ZXMgQXJlbmFDb2luIHZhbHVlIHRocm91Z2ggYnV5YmFja3MgKipPcHRpbWl6YXRpb24gU3RyYXRlZ2llcyoqOiAtCiAgICBJbmNyZWFzZSBiYXR0bGUgZnJlcXVlbmN5IGR1cmluZyBwZWFrIGhvdXJzIC0gT3B0aW1pemUgbWF0Y2ggZHVyYXRpb24gZm9yIG1heGltdW0gZW5nYWdlbWVudCAtIEltcGxlbWVudCBkeW5hbWljCiAgICBwcmljaW5nIGZvciBzcGVjaWFsIGV2ZW50cyAtIENyZWF0ZSBjb21wZWxsaW5nIGJldHRpbmcgbmFycmF0aXZlcwogIDwvQWNjb3JkaW9uPgoKPEFjY29yZGlvbiB0aXRsZT0iQm9vc3QgUmV2ZW51ZSAoU2Vjb25kYXJ5IFJldmVudWUpIj4KICAqKjUwJSBvZiBib29zdCBwdXJjaGFzZSByZXZlbnVlKiogLSBIaWdoZXItbWFyZ2luIHJldmVudWUgd2l0aCBncm93dGggcG90ZW50aWFsIC0gSW5jcmVhc2VzIGR1cmluZyBleGNpdGluZyBvciBjbG9zZQogIGJhdHRsZXMgLSBFbmNvdXJhZ2VzIGludGVyYWN0aXZlIGdhbWVwbGF5IHBhcnRpY2lwYXRpb24gLSBDcmVhdGVzIGFkZGl0aW9uYWwgZW5nYWdlbWVudCBiZXlvbmQgYmV0dGluZyAqKkdyb3d0aAogIFRhY3RpY3MqKjogLSBEZXZlbG9wIHVuaXF1ZSBhbmQgcG93ZXJmdWwgYm9vc3QgdHlwZXMgLSBCYWxhbmNlIGJvb3N0IGVmZmVjdHMgZm9yIHN0cmF0ZWdpYyBpbXBvcnRhbmNlIC0gQ3JlYXRlIGJvb3N0CiAgY29tYmluYXRpb25zIGFuZCBzeW5lcmdpZXMgLSBJbXBsZW1lbnQgZHluYW1pYyBib29zdCBwcmljaW5nCjwvQWNjb3JkaW9uPgoKICA8QWNjb3JkaW9uIHRpdGxlPSJUcmFkaW5nIEZlZXMgKExvbmctdGVybSBSZXZlbnVlKSI+CiAgICAqKjY2JSBvZiBBcmVuYUNvaW4gdHJhZGluZyBmZWVzIChwb3N0LURFWCkqKiAtIFBhc3NpdmUgcmV2ZW51ZSByZXF1aXJpbmcgbWluaW1hbCBlZmZvcnQgLSBHcm93cyB3aXRoIHRva2VuIGFkb3B0aW9uCiAgICBhbmQgc3BlY3VsYXRpb24gLSBCZW5lZml0cyBmcm9tIG92ZXJhbGwgY3J5cHRvIG1hcmtldCBncm93dGggLSBQcm92aWRlcyBsb25nLXRlcm0gc3VzdGFpbmFiaWxpdHkgKipFbmhhbmNlbWVudAogICAgTWV0aG9kcyoqOiAtIEJ1aWxkIHN0cm9uZyB0b2tlbiBob2xkZXIgY29tbXVuaXR5IC0gSW1wbGVtZW50IGdvdmVybmFuY2UgYW5kIHV0aWxpdHkgZmVhdHVyZXMgLSBQYXJ0bmVyIHdpdGggb3RoZXIKICAgIERlRmkgcHJvdG9jb2xzIC0gQ3JlYXRlIHRva2VuIGJ1cm4gbWVjaGFuaXNtcwogIDwvQWNjb3JkaW9uPgo8L0FjY29yZGlvbkdyb3VwPgoKIyMjIFBlcmZvcm1hbmNlIE1ldHJpY3MKCioqS2V5IEFyZW5hIFN1Y2Nlc3MgSW5kaWNhdG9ycyoqOgoKPENhcmQgdGl0bGU9IlVzZXIgRW5nYWdlbWVudCIgaWNvbj0idXNlcnMiPgogIC0gRGFpbHkgYWN0aXZlIHVzZXJzIGFuZCByZXRlbnRpb24gcmF0ZXMgLSBBdmVyYWdlIHNlc3Npb24gZHVyYXRpb24gYW5kIGRlcHRoIC0gQ29tbXVuaXR5IGdyb3d0aCBhbmQgc29jaWFsIGFjdGl2aXR5IC0KICBVc2VyLWdlbmVyYXRlZCBjb250ZW50IGFuZCBmZWVkYmFjawo8L0NhcmQ+Cgo8Q2FyZCB0aXRsZT0iRmluYW5jaWFsIEhlYWx0aCIgaWNvbj0iZG9sbGFyLXNpZ24iPgogIC0gVG90YWwgYmV0dGluZyB2b2x1bWUgYW5kIGdyb3d0aCB0cmVuZHMgLSBSZXZlbnVlIHBlciB1c2VyIGFuZCBtb25ldGl6YXRpb24gLSBBcmVuYUNvaW4gbWFya2V0IGNhcCBhbmQgdHJhZGluZyB2b2x1bWUKICAtIFRyZWFzdXJ5IGJhbGFuY2UgYW5kIGJ1eWJhY2sgYWN0aXZpdHkKPC9DYXJkPgoKPENhcmQgdGl0bGU9IkNvbXBldGl0aXZlIEJhbGFuY2UiIGljb249InNjYWxlIj4KICAtIEFJIG1vZGVsIHdpbiByYXRlIGRpc3RyaWJ1dGlvbiAtIEJldHRpbmcgcG9vbCBkaXN0cmlidXRpb24gcGF0dGVybnMgLSBCb29zdCB1c2FnZSBlZmZlY3RpdmVuZXNzIHJhdGVzIC0gQmF0dGxlCiAgb3V0Y29tZSB1bnByZWRpY3RhYmlsaXR5IG1ldHJpY3MKPC9DYXJkPgoKPENhcmQgdGl0bGU9IlRlY2huaWNhbCBQZXJmb3JtYW5jZSIgaWNvbj0iZ2F1Z2UiPgogIC0gQmF0dGxlIGV4ZWN1dGlvbiBzcGVlZCBhbmQgcmVsaWFiaWxpdHkgLSBVc2VyIGludGVyZmFjZSByZXNwb25zaXZlbmVzcyAtIFNlcnZlciB1cHRpbWUgYW5kIGVycm9yIHJhdGVzIC0gU2NhbGFiaWxpdHkKICBhbmQgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uCjwvQ2FyZD4K",
    "lastUpdated": "2025-09-03T02:44:33.901Z"
  },
  {
    "sourceFile": "hypeduel/arenacoins.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-10-31T02:26:02.389Z"
  },
  {
    "sourceFile": "createkit/whitelist.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-09-03T02:50:15.503Z"
  },
  {
    "sourceFile": "createkit/storage.mdx",
    "sourceHash": "CiMjIE92ZXJ2aWV3CgpUaGUgQmFzZU1pbnQgU3RvcmFnZSBTZXJ2aWNlIHByb3ZpZGVzIGEgcmVsaWFibGUsIHNjYWxhYmxlIHNvbHV0aW9uIGZvciBzdG9yaW5nIGFuZCBtYW5hZ2luZyBORlQgY29sbGVjdGlvbiBtZXRhZGF0YS4gSXQgb2ZmZXJzIGRldGVybWluaXN0aWMgYWRkcmVzc2luZywgQ0ROLWJhY2tlZCBkZWxpdmVyeSwgYW5kIHNlYW1sZXNzIGludGVncmF0aW9uIHdpdGggdGhlIENyZWF0ZUtpdCBlY29zeXN0ZW0uCgojIyBTdG9yYWdlIEFyY2hpdGVjdHVyZQoKIyMjIEhvdyBTdG9yYWdlIFdvcmtzCgo8U3RlcHM+CiAgPFN0ZXAgdGl0bGU9Ik1ldGFkYXRhIFN1Ym1pc3Npb24iPgogICAgQ29sbGVjdGlvbiBtZXRhZGF0YSBhbmQgY3JlYXRvciBzaWduYXR1cmVzIGFyZSBzdWJtaXR0ZWQgdG8gdGhlIHN0b3JhZ2Ugc2VydmljZQogIDwvU3RlcD4KICA8U3RlcCB0aXRsZT0iVmFsaWRhdGlvbiAmIFN0b3JhZ2UiPgogICAgVGhlIHNlcnZpY2UgdmFsaWRhdGVzIHNpZ25hdHVyZXMgYW5kIHN0b3JlcyBtZXRhZGF0YSB3aXRoIGEgZGV0ZXJtaW5pc3RpYyBhZGRyZXNzCiAgPC9TdGVwPgogIDxTdGVwIHRpdGxlPSJDRE4gRGlzdHJpYnV0aW9uIj4KICAgIE1ldGFkYXRhIGlzIGRpc3RyaWJ1dGVkIHZpYSBDRE4gZm9yIGZhc3QsIGdsb2JhbCBhY2Nlc3MKICA8L1N0ZXA+CiAgPFN0ZXAgdGl0bGU9Ik1hcmtldHBsYWNlIEludGVncmF0aW9uIj4KICAgIENvbGxlY3Rpb25zIGFyZSBkaXNjb3ZlcmFibGUgdmlhIHByZWRpY3RlZCBhZGRyZXNzZXMgYmVmb3JlIGRlcGxveW1lbnQKICA8L1N0ZXA+CjwvU3RlcHM+CgojIyMgS2V5IEZlYXR1cmVzCgo8Q2FyZEdyb3VwIGNvbHM9ezJ9PgogIDxDYXJkIHRpdGxlPSJEZXRlcm1pbmlzdGljIEFkZHJlc3NpbmciIGljb249ImxpbmsiPgogICAgQ29sbGVjdGlvbnMgaGF2ZSBwcmVkaWN0YWJsZSBhZGRyZXNzZXMgZm9yIG1hcmtldHBsYWNlIGludGVncmF0aW9uCiAgPC9DYXJkPgogIDxDYXJkIHRpdGxlPSJTaWduYXR1cmUgVmFsaWRhdGlvbiIgaWNvbj0ic2hpZWxkLWNoZWNrIj4KICAgIENyeXB0b2dyYXBoaWMgdmVyaWZpY2F0aW9uIG9mIGNvbGxlY3Rpb24gYXV0aGVudGljaXR5CiAgPC9DYXJkPgogIDxDYXJkIHRpdGxlPSJDRE4gRGVsaXZlcnkiIGljb249Imdsb2JlIj4KICAgIEZhc3QsIHJlbGlhYmxlIG1ldGFkYXRhIGRlbGl2ZXJ5IHdvcmxkd2lkZQogIDwvQ2FyZD4KICA8Q2FyZCB0aXRsZT0iUmVmZXJyZXIgU3lzdGVtIiBpY29uPSJ1c2VycyI+CiAgICBUcmFjayBhbmQgbWFuYWdlIGNvbGxlY3Rpb25zIGJ5IGludGVncmF0aW9uIHBhcnRuZXJzCiAgPC9DYXJkPgo8L0NhcmRHcm91cD4KCiMjIFN0b3JhZ2UgU2VydmljZSBTZXR1cAoKIyMjIEJhc2ljIENvbmZpZ3VyYXRpb24KCmBgYHR5cGVzY3JpcHQgdGl0bGU9IkluaXRpYWxpemUgU3RvcmFnZSBTZXJ2aWNlIgppbXBvcnQgeyBCYXNlTWludFN0b3JhZ2UgfSBmcm9tICdAYjNkb3RmdW4vYmFzZW1pbnQnCgovLyBJbml0aWFsaXplIHN0b3JhZ2Ugc2VydmljZQpjb25zdCBzdG9yYWdlID0gbmV3IEJhc2VNaW50U3RvcmFnZSh7CiAgYmFzZVVybDogJ2h0dHBzOi8vYXBpLmJhc2VtaW50LmZ1bicsIC8vIFByb2R1Y3Rpb24gVVJMCiAgLy8gRm9yIHRlc3RuZXQgZGV2ZWxvcG1lbnQ6CiAgLy8gYmFzZVVybDogJ2h0dHBzOi8vdGVzdG5ldC1hcGkuYmFzZW1pbnQuZnVuJwp9KQoKLy8gVGVzdCBjb25uZWN0aW9uCnRyeSB7CiAgY29uc3QgaGVhbHRoID0gYXdhaXQgc3RvcmFnZS5oZWFsdGhDaGVjaygpCiAgY29uc29sZS5sb2coJ+KchSBTdG9yYWdlIHNlcnZpY2UgY29ubmVjdGVkOicsIGhlYWx0aCkKfSBjYXRjaCAoZXJyb3IpIHsKICBjb25zb2xlLmVycm9yKCfinYwgU3RvcmFnZSBzZXJ2aWNlIHVuYXZhaWxhYmxlOicsIGVycm9yKQp9CmBgYAoKIyMjIEVudmlyb25tZW50IENvbmZpZ3VyYXRpb24KCmBgYHR5cGVzY3JpcHQgdGl0bGU9IkVudmlyb25tZW50LWJhc2VkIFNldHVwIgovLyBFbnZpcm9ubWVudC1zcGVjaWZpYyBjb25maWd1cmF0aW9uCmNvbnN0IGdldFN0b3JhZ2VDb25maWcgPSAoZW52aXJvbm1lbnQ6ICdkZXZlbG9wbWVudCcgfCAnc3RhZ2luZycgfCAncHJvZHVjdGlvbicpID0+IHsKICBjb25zdCBjb25maWdzID0gewogICAgZGV2ZWxvcG1lbnQ6IHsKICAgICAgYmFzZVVybDogJ2h0dHBzOi8vdGVzdG5ldC1hcGkuYmFzZW1pbnQuZnVuJywKICAgICAgY2hhaW5JZDogMTk5MyAvLyBCMyBUZXN0bmV0CiAgICB9LAogICAgc3RhZ2luZzogewogICAgICBiYXNlVXJsOiAnaHR0cHM6Ly9zdGFnaW5nLWFwaS5iYXNlbWludC5mdW4nLAogICAgICBjaGFpbklkOiAxOTkzCiAgICB9LAogICAgcHJvZHVjdGlvbjogewogICAgICBiYXNlVXJsOiAnaHR0cHM6Ly9hcGkuYmFzZW1pbnQuZnVuJywKICAgICAgY2hhaW5JZDogODMzMyAvLyBCMyBNYWlubmV0CiAgICB9CiAgfQogIAogIHJldHVybiBjb25maWdzW2Vudmlyb25tZW50XQp9Cgpjb25zdCBjb25maWcgPSBnZXRTdG9yYWdlQ29uZmlnKHByb2Nlc3MuZW52Lk5PREVfRU5WIGFzIGFueSB8fCAnZGV2ZWxvcG1lbnQnKQpjb25zdCBzdG9yYWdlID0gbmV3IEJhc2VNaW50U3RvcmFnZShjb25maWcpCmBgYAoKIyMgU3VibWl0dGluZyBDb2xsZWN0aW9ucwoKIyMjIEJhc2ljIENvbGxlY3Rpb24gU3VibWlzc2lvbgoKYGBgdHlwZXNjcmlwdCB0aXRsZT0iU3VibWl0IENvbGxlY3Rpb24iCmFzeW5jIGZ1bmN0aW9uIHN1Ym1pdENvbGxlY3Rpb24oCiAgY29sbGVjdGlvbk1ldGFkYXRhOiBhbnksCiAgY3JlYXRvclNpZ25hdHVyZTogc3RyaW5nLAogIHJlZmVycmVySWQ/OiBzdHJpbmcKKSB7CiAgdHJ5IHsKICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc3RvcmFnZS5zdWJtaXRDb2xsZWN0aW9uKAogICAgICBjb2xsZWN0aW9uTWV0YWRhdGEsCiAgICAgIGNyZWF0b3JTaWduYXR1cmUsCiAgICAgIHJlZmVycmVySWQgLy8gT3B0aW9uYWw6IHRyYWNrIGNvbGxlY3Rpb25zIGJ5IHJlZmVycmVyCiAgICApCiAgICAKICAgIGNvbnNvbGUubG9nKCfinIUgQ29sbGVjdGlvbiBzdWJtaXR0ZWQgc3VjY2Vzc2Z1bGx5JykKICAgIGNvbnNvbGUubG9nKCdDb2xsZWN0aW9uIElEOicsIHJlc3BvbnNlLmNvbGxlY3Rpb25JZCkKICAgIGNvbnNvbGUubG9nKCdQcmVkaWN0ZWQgYWRkcmVzczonLCByZXNwb25zZS5wcmVkaWN0ZWRBZGRyZXNzKQogICAgY29uc29sZS5sb2coJ01ldGFkYXRhIFVSSTonLCByZXNwb25zZS5tZXRhZGF0YVVyaSkKICAgIAogICAgcmV0dXJuIHJlc3BvbnNlCiAgICAKICB9IGNhdGNoIChlcnJvcjogYW55KSB7CiAgICBpZiAoZXJyb3IubWVzc2FnZS5pbmNsdWRlcygnSW52YWxpZCBzaWduYXR1cmUnKSkgewogICAgICBjb25zb2xlLmVycm9yKCfinYwgQ3JlYXRvciBzaWduYXR1cmUgdmVyaWZpY2F0aW9uIGZhaWxlZCcpCiAgICB9IGVsc2UgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ0NvbGxlY3Rpb24gZXhpc3RzJykpIHsKICAgICAgY29uc29sZS5lcnJvcign4p2MIENvbGxlY3Rpb24gd2l0aCB0aGlzIGFkZHJlc3MgYWxyZWFkeSBleGlzdHMnKQogICAgfSBlbHNlIGlmIChlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdSZWZlcnJlciBub3QgZm91bmQnKSkgewogICAgICBjb25zb2xlLmVycm9yKCfinYwgSW52YWxpZCByZWZlcnJlciBJRCcpCiAgICB9IGVsc2UgewogICAgICBjb25zb2xlLmVycm9yKCfinYwgU3VibWlzc2lvbiBmYWlsZWQ6JywgZXJyb3IubWVzc2FnZSkKICAgIH0KICAgIHRocm93IGVycm9yCiAgfQp9CgovLyBFeGFtcGxlIHVzYWdlCmNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc3VibWl0Q29sbGVjdGlvbigKICBjb2xsZWN0aW9uTWV0YWRhdGEsCiAgY3JlYXRvclNpZ25hdHVyZSwKICAibXktZ2FtZS1wbGF0Zm9ybSIgLy8gWW91ciByZWZlcnJlciBJRAopCmBgYAoKIyMjIEJhdGNoIENvbGxlY3Rpb24gU3VibWlzc2lvbgoKYGBgdHlwZXNjcmlwdCB0aXRsZT0iQmF0Y2ggU3VibWlzc2lvbiIKYXN5bmMgZnVuY3Rpb24gc3VibWl0TXVsdGlwbGVDb2xsZWN0aW9ucygKICBjb2xsZWN0aW9uczogQXJyYXk8ewogICAgbWV0YWRhdGE6IGFueQogICAgc2lnbmF0dXJlOiBzdHJpbmcKICAgIHJlZmVycmVySWQ/OiBzdHJpbmcKICB9PgopIHsKICBjb25zdCByZXN1bHRzID0gW10KICAKICBmb3IgKGNvbnN0IGNvbGxlY3Rpb24gb2YgY29sbGVjdGlvbnMpIHsKICAgIHRyeSB7CiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc3RvcmFnZS5zdWJtaXRDb2xsZWN0aW9uKAogICAgICAgIGNvbGxlY3Rpb24ubWV0YWRhdGEsCiAgICAgICAgY29sbGVjdGlvbi5zaWduYXR1cmUsCiAgICAgICAgY29sbGVjdGlvbi5yZWZlcnJlcklkCiAgICAgICkKICAgICAgCiAgICAgIHJlc3VsdHMucHVzaCh7CiAgICAgICAgc3VjY2VzczogdHJ1ZSwKICAgICAgICBjb2xsZWN0aW9uTmFtZTogY29sbGVjdGlvbi5tZXRhZGF0YS5uYW1lLAogICAgICAgIHJlc3BvbnNlCiAgICAgIH0pCiAgICAgIAogICAgICBjb25zb2xlLmxvZyhg4pyFIFN1Ym1pdHRlZDogJHtjb2xsZWN0aW9uLm1ldGFkYXRhLm5hbWV9YCkKICAgICAgCiAgICB9IGNhdGNoIChlcnJvcikgewogICAgICByZXN1bHRzLnB1c2goewogICAgICAgIHN1Y2Nlc3M6IGZhbHNlLAogICAgICAgIGNvbGxlY3Rpb25OYW1lOiBjb2xsZWN0aW9uLm1ldGFkYXRhLm5hbWUsCiAgICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2UKICAgICAgfSkKICAgICAgCiAgICAgIGNvbnNvbGUuZXJyb3IoYOKdjCBGYWlsZWQ6ICR7Y29sbGVjdGlvbi5tZXRhZGF0YS5uYW1lfWAsIGVycm9yKQogICAgfQogIH0KICAKICByZXR1cm4gcmVzdWx0cwp9CmBgYAoKIyMgUXVlcnlpbmcgQ29sbGVjdGlvbnMKCiMjIyBCYXNpYyBRdWVyaWVzCgpgYGB0eXBlc2NyaXB0IHRpdGxlPSJRdWVyeSBDb2xsZWN0aW9ucyIKLy8gUXVlcnkgYWxsIGNvbGxlY3Rpb25zCmNvbnN0IGFsbENvbGxlY3Rpb25zID0gYXdhaXQgc3RvcmFnZS5xdWVyeUNvbGxlY3Rpb25zKCkKY29uc29sZS5sb2coYEZvdW5kICR7YWxsQ29sbGVjdGlvbnMuY29sbGVjdGlvbnMubGVuZ3RofSBjb2xsZWN0aW9uc2ApCgovLyBRdWVyeSB3aXRoIHBhZ2luYXRpb24KY29uc3QgcGFnaW5hdGVkUmVzdWx0cyA9IGF3YWl0IHN0b3JhZ2UucXVlcnlDb2xsZWN0aW9ucyh7CiAgbGltaXQ6IDIwLAogIG9mZnNldDogMAp9KQoKLy8gUXVlcnkgYnkgcmVmZXJyZXIKY29uc3QgZ2FtZUNvbGxlY3Rpb25zID0gYXdhaXQgc3RvcmFnZS5xdWVyeUNvbGxlY3Rpb25zKHsKICByZWZlcnJlcjogIm15LWdhbWUtcGxhdGZvcm0iCn0pCgovLyBRdWVyeSBieSBjcmVhdG9yCmNvbnN0IGNyZWF0b3JDb2xsZWN0aW9ucyA9IGF3YWl0IHN0b3JhZ2UucXVlcnlDb2xsZWN0aW9ucyh7CiAgY3JlYXRvcjogIjB4MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MCIKfSkKYGBgCgojIyMgQWR2YW5jZWQgRmlsdGVyaW5nCgpgYGB0eXBlc2NyaXB0IHRpdGxlPSJBZHZhbmNlZCBRdWVyaWVzIgovLyBDb21wbGV4IHF1ZXJ5IHdpdGggbXVsdGlwbGUgZmlsdGVycwpjb25zdCBhZHZhbmNlZFF1ZXJ5ID0gYXdhaXQgc3RvcmFnZS5xdWVyeUNvbGxlY3Rpb25zKHsKICByZWZlcnJlcjogIm15LWdhbWUtcGxhdGZvcm0iLAogIGNyZWF0b3I6ICIweDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAiLAogIHRva2VuU3RhbmRhcmQ6ICJFUkM3MjEiLAogIGNoYWluSWQ6IDE5OTMsCiAgbGltaXQ6IDUwLAogIG9mZnNldDogMCwKICBzb3J0Qnk6ICJjcmVhdGVkQXQiLAogIHNvcnRPcmRlcjogImRlc2MiCn0pCgpjb25zb2xlLmxvZygiQWR2YW5jZWQgcXVlcnkgcmVzdWx0czoiLCB7CiAgdG90YWw6IGFkdmFuY2VkUXVlcnkudG90YWwsCiAgY291bnQ6IGFkdmFuY2VkUXVlcnkuY29sbGVjdGlvbnMubGVuZ3RoLAogIGhhc01vcmU6IGFkdmFuY2VkUXVlcnkuaGFzTW9yZQp9KQoKLy8gRmlsdGVyIGJ5IGRlcGxveW1lbnQgc3RhdHVzCmNvbnN0IHVuZGVwbG95ZWRDb2xsZWN0aW9ucyA9IGFkdmFuY2VkUXVlcnkuY29sbGVjdGlvbnMuZmlsdGVyKAogIGNvbGxlY3Rpb24gPT4gIWNvbGxlY3Rpb24uaXNEZXBsb3llZAopCgpjb25zdCBkZXBsb3llZENvbGxlY3Rpb25zID0gYWR2YW5jZWRRdWVyeS5jb2xsZWN0aW9ucy5maWx0ZXIoCiAgY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmlzRGVwbG95ZWQKKQoKY29uc29sZS5sb2coYFVuZGVwbG95ZWQ6ICR7dW5kZXBsb3llZENvbGxlY3Rpb25zLmxlbmd0aH1gKQpjb25zb2xlLmxvZyhgRGVwbG95ZWQ6ICR7ZGVwbG95ZWRDb2xsZWN0aW9ucy5sZW5ndGh9YCkKYGBgCgojIyMgU2VhcmNoIEZ1bmN0aW9uYWxpdHkKCmBgYHR5cGVzY3JpcHQgdGl0bGU9IlNlYXJjaCBDb2xsZWN0aW9ucyIKLy8gU2VhcmNoIGJ5IG5hbWUgb3Igc3ltYm9sCmNvbnN0IHNlYXJjaFJlc3VsdHMgPSBhd2FpdCBzdG9yYWdlLnNlYXJjaENvbGxlY3Rpb25zKHsKICBxdWVyeTogImZhbnRhc3kiLAogIGxpbWl0OiAxMAp9KQoKLy8gU2VhcmNoIHdpdGggZmlsdGVycwpjb25zdCBmaWx0ZXJlZFNlYXJjaCA9IGF3YWl0IHN0b3JhZ2Uuc2VhcmNoQ29sbGVjdGlvbnMoewogIHF1ZXJ5OiAiZ2FtZSIsCiAgcmVmZXJyZXI6ICJteS1nYW1lLXBsYXRmb3JtIiwKICB0b2tlblN0YW5kYXJkOiAiRVJDMTE1NSIKfSkKCmNvbnNvbGUubG9nKCJTZWFyY2ggcmVzdWx0czoiLCBzZWFyY2hSZXN1bHRzLmNvbGxlY3Rpb25zLm1hcChjID0+ICh7CiAgbmFtZTogYy5uYW1lLAogIHN5bWJvbDogYy5zeW1ib2wsCiAgZGVzY3JpcHRpb246IGMuZGVzY3JpcHRpb24KfSkpKQpgYGAKCiMjIFJlZmVycmVyIE1hbmFnZW1lbnQKCiMjIyBSZWdpc3RlcmluZyBhcyBhIFJlZmVycmVyCgpgYGB0eXBlc2NyaXB0IHRpdGxlPSJSZWZlcnJlciBSZWdpc3RyYXRpb24iCi8vIFJlZ2lzdGVyIHlvdXIgcGxhdGZvcm0gYXMgYSByZWZlcnJlcgphc3luYyBmdW5jdGlvbiByZWdpc3RlckFzUmVmZXJyZXIocmVmZXJyZXJJZDogc3RyaW5nLCBtZXRhZGF0YT86IGFueSkgewogIHRyeSB7CiAgICBhd2FpdCBzdG9yYWdlLnJlZ2lzdGVyUmVmZXJyZXIocmVmZXJyZXJJZCwgbWV0YWRhdGEpCiAgICBjb25zb2xlLmxvZyhg4pyFIFJlZ2lzdGVyZWQgYXMgcmVmZXJyZXI6ICR7cmVmZXJyZXJJZH1gKQogIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHsKICAgIGlmIChlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdhbHJlYWR5IGV4aXN0cycpKSB7CiAgICAgIGNvbnNvbGUubG9nKGDihLnvuI8gUmVmZXJyZXIgJHtyZWZlcnJlcklkfSBhbHJlYWR5IHJlZ2lzdGVyZWRgKQogICAgfSBlbHNlIHsKICAgICAgY29uc29sZS5lcnJvcign4p2MIFJlZ2lzdHJhdGlvbiBmYWlsZWQ6JywgZXJyb3IpCiAgICAgIHRocm93IGVycm9yCiAgICB9CiAgfQp9CgovLyBSZWdpc3RlciB3aXRoIG1ldGFkYXRhCmF3YWl0IHJlZ2lzdGVyQXNSZWZlcnJlcigibXktZ2FtZS1wbGF0Zm9ybSIsIHsKICBuYW1lOiAiTXkgR2FtZSBQbGF0Zm9ybSIsCiAgd2Vic2l0ZTogImh0dHBzOi8vbXlnYW1lLmNvbSIsCiAgY29udGFjdDogImRldkBteWdhbWUuY29tIiwKICBkZXNjcmlwdGlvbjogIkEgZ2FtaW5nIHBsYXRmb3JtIGZvciBORlQgY29sbGVjdGlvbnMiCn0pCmBgYAoKIyMjIE1hbmFnaW5nIFJlZmVycmVyIENvbGxlY3Rpb25zCgpgYGB0eXBlc2NyaXB0IHRpdGxlPSJSZWZlcnJlciBDb2xsZWN0aW9uIE1hbmFnZW1lbnQiCi8vIEdldCBhbGwgY29sbGVjdGlvbnMgZm9yIHlvdXIgcGxhdGZvcm0KYXN5bmMgZnVuY3Rpb24gZ2V0UmVmZXJyZXJEYXNoYm9hcmQocmVmZXJyZXJJZDogc3RyaW5nKSB7CiAgY29uc3QgY29sbGVjdGlvbnMgPSBhd2FpdCBzdG9yYWdlLnF1ZXJ5Q29sbGVjdGlvbnMoewogICAgcmVmZXJyZXI6IHJlZmVycmVySWQKICB9KQogIAogIGNvbnN0IHN0YXRzID0gewogICAgdG90YWw6IGNvbGxlY3Rpb25zLnRvdGFsLAogICAgZGVwbG95ZWQ6IGNvbGxlY3Rpb25zLmNvbGxlY3Rpb25zLmZpbHRlcihjID0+IGMuaXNEZXBsb3llZCkubGVuZ3RoLAogICAgdW5kZXBsb3llZDogY29sbGVjdGlvbnMuY29sbGVjdGlvbnMuZmlsdGVyKGMgPT4gIWMuaXNEZXBsb3llZCkubGVuZ3RoLAogICAgZXJjNzIxOiBjb2xsZWN0aW9ucy5jb2xsZWN0aW9ucy5maWx0ZXIoYyA9PiBjLnRva2VuU3RhbmRhcmQgPT09ICdFUkM3MjEnKS5sZW5ndGgsCiAgICBlcmMxMTU1OiBjb2xsZWN0aW9ucy5jb2xsZWN0aW9ucy5maWx0ZXIoYyA9PiBjLnRva2VuU3RhbmRhcmQgPT09ICdFUkMxMTU1JykubGVuZ3RoCiAgfQogIAogIGNvbnNvbGUubG9nKCJSZWZlcnJlciBkYXNoYm9hcmQ6Iiwgc3RhdHMpCiAgCiAgcmV0dXJuIHsKICAgIGNvbGxlY3Rpb25zOiBjb2xsZWN0aW9ucy5jb2xsZWN0aW9ucywKICAgIHN0YXRzCiAgfQp9Cgpjb25zdCBkYXNoYm9hcmQgPSBhd2FpdCBnZXRSZWZlcnJlckRhc2hib2FyZCgibXktZ2FtZS1wbGF0Zm9ybSIpCmBgYAoKIyMgQ29sbGVjdGlvbiBNYW5hZ2VtZW50CgojIyMgUmV0cmlldmluZyBDb2xsZWN0aW9uIERhdGEKCmBgYHR5cGVzY3JpcHQgdGl0bGU9IkdldCBDb2xsZWN0aW9uIERldGFpbHMiCi8vIEdldCBjb2xsZWN0aW9uIGJ5IGFkZHJlc3MKYXN5bmMgZnVuY3Rpb24gZ2V0Q29sbGVjdGlvbkRldGFpbHMoYWRkcmVzczogc3RyaW5nKSB7CiAgdHJ5IHsKICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBhd2FpdCBzdG9yYWdlLmdldENvbGxlY3Rpb24oYWRkcmVzcykKICAgIAogICAgY29uc29sZS5sb2coIkNvbGxlY3Rpb24gZGV0YWlsczoiLCB7CiAgICAgIG5hbWU6IGNvbGxlY3Rpb24ubmFtZSwKICAgICAgc3ltYm9sOiBjb2xsZWN0aW9uLnN5bWJvbCwKICAgICAgY3JlYXRvcjogY29sbGVjdGlvbi5jcmVhdG9yLAogICAgICBnYW1lT3duZXI6IGNvbGxlY3Rpb24uZ2FtZU93bmVyLAogICAgICBpc0RlcGxveWVkOiBjb2xsZWN0aW9uLmlzRGVwbG95ZWQsCiAgICAgIGNyZWF0ZWRBdDogY29sbGVjdGlvbi5jcmVhdGVkQXQsCiAgICAgIG1ldGFkYXRhVXJpOiBjb2xsZWN0aW9uLm1ldGFkYXRhVXJpCiAgICB9KQogICAgCiAgICByZXR1cm4gY29sbGVjdGlvbgogICAgCiAgfSBjYXRjaCAoZXJyb3I6IGFueSkgewogICAgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ25vdCBmb3VuZCcpKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBDb2xsZWN0aW9uIG5vdCBmb3VuZCcpCiAgICB9IGVsc2UgewogICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgcmV0cmlldmluZyBjb2xsZWN0aW9uOicsIGVycm9yKQogICAgfQogICAgdGhyb3cgZXJyb3IKICB9Cn0KCi8vIEdldCBtdWx0aXBsZSBjb2xsZWN0aW9ucyBieSBhZGRyZXNzZXMKYXN5bmMgZnVuY3Rpb24gZ2V0TXVsdGlwbGVDb2xsZWN0aW9ucyhhZGRyZXNzZXM6IHN0cmluZ1tdKSB7CiAgY29uc3QgY29sbGVjdGlvbnMgPSBhd2FpdCBQcm9taXNlLmFsbFNldHRsZWQoCiAgICBhZGRyZXNzZXMubWFwKGFkZHJlc3MgPT4gc3RvcmFnZS5nZXRDb2xsZWN0aW9uKGFkZHJlc3MpKQogICkKICAKICBjb25zdCBzdWNjZXNzZnVsID0gY29sbGVjdGlvbnMKICAgIC5maWx0ZXIoKHJlc3VsdCk6IHJlc3VsdCBpcyBQcm9taXNlRnVsZmlsbGVkUmVzdWx0PGFueT4gPT4gcmVzdWx0LnN0YXR1cyA9PT0gJ2Z1bGZpbGxlZCcpCiAgICAubWFwKHJlc3VsdCA9PiByZXN1bHQudmFsdWUpCiAgICAKICBjb25zdCBmYWlsZWQgPSBjb2xsZWN0aW9ucwogICAgLmZpbHRlcigocmVzdWx0KTogcmVzdWx0IGlzIFByb21pc2VSZWplY3RlZFJlc3VsdCA9PiByZXN1bHQuc3RhdHVzID09PSAncmVqZWN0ZWQnKQogICAgLm1hcChyZXN1bHQgPT4gcmVzdWx0LnJlYXNvbikKICAKICBjb25zb2xlLmxvZyhg4pyFIFJldHJpZXZlZCAke3N1Y2Nlc3NmdWwubGVuZ3RofSBjb2xsZWN0aW9uc2ApCiAgY29uc29sZS5sb2coYOKdjCBGYWlsZWQgdG8gcmV0cmlldmUgJHtmYWlsZWQubGVuZ3RofSBjb2xsZWN0aW9uc2ApCiAgCiAgcmV0dXJuIHsgc3VjY2Vzc2Z1bCwgZmFpbGVkIH0KfQpgYGAKCiMjIyBVcGRhdGluZyBDb2xsZWN0aW9ucwoKPFdhcm5pbmc+CkNvbGxlY3Rpb24gdXBkYXRlcyBhcmUgbGltaXRlZCB0byBzcGVjaWZpYyBmaWVsZHMgYW5kIG1heSByZXF1aXJlIGFkZGl0aW9uYWwgYXV0aGVudGljYXRpb24uCjwvV2FybmluZz4KCmBgYHR5cGVzY3JpcHQgdGl0bGU9IlVwZGF0ZSBDb2xsZWN0aW9uIgovLyBVcGRhdGUgY29sbGVjdGlvbiBtZXRhZGF0YSAobGltaXRlZCBmaWVsZHMpCmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUNvbGxlY3Rpb25NZXRhZGF0YSgKICBhZGRyZXNzOiBzdHJpbmcsCiAgdXBkYXRlczogewogICAgZGVzY3JpcHRpb24/OiBzdHJpbmcKICAgIGltYWdlPzogc3RyaW5nCiAgICBleHRlcm5hbF91cmw/OiBzdHJpbmcKICAgIGFuaW1hdGlvbl91cmw/OiBzdHJpbmcKICB9CikgewogIHRyeSB7CiAgICBjb25zdCB1cGRhdGVkQ29sbGVjdGlvbiA9IGF3YWl0IHN0b3JhZ2UudXBkYXRlQ29sbGVjdGlvbihhZGRyZXNzLCB1cGRhdGVzKQogICAgY29uc29sZS5sb2coJ+KchSBDb2xsZWN0aW9uIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5JykKICAgIHJldHVybiB1cGRhdGVkQ29sbGVjdGlvbgogIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHsKICAgIGlmIChlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdub3QgYXV0aG9yaXplZCcpKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBOb3QgYXV0aG9yaXplZCB0byB1cGRhdGUgdGhpcyBjb2xsZWN0aW9uJykKICAgIH0gZWxzZSBpZiAoZXJyb3IubWVzc2FnZS5pbmNsdWRlcygnaW1tdXRhYmxlIGZpZWxkJykpIHsKICAgICAgY29uc29sZS5lcnJvcign4p2MIEF0dGVtcHRlZCB0byB1cGRhdGUgaW1tdXRhYmxlIGZpZWxkJykKICAgIH0gZWxzZSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBVcGRhdGUgZmFpbGVkOicsIGVycm9yKQogICAgfQogICAgdGhyb3cgZXJyb3IKICB9Cn0KYGBgCgojIyMgRGVsZXRpbmcgQ29sbGVjdGlvbnMKCmBgYHR5cGVzY3JpcHQgdGl0bGU9IkRlbGV0ZSBDb2xsZWN0aW9ucyIKLy8gRGVsZXRlIGEgc2luZ2xlIGNvbGxlY3Rpb24gKG9ubHkgdW5kZXBsb3llZCkKYXN5bmMgZnVuY3Rpb24gZGVsZXRlQ29sbGVjdGlvbihhZGRyZXNzOiBzdHJpbmcpIHsKICB0cnkgewogICAgYXdhaXQgc3RvcmFnZS5kZWxldGVDb2xsZWN0aW9uKGFkZHJlc3MpCiAgICBjb25zb2xlLmxvZyhg4pyFIENvbGxlY3Rpb24gJHthZGRyZXNzfSBkZWxldGVkYCkKICB9IGNhdGNoIChlcnJvcjogYW55KSB7CiAgICBpZiAoZXJyb3IubWVzc2FnZS5pbmNsdWRlcygnZGVwbG95ZWQnKSkgewogICAgICBjb25zb2xlLmVycm9yKCfinYwgQ2Fubm90IGRlbGV0ZSBkZXBsb3llZCBjb2xsZWN0aW9uJykKICAgIH0gZWxzZSBpZiAoZXJyb3IubWVzc2FnZS5pbmNsdWRlcygnbm90IGZvdW5kJykpIHsKICAgICAgY29uc29sZS5lcnJvcign4p2MIENvbGxlY3Rpb24gbm90IGZvdW5kJykKICAgIH0gZWxzZSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBEZWxldGlvbiBmYWlsZWQ6JywgZXJyb3IpCiAgICB9CiAgICB0aHJvdyBlcnJvcgogIH0KfQoKLy8gQnVsayBkZWxldGUgY29sbGVjdGlvbnMgKHJlZmVycmVycyBvbmx5KQphc3luYyBmdW5jdGlvbiBidWxrRGVsZXRlQ29sbGVjdGlvbnMoCiAgaWRlbnRpZmllcnM6IHN0cmluZ1tdLCAvLyBVVUlEcyBvciBhZGRyZXNzZXMKICByZWZlcnJlcklkOiBzdHJpbmcKKSB7CiAgdHJ5IHsKICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN0b3JhZ2UuYnVsa0RlbGV0ZUNvbGxlY3Rpb25zKGlkZW50aWZpZXJzLCByZWZlcnJlcklkKQogICAgCiAgICBjb25zb2xlLmxvZyhg4pyFIERlbGV0ZWQgJHtyZXN1bHQuZGVsZXRlZC5sZW5ndGh9IGNvbGxlY3Rpb25zYCkKICAgIGNvbnNvbGUubG9nKGDinYwgRmFpbGVkIHRvIGRlbGV0ZSAke3Jlc3VsdC5mYWlsZWQubGVuZ3RofSBjb2xsZWN0aW9uc2ApCiAgICAKICAgIHJldHVybiByZXN1bHQKICB9IGNhdGNoIChlcnJvcikgewogICAgY29uc29sZS5lcnJvcign4p2MIEJ1bGsgZGVsZXRpb24gZmFpbGVkOicsIGVycm9yKQogICAgdGhyb3cgZXJyb3IKICB9Cn0KYGBgCgojIyBNZXRhZGF0YSBNYW5hZ2VtZW50CgojIyMgQ3VzdG9tIE1ldGFkYXRhIFVSSXMKCmBgYHR5cGVzY3JpcHQgdGl0bGU9Ik1ldGFkYXRhIFVSSSBIYW5kbGluZyIKLy8gR2VuZXJhdGUgbWV0YWRhdGEgVVJJIGZvciBhIGNvbGxlY3Rpb24KZnVuY3Rpb24gZ2VuZXJhdGVNZXRhZGF0YVVyaShjb2xsZWN0aW9uSWQ6IHN0cmluZywgYmFzZVVybDogc3RyaW5nKTogc3RyaW5nIHsKICByZXR1cm4gYCR7YmFzZVVybH0vbWV0YWRhdGEvJHtjb2xsZWN0aW9uSWR9YAp9CgovLyBHZXQgbWV0YWRhdGEgZGlyZWN0bHkKYXN5bmMgZnVuY3Rpb24gZ2V0Q29sbGVjdGlvbk1ldGFkYXRhKGNvbGxlY3Rpb25JZDogc3RyaW5nKSB7CiAgdHJ5IHsKICAgIGNvbnN0IG1ldGFkYXRhVXJpID0gZ2VuZXJhdGVNZXRhZGF0YVVyaShjb2xsZWN0aW9uSWQsIHN0b3JhZ2UuYmFzZVVybCkKICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2gobWV0YWRhdGFVcmkpCiAgICAKICAgIGlmICghcmVzcG9uc2Uub2spIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKGBIVFRQICR7cmVzcG9uc2Uuc3RhdHVzfTogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApCiAgICB9CiAgICAKICAgIGNvbnN0IG1ldGFkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpCiAgICByZXR1cm4gbWV0YWRhdGEKICB9IGNhdGNoIChlcnJvcikgewogICAgY29uc29sZS5lcnJvcign4p2MIEZhaWxlZCB0byBmZXRjaCBtZXRhZGF0YTonLCBlcnJvcikKICAgIHRocm93IGVycm9yCiAgfQp9CgovLyBWYWxpZGF0ZSBtZXRhZGF0YSBmb3JtYXQKZnVuY3Rpb24gdmFsaWRhdGVNZXRhZGF0YShtZXRhZGF0YTogYW55KTogeyBpc1ZhbGlkOiBib29sZWFuOyBlcnJvcnM6IHN0cmluZ1tdIH0gewogIGNvbnN0IGVycm9yczogc3RyaW5nW10gPSBbXQogIAogIGlmICghbWV0YWRhdGEubmFtZSkgZXJyb3JzLnB1c2goJ01pc3NpbmcgbmFtZScpCiAgaWYgKCFtZXRhZGF0YS5kZXNjcmlwdGlvbikgZXJyb3JzLnB1c2goJ01pc3NpbmcgZGVzY3JpcHRpb24nKQogIGlmICghbWV0YWRhdGEuaW1hZ2UpIGVycm9ycy5wdXNoKCdNaXNzaW5nIGltYWdlJykKICAKICAvLyBDaGVjayBPcGVuU2VhIGNvbXBhdGliaWxpdHkKICBpZiAobWV0YWRhdGEuYXR0cmlidXRlcyAmJiAhQXJyYXkuaXNBcnJheShtZXRhZGF0YS5hdHRyaWJ1dGVzKSkgewogICAgZXJyb3JzLnB1c2goJ0F0dHJpYnV0ZXMgbXVzdCBiZSBhbiBhcnJheScpCiAgfQogIAogIHJldHVybiB7CiAgICBpc1ZhbGlkOiBlcnJvcnMubGVuZ3RoID09PSAwLAogICAgZXJyb3JzCiAgfQp9CmBgYAoKIyMjIEFzc2V0IE1hbmFnZW1lbnQKCmBgYHR5cGVzY3JpcHQgdGl0bGU9IkFzc2V0IFVwbG9hZCBhbmQgTWFuYWdlbWVudCIKLy8gVXBsb2FkIGFzc2V0cyB0byBzdG9yYWdlIHNlcnZpY2UgKGlmIHN1cHBvcnRlZCkKYXN5bmMgZnVuY3Rpb24gdXBsb2FkQXNzZXQoCiAgZmlsZTogRmlsZSB8IEJ1ZmZlciwKICBmaWxlbmFtZTogc3RyaW5nLAogIGNvbnRlbnRUeXBlOiBzdHJpbmcKKTogUHJvbWlzZTxzdHJpbmc+IHsKICB0cnkgewogICAgLy8gVGhpcyBkZXBlbmRzIG9uIHlvdXIgc3RvcmFnZSBzZXJ2aWNlIGltcGxlbWVudGF0aW9uCiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpCiAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBmaWxlLCBmaWxlbmFtZSkKICAgIGZvcm1EYXRhLmFwcGVuZCgnY29udGVudFR5cGUnLCBjb250ZW50VHlwZSkKICAgIAogICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtzdG9yYWdlLmJhc2VVcmx9L3VwbG9hZGAsIHsKICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgIGJvZHk6IGZvcm1EYXRhCiAgICB9KQogICAgCiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcihgVXBsb2FkIGZhaWxlZDogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApCiAgICB9CiAgICAKICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKQogICAgcmV0dXJuIHJlc3VsdC51cmwKICAgIAogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICBjb25zb2xlLmVycm9yKCfinYwgQXNzZXQgdXBsb2FkIGZhaWxlZDonLCBlcnJvcikKICAgIHRocm93IGVycm9yCiAgfQp9CgovLyBPcHRpbWl6ZSBpbWFnZXMgZm9yIE5GVCBzdGFuZGFyZHMKZnVuY3Rpb24gZ2V0T3B0aW1pemVkSW1hZ2VVcmwoCiAgb3JpZ2luYWxVcmw6IHN0cmluZywKICBzaXplOiAndGh1bWJuYWlsJyB8ICdtZWRpdW0nIHwgJ2xhcmdlJyA9ICdtZWRpdW0nCik6IHN0cmluZyB7CiAgY29uc3Qgc2l6ZU1hcCA9IHsKICAgIHRodW1ibmFpbDogJzIwMHgyMDAnLAogICAgbWVkaXVtOiAnNjQweDY0MCcsCiAgICBsYXJnZTogJzEyMDB4MTIwMCcKICB9CiAgCiAgLy8gRXhhbXBsZSBDRE4gVVJMIHRyYW5zZm9ybWF0aW9uCiAgcmV0dXJuIGAke29yaWdpbmFsVXJsfT9zaXplPSR7c2l6ZU1hcFtzaXplXX0mZm9ybWF0PXdlYnAmcXVhbGl0eT04NWAKfQpgYGAKCiMjIEVycm9yIEhhbmRsaW5nCgojIyMgQ29tcHJlaGVuc2l2ZSBFcnJvciBIYW5kbGluZwoKYGBgdHlwZXNjcmlwdCB0aXRsZT0iRXJyb3IgSGFuZGxpbmcgUGF0dGVybnMiCmNsYXNzIFN0b3JhZ2VFcnJvciBleHRlbmRzIEVycm9yIHsKICBjb25zdHJ1Y3RvcigKICAgIG1lc3NhZ2U6IHN0cmluZywKICAgIHB1YmxpYyBjb2RlOiBzdHJpbmcsCiAgICBwdWJsaWMgc3RhdHVzQ29kZT86IG51bWJlcgogICkgewogICAgc3VwZXIobWVzc2FnZSkKICAgIHRoaXMubmFtZSA9ICdTdG9yYWdlRXJyb3InCiAgfQp9Cgphc3luYyBmdW5jdGlvbiByb2J1c3RTdG9yYWdlT3BlcmF0aW9uPFQ+KAogIG9wZXJhdGlvbjogKCkgPT4gUHJvbWlzZTxUPiwKICByZXRyaWVzOiBudW1iZXIgPSAzLAogIGRlbGF5TXM6IG51bWJlciA9IDEwMDAKKTogUHJvbWlzZTxUPiB7CiAgbGV0IGxhc3RFcnJvcjogRXJyb3IKICAKICBmb3IgKGxldCBhdHRlbXB0ID0gMTsgYXR0ZW1wdCA8PSByZXRyaWVzOyBhdHRlbXB0KyspIHsKICAgIHRyeSB7CiAgICAgIHJldHVybiBhd2FpdCBvcGVyYXRpb24oKQogICAgfSBjYXRjaCAoZXJyb3I6IGFueSkgewogICAgICBsYXN0RXJyb3IgPSBlcnJvcgogICAgICAKICAgICAgLy8gRG9uJ3QgcmV0cnkgY2VydGFpbiBlcnJvcnMKICAgICAgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ0ludmFsaWQgc2lnbmF0dXJlJykgfHwKICAgICAgICAgIGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ0NvbGxlY3Rpb24gZXhpc3RzJykpIHsKICAgICAgICB0aHJvdyBlcnJvcgogICAgICB9CiAgICAgIAogICAgICBjb25zb2xlLndhcm4oYEF0dGVtcHQgJHthdHRlbXB0fSBmYWlsZWQ6YCwgZXJyb3IubWVzc2FnZSkKICAgICAgCiAgICAgIGlmIChhdHRlbXB0IDwgcmV0cmllcykgewogICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBkZWxheU1zICogYXR0ZW1wdCkpCiAgICAgIH0KICAgIH0KICB9CiAgCiAgdGhyb3cgbmV3IFN0b3JhZ2VFcnJvcigKICAgIGBPcGVyYXRpb24gZmFpbGVkIGFmdGVyICR7cmV0cmllc30gYXR0ZW1wdHM6ICR7bGFzdEVycm9yLm1lc3NhZ2V9YCwKICAgICdNQVhfUkVUUklFU19FWENFRURFRCcKICApCn0KCi8vIFVzYWdlCmNvbnN0IHJlc3VsdCA9IGF3YWl0IHJvYnVzdFN0b3JhZ2VPcGVyYXRpb24oYXN5bmMgKCkgPT4gewogIHJldHVybiBhd2FpdCBzdG9yYWdlLnN1Ym1pdENvbGxlY3Rpb24obWV0YWRhdGEsIHNpZ25hdHVyZSkKfSkKYGBgCgojIyMgU2VydmljZSBIZWFsdGggTW9uaXRvcmluZwoKYGBgdHlwZXNjcmlwdCB0aXRsZT0iSGVhbHRoIE1vbml0b3JpbmciCmNsYXNzIFN0b3JhZ2VIZWFsdGhNb25pdG9yIHsKICBwcml2YXRlIHN0b3JhZ2U6IEJhc2VNaW50U3RvcmFnZQogIHByaXZhdGUgaGVhbHRoU3RhdHVzOiAnaGVhbHRoeScgfCAnZGVncmFkZWQnIHwgJ3VuaGVhbHRoeScgPSAnaGVhbHRoeScKICBwcml2YXRlIGxhc3RDaGVjazogRGF0ZSA9IG5ldyBEYXRlKCkKICAKICBjb25zdHJ1Y3RvcihzdG9yYWdlOiBCYXNlTWludFN0b3JhZ2UpIHsKICAgIHRoaXMuc3RvcmFnZSA9IHN0b3JhZ2UKICB9CiAgCiAgYXN5bmMgY2hlY2tIZWFsdGgoKTogUHJvbWlzZTx7IHN0YXR1czogc3RyaW5nOyBsYXRlbmN5OiBudW1iZXI7IHRpbWVzdGFtcDogRGF0ZSB9PiB7CiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpCiAgICAKICAgIHRyeSB7CiAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZS5oZWFsdGhDaGVjaygpCiAgICAgIGNvbnN0IGxhdGVuY3kgPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lCiAgICAgIAogICAgICB0aGlzLmhlYWx0aFN0YXR1cyA9IGxhdGVuY3kgPCAyMDAwID8gJ2hlYWx0aHknIDogJ2RlZ3JhZGVkJwogICAgICB0aGlzLmxhc3RDaGVjayA9IG5ldyBEYXRlKCkKICAgICAgCiAgICAgIHJldHVybiB7CiAgICAgICAgc3RhdHVzOiB0aGlzLmhlYWx0aFN0YXR1cywKICAgICAgICBsYXRlbmN5LAogICAgICAgIHRpbWVzdGFtcDogdGhpcy5sYXN0Q2hlY2sKICAgICAgfQogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgdGhpcy5oZWFsdGhTdGF0dXMgPSAndW5oZWFsdGh5JwogICAgICB0aGlzLmxhc3RDaGVjayA9IG5ldyBEYXRlKCkKICAgICAgCiAgICAgIHRocm93IG5ldyBTdG9yYWdlRXJyb3IoCiAgICAgICAgJ1N0b3JhZ2Ugc2VydmljZSBoZWFsdGggY2hlY2sgZmFpbGVkJywKICAgICAgICAnSEVBTFRIX0NIRUNLX0ZBSUxFRCcKICAgICAgKQogICAgfQogIH0KICAKICBnZXRTdGF0dXMoKTogeyBzdGF0dXM6IHN0cmluZzsgbGFzdENoZWNrOiBEYXRlIH0gewogICAgcmV0dXJuIHsKICAgICAgc3RhdHVzOiB0aGlzLmhlYWx0aFN0YXR1cywKICAgICAgbGFzdENoZWNrOiB0aGlzLmxhc3RDaGVjawogICAgfQogIH0KICAKICBhc3luYyB3YWl0Rm9ySGVhbHRoeSh0aW1lb3V0TXM6IG51bWJlciA9IDMwMDAwKTogUHJvbWlzZTx2b2lkPiB7CiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpCiAgICAKICAgIHdoaWxlIChEYXRlLm5vdygpIC0gc3RhcnRUaW1lIDwgdGltZW91dE1zKSB7CiAgICAgIHRyeSB7CiAgICAgICAgYXdhaXQgdGhpcy5jaGVja0hlYWx0aCgpCiAgICAgICAgaWYgKHRoaXMuaGVhbHRoU3RhdHVzID09PSAnaGVhbHRoeScpIHJldHVybgogICAgICB9IGNhdGNoIHsKICAgICAgICAvLyBDb250aW51ZSB3YWl0aW5nCiAgICAgIH0KICAgICAgCiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDAwKSkKICAgIH0KICAgIAogICAgdGhyb3cgbmV3IFN0b3JhZ2VFcnJvcigKICAgICAgJ1N0b3JhZ2Ugc2VydmljZSBkaWQgbm90IGJlY29tZSBoZWFsdGh5IHdpdGhpbiB0aW1lb3V0JywKICAgICAgJ0hFQUxUSF9USU1FT1VUJwogICAgKQogIH0KfQoKLy8gVXNhZ2UKY29uc3QgaGVhbHRoTW9uaXRvciA9IG5ldyBTdG9yYWdlSGVhbHRoTW9uaXRvcihzdG9yYWdlKQphd2FpdCBoZWFsdGhNb25pdG9yLndhaXRGb3JIZWFsdGh5KCkKY29uc29sZS5sb2coJ+KchSBTdG9yYWdlIHNlcnZpY2UgaXMgaGVhbHRoeScpCmBgYAoKIyMgQmVzdCBQcmFjdGljZXMKCiMjIyBQZXJmb3JtYW5jZSBPcHRpbWl6YXRpb24KCjxDYXJkR3JvdXAgY29scz17Mn0+CiAgPENhcmQgdGl0bGU9IkNhY2hpbmciIGljb249ImJvbHQiPgogICAgLSBDYWNoZSBmcmVxdWVudGx5IGFjY2Vzc2VkIGNvbGxlY3Rpb24gZGF0YQogICAgLSBVc2UgRVRhZ3MgZm9yIGNvbmRpdGlvbmFsIHJlcXVlc3RzCiAgICAtIEltcGxlbWVudCBjbGllbnQtc2lkZSBjYWNoaW5nIHN0cmF0ZWdpZXMKICAgIC0gQ29uc2lkZXIgUmVkaXMgZm9yIHNlcnZlci1zaWRlIGNhY2hpbmcKICA8L0NhcmQ+CiAgPENhcmQgdGl0bGU9IkJhdGNoIE9wZXJhdGlvbnMiIGljb249ImxheWVyLWdyb3VwIj4KICAgIC0gR3JvdXAgbXVsdGlwbGUgb3BlcmF0aW9ucyB3aGVuIHBvc3NpYmxlCiAgICAtIFVzZSBidWxrIGVuZHBvaW50cyBmb3IgZWZmaWNpZW5jeQogICAgLSBJbXBsZW1lbnQgcHJvcGVyIHF1ZXVlIG1hbmFnZW1lbnQKICAgIC0gSGFuZGxlIHJhdGUgbGltaXRpbmcgZ3JhY2VmdWxseQogIDwvQ2FyZD4KPC9DYXJkR3JvdXA+CgojIyMgU2VjdXJpdHkgQ29uc2lkZXJhdGlvbnMKCmBgYHR5cGVzY3JpcHQgdGl0bGU9IlNlY3VyaXR5IEJlc3QgUHJhY3RpY2VzIgovLyBWYWxpZGF0ZSBzaWduYXR1cmVzIGJlZm9yZSBzdWJtaXNzaW9uCmZ1bmN0aW9uIHZhbGlkYXRlU2lnbmF0dXJlTG9jYWxseSgKICBjb2xsZWN0aW9uTWV0YWRhdGE6IGFueSwKICBzaWduYXR1cmU6IHN0cmluZywKICBleHBlY3RlZFNpZ25lcjogc3RyaW5nCik6IGJvb2xlYW4gewogIC8vIEltcGxlbWVudCBsb2NhbCBzaWduYXR1cmUgdmFsaWRhdGlvbgogIC8vIFRoaXMgcHJvdmlkZXMgYW4gYWRkaXRpb25hbCBzZWN1cml0eSBsYXllcgogIHRyeSB7CiAgICBjb25zdCByZWNvdmVyZWRBZGRyZXNzID0gcmVjb3ZlclNpZ25lckZyb21NZXRhZGF0YShjb2xsZWN0aW9uTWV0YWRhdGEsIHNpZ25hdHVyZSkKICAgIHJldHVybiByZWNvdmVyZWRBZGRyZXNzLnRvTG93ZXJDYXNlKCkgPT09IGV4cGVjdGVkU2lnbmVyLnRvTG93ZXJDYXNlKCkKICB9IGNhdGNoIHsKICAgIHJldHVybiBmYWxzZQogIH0KfQoKLy8gU2FuaXRpemUgbWV0YWRhdGEgYmVmb3JlIHN1Ym1pc3Npb24KZnVuY3Rpb24gc2FuaXRpemVNZXRhZGF0YShtZXRhZGF0YTogYW55KTogYW55IHsKICByZXR1cm4gewogICAgLi4ubWV0YWRhdGEsCiAgICAvLyBSZW1vdmUgcG90ZW50aWFsbHkgZGFuZ2Vyb3VzIGZpZWxkcwogICAgbmFtZTogc2FuaXRpemVTdHJpbmcobWV0YWRhdGEubmFtZSksCiAgICBkZXNjcmlwdGlvbjogc2FuaXRpemVTdHJpbmcobWV0YWRhdGEuZGVzY3JpcHRpb24pLAogICAgLy8gVmFsaWRhdGUgVVJMcwogICAgaW1hZ2U6IHZhbGlkYXRlSW1hZ2VVcmwobWV0YWRhdGEuaW1hZ2UpLAogICAgZXh0ZXJuYWxfdXJsOiB2YWxpZGF0ZVVybChtZXRhZGF0YS5leHRlcm5hbF91cmwpCiAgfQp9CgpmdW5jdGlvbiBzYW5pdGl6ZVN0cmluZyhpbnB1dDogc3RyaW5nKTogc3RyaW5nIHsKICByZXR1cm4gaW5wdXQ/LnJlcGxhY2UoLzxzY3JpcHRcYltePF0qKD86KD8hPFwvc2NyaXB0Pik8W148XSopKjxcL3NjcmlwdD4vZ2ksICcnKSB8fCAnJwp9CmBgYAoKIyMgSW50ZWdyYXRpb24gRXhhbXBsZXMKCiMjIyBSZWFjdCBJbnRlZ3JhdGlvbgoKYGBgdHN4IHRpdGxlPSJSZWFjdCBTdG9yYWdlIEhvb2siCmltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCcKCmludGVyZmFjZSBVc2VTdG9yYWdlUmVzdWx0IHsKICBjb2xsZWN0aW9uczogYW55W10KICBsb2FkaW5nOiBib29sZWFuCiAgZXJyb3I6IHN0cmluZyB8IG51bGwKICByZWZldGNoOiAoKSA9PiBQcm9taXNlPHZvaWQ+Cn0KCmV4cG9ydCBmdW5jdGlvbiB1c2VTdG9yYWdlQ29sbGVjdGlvbnMoCiAgc3RvcmFnZTogQmFzZU1pbnRTdG9yYWdlLAogIGZpbHRlcnM/OiBhbnkKKTogVXNlU3RvcmFnZVJlc3VsdCB7CiAgY29uc3QgW2NvbGxlY3Rpb25zLCBzZXRDb2xsZWN0aW9uc10gPSB1c2VTdGF0ZTxhbnlbXT4oW10pCiAgY29uc3QgW2xvYWRpbmcsIHNldExvYWRpbmddID0gdXNlU3RhdGUodHJ1ZSkKICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpCiAgCiAgY29uc3QgZmV0Y2hDb2xsZWN0aW9ucyA9IGFzeW5jICgpID0+IHsKICAgIHRyeSB7CiAgICAgIHNldExvYWRpbmcodHJ1ZSkKICAgICAgc2V0RXJyb3IobnVsbCkKICAgICAgCiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN0b3JhZ2UucXVlcnlDb2xsZWN0aW9ucyhmaWx0ZXJzKQogICAgICBzZXRDb2xsZWN0aW9ucyhyZXN1bHQuY29sbGVjdGlvbnMpCiAgICB9IGNhdGNoIChlcnI6IGFueSkgewogICAgICBzZXRFcnJvcihlcnIubWVzc2FnZSkKICAgIH0gZmluYWxseSB7CiAgICAgIHNldExvYWRpbmcoZmFsc2UpCiAgICB9CiAgfQogIAogIHVzZUVmZmVjdCgoKSA9PiB7CiAgICBmZXRjaENvbGxlY3Rpb25zKCkKICB9LCBbc3RvcmFnZSwgSlNPTi5zdHJpbmdpZnkoZmlsdGVycyldKQogIAogIHJldHVybiB7CiAgICBjb2xsZWN0aW9ucywKICAgIGxvYWRpbmcsCiAgICBlcnJvciwKICAgIHJlZmV0Y2g6IGZldGNoQ29sbGVjdGlvbnMKICB9Cn0KYGBgCgojIyBOZXh0IFN0ZXBzCgo8Q2FyZEdyb3VwIGNvbHM9ezJ9PgogIDxDYXJkIHRpdGxlPSJFeGFtcGxlcyIgaWNvbj0iY29kZSIgaHJlZj0iL2NyZWF0ZWtpdC9leGFtcGxlcyI+CiAgICBTZWUgY29tcGxldGUgaW1wbGVtZW50YXRpb24gZXhhbXBsZXMgdXNpbmcgdGhlIHN0b3JhZ2Ugc2VydmljZQogIDwvQ2FyZD4KICA8Q2FyZCB0aXRsZT0iRXJyb3IgSGFuZGxpbmciIGljb249ImJ1ZyIgaHJlZj0iL2NyZWF0ZWtpdC9lcnJvci1oYW5kbGluZyI+CiAgICBMZWFybiBjb21wcmVoZW5zaXZlIGVycm9yIGhhbmRsaW5nIHBhdHRlcm5zCiAgPC9DYXJkPgo8L0NhcmRHcm91cD4K",
    "lastUpdated": "2025-09-03T02:52:14.596Z"
  },
  {
    "sourceFile": "createkit/rewards.mdx",
    "sourceHash": "CiMjIE92ZXJ2aWV3CgpDcmVhdGVLaXQgZmVhdHVyZXMgYW4gaW5ub3ZhdGl2ZSByZXdhcmQgc3lzdGVtIHRoYXQgZGlzdHJpYnV0ZXMgYSBwb3J0aW9uIG9mIGVhY2ggbWludCdzIHZhbHVlIHRvIHZhcmlvdXMgcGFydGljaXBhbnRzIGluIHRoZSBlY29zeXN0ZW0uIFRoaXMgY3JlYXRlcyBhbGlnbmVkIGluY2VudGl2ZXMgYW5kIGVuc3VyZXMgYWxsIGNvbnRyaWJ1dG9ycyBiZW5lZml0IGZyb20gc3VjY2Vzc2Z1bCBjb2xsZWN0aW9ucy4KCiMjIFJld2FyZCBTdHJ1Y3R1cmUKCiMjIyBEZWZhdWx0IERpc3RyaWJ1dGlvbgoKfCBSZWNpcGllbnQgVHlwZSB8IERlZmF1bHQgU2hhcmUgfCBEZXNjcmlwdGlvbiB8CnwtLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tfAp8ICoqQ3JlYXRvcioqIHwgNDAlIHwgQ29sbGVjdGlvbiBvcmlnaW5hdG9yIHdobyBjcmVhdGVkIHRoZSBjb2xsZWN0aW9uIHwKfCAqKkZpcnN0IE1pbnRlcioqIHwgMzAlIHwgVXNlciB3aG8gdHJpZ2dlcnMgdGhlIGluaXRpYWwgZGVwbG95bWVudCBhbmQgZmlyc3QgbWludCB8CnwgKipHYW1lIE93bmVyKiogfCAyMCUgfCBQbGF0Zm9ybSBvciBnYW1lIHRoYXQgaW50ZWdyYXRlcyB0aGUgY29sbGVjdGlvbiB8CnwgKipQbGF0Zm9ybSoqIHwgMTAlIHwgQmFzZU1pbnQgcHJvdG9jb2wgZmVlIHwKCjxOb3RlPgpSZXdhcmQgcmF0ZXMgYXJlIGNvbmZpZ3VyYWJsZSBieSB0aGUgcHJvdG9jb2wgYWRtaW5pc3RyYXRvciBhbmQgbWF5IHZhcnkgYmV0d2VlbiBkZXBsb3ltZW50cy4KPC9Ob3RlPgoKIyMjIEhvdyBSZXdhcmRzIFdvcmsKCjEuICoqTWludCBQYXltZW50Kio6IFVzZXIgcGF5cyB0aGUgbWludCBwcmljZSBmb3IgdG9rZW5zCjIuICoqUmV3YXJkIENhbGN1bGF0aW9uKio6IEEgcGVyY2VudGFnZSBvZiB0aGUgcGF5bWVudCBpcyBhbGxvY2F0ZWQgdG8gdGhlIHJld2FyZCBwb29sCjMuICoqRGlzdHJpYnV0aW9uKio6IFJld2FyZHMgYXJlIGRpc3RyaWJ1dGVkIGFjY29yZGluZyB0byB0aGUgY29uZmlndXJlZCByYXRlcwo0LiAqKkFjY3VtdWxhdGlvbioqOiBSZXdhcmRzIGFjY3VtdWxhdGUgaW4gdGhlIGVzY3JvdyBjb250cmFjdCB1bnRpbCBjbGFpbWVkCgojIyBSZXdhcmQgVHJhY2tpbmcKCiMjIyBTZXR0aW5nIFVwIFJld2FyZCBUcmFja2luZwoKYGBgdHlwZXNjcmlwdCB0aXRsZT0iSW5pdGlhbGl6ZSBSZXdhcmQgVHJhY2tlciIKaW1wb3J0IHsgUmV3YXJkVHJhY2tlciB9IGZyb20gJ0BiM2RvdGZ1bi9iYXNlbWludCcKaW1wb3J0IHsgY3JlYXRlUHVibGljQ2xpZW50LCBodHRwIH0gZnJvbSAndmllbScKaW1wb3J0IHsgYjNUZXN0bmV0IH0gZnJvbSAnQGIzZG90ZnVuL2Jhc2VtaW50JwoKY29uc3QgcHVibGljQ2xpZW50ID0gY3JlYXRlUHVibGljQ2xpZW50KHsKICBjaGFpbjogYjNUZXN0bmV0LAogIHRyYW5zcG9ydDogaHR0cCgpCn0pCgpjb25zdCByZXdhcmRUcmFja2VyID0gbmV3IFJld2FyZFRyYWNrZXIocHVibGljQ2xpZW50KQoKLy8gR2V0IGVzY3JvdyBjb250cmFjdCBhZGRyZXNzCmNvbnN0IGVzY3Jvd0FkZHJlc3MgPSByZXdhcmRUcmFja2VyLmdldEVzY3Jvd0FkZHJlc3MoKQpjb25zb2xlLmxvZyhgRXNjcm93IGNvbnRyYWN0OiAke2VzY3Jvd0FkZHJlc3N9YCkKYGBgCgojIyMgQ29sbGVjdGlvbi1MZXZlbCBSZXdhcmRzCgpUcmFjayByZXdhcmRzIGFjY3VtdWxhdGVkIGZvciBhbiBlbnRpcmUgY29sbGVjdGlvbjoKCmBgYHR5cGVzY3JpcHQgdGl0bGU9IkNvbGxlY3Rpb24gUmV3YXJkcyIKLy8gR2V0IHRvdGFsIHJld2FyZHMgZm9yIGEgY29sbGVjdGlvbgpjb25zdCBjb2xsZWN0aW9uUmV3YXJkcyA9IGF3YWl0IHJld2FyZFRyYWNrZXIuZ2V0Q29sbGVjdGlvblJld2FyZHMoCiAgZXNjcm93QWRkcmVzcywKICBjb2xsZWN0aW9uQWRkcmVzcwopCgpjb25zb2xlLmxvZygiQ29sbGVjdGlvbiBSZXdhcmRzOiIsIHsKICB0b3RhbFJld2FyZHM6IGNvbGxlY3Rpb25SZXdhcmRzLnRvdGFsUmV3YXJkcy50b1N0cmluZygpLAogIHVuY2xhaW1lZFJld2FyZHM6IGNvbGxlY3Rpb25SZXdhcmRzLnVuY2xhaW1lZFJld2FyZHMudG9TdHJpbmcoKSwKICB0b3RhbE1pbnRzOiBjb2xsZWN0aW9uUmV3YXJkcy50b3RhbE1pbnRzLnRvU3RyaW5nKCksCiAgYXZlcmFnZVJld2FyZFBlck1pbnQ6ICgKICAgIGNvbGxlY3Rpb25SZXdhcmRzLnRvdGFsUmV3YXJkcyAvIGNvbGxlY3Rpb25SZXdhcmRzLnRvdGFsTWludHMKICApLnRvU3RyaW5nKCkKfSkKYGBgCgojIyMgSW5kaXZpZHVhbCBSZWNpcGllbnQgUmV3YXJkcwoKVHJhY2sgcmV3YXJkcyBmb3Igc3BlY2lmaWMgcGFydGljaXBhbnRzOgoKPFRhYnM+CjxUYWIgdGl0bGU9IkNyZWF0b3IgUmV3YXJkcyI+CmBgYHR5cGVzY3JpcHQKLy8gR2V0IGNyZWF0b3IgcmV3YXJkcyBmb3IgYSBjb2xsZWN0aW9uCmNvbnN0IGNyZWF0b3JSZXdhcmRzID0gYXdhaXQgcmV3YXJkVHJhY2tlci5nZXRSZWNpcGllbnRSZXdhcmRzKAogIGVzY3Jvd0FkZHJlc3MsCiAgY29sbGVjdGlvbkFkZHJlc3MsCiAgIkNSRUFUT1IiLAogIGNyZWF0b3JBZGRyZXNzCikKCmNvbnNvbGUubG9nKGBDcmVhdG9yIHJld2FyZHM6ICR7Y3JlYXRvclJld2FyZHMudG9TdHJpbmcoKX0gd2VpYCkKYGBgCjwvVGFiPgoKPFRhYiB0aXRsZT0iRmlyc3QgTWludGVyIFJld2FyZHMiPgpgYGB0eXBlc2NyaXB0Ci8vIEdldCBmaXJzdCBtaW50ZXIgcmV3YXJkcwpjb25zdCBmaXJzdE1pbnRlclJld2FyZHMgPSBhd2FpdCByZXdhcmRUcmFja2VyLmdldFJlY2lwaWVudFJld2FyZHMoCiAgZXNjcm93QWRkcmVzcywKICBjb2xsZWN0aW9uQWRkcmVzcywKICAiRklSU1RfTUlOVEVSIiwgCiAgZmlyc3RNaW50ZXJBZGRyZXNzCikKCmNvbnNvbGUubG9nKGBGaXJzdCBtaW50ZXIgcmV3YXJkczogJHtmaXJzdE1pbnRlclJld2FyZHMudG9TdHJpbmcoKX0gd2VpYCkKYGBgCjwvVGFiPgoKPFRhYiB0aXRsZT0iR2FtZSBPd25lciBSZXdhcmRzIj4KYGBgdHlwZXNjcmlwdAovLyBHZXQgZ2FtZSBvd25lciByZXdhcmRzCmNvbnN0IGdhbWVPd25lclJld2FyZHMgPSBhd2FpdCByZXdhcmRUcmFja2VyLmdldFJlY2lwaWVudFJld2FyZHMoCiAgZXNjcm93QWRkcmVzcywKICBjb2xsZWN0aW9uQWRkcmVzcywKICAiR0FNRV9PV05FUiIsCiAgZ2FtZU93bmVyQWRkcmVzcwopCgpjb25zb2xlLmxvZyhgR2FtZSBvd25lciByZXdhcmRzOiAke2dhbWVPd25lclJld2FyZHMudG9TdHJpbmcoKX0gd2VpYCkKYGBgCjwvVGFiPgo8L1RhYnM+CgojIyMgQWxsIFJlY2lwaWVudHMgZm9yIGEgQ29sbGVjdGlvbgoKYGBgdHlwZXNjcmlwdCB0aXRsZT0iQWxsIFJlY2lwaWVudCBSZXdhcmRzIgovLyBHZXQgcmV3YXJkcyBmb3IgYWxsIHJlY2lwaWVudCB0eXBlcwpjb25zdCBhbGxSZXdhcmRzID0gYXdhaXQgUHJvbWlzZS5hbGwoWwogIHJld2FyZFRyYWNrZXIuZ2V0UmVjaXBpZW50UmV3YXJkcyhlc2Nyb3dBZGRyZXNzLCBjb2xsZWN0aW9uQWRkcmVzcywgIkNSRUFUT1IiLCBjcmVhdG9yQWRkcmVzcyksCiAgcmV3YXJkVHJhY2tlci5nZXRSZWNpcGllbnRSZXdhcmRzKGVzY3Jvd0FkZHJlc3MsIGNvbGxlY3Rpb25BZGRyZXNzLCAiRklSU1RfTUlOVEVSIiwgZmlyc3RNaW50ZXJBZGRyZXNzKSwKICByZXdhcmRUcmFja2VyLmdldFJlY2lwaWVudFJld2FyZHMoZXNjcm93QWRkcmVzcywgY29sbGVjdGlvbkFkZHJlc3MsICJHQU1FX09XTkVSIiwgZ2FtZU93bmVyQWRkcmVzcyksCiAgcmV3YXJkVHJhY2tlci5nZXRSZWNpcGllbnRSZXdhcmRzKGVzY3Jvd0FkZHJlc3MsIGNvbGxlY3Rpb25BZGRyZXNzLCAiUExBVEZPUk0iLCBwbGF0Zm9ybUFkZHJlc3MpCl0pCgpjb25zdCBbY3JlYXRvclJld2FyZHMsIGZpcnN0TWludGVyUmV3YXJkcywgZ2FtZU93bmVyUmV3YXJkcywgcGxhdGZvcm1SZXdhcmRzXSA9IGFsbFJld2FyZHMKCmNvbnNvbGUubG9nKCJSZXdhcmQgRGlzdHJpYnV0aW9uOiIsIHsKICBjcmVhdG9yOiBjcmVhdG9yUmV3YXJkcy50b1N0cmluZygpLAogIGZpcnN0TWludGVyOiBmaXJzdE1pbnRlclJld2FyZHMudG9TdHJpbmcoKSwKICBnYW1lT3duZXI6IGdhbWVPd25lclJld2FyZHMudG9TdHJpbmcoKSwKICBwbGF0Zm9ybTogcGxhdGZvcm1SZXdhcmRzLnRvU3RyaW5nKCksCiAgdG90YWw6IChjcmVhdG9yUmV3YXJkcyArIGZpcnN0TWludGVyUmV3YXJkcyArIGdhbWVPd25lclJld2FyZHMgKyBwbGF0Zm9ybVJld2FyZHMpLnRvU3RyaW5nKCkKfSkKYGBgCgojIyBSZXdhcmQgRXZlbnRzCgojIyMgVHJhY2tpbmcgUmV3YXJkIERpc3RyaWJ1dGlvbnMKCmBgYHR5cGVzY3JpcHQgdGl0bGU9IlJld2FyZCBFdmVudCBNb25pdG9yaW5nIgppbXBvcnQgeyBnZXRSZXdhcmREaXN0cmlidXRpb25FdmVudHMgfSBmcm9tICdAYjNkb3RmdW4vYmFzZW1pbnQnCgovLyBHZXQgaGlzdG9yaWNhbCByZXdhcmQgZGlzdHJpYnV0aW9uIGV2ZW50cwpjb25zdCBmcm9tQmxvY2sgPSBhd2FpdCBwdWJsaWNDbGllbnQuZ2V0QmxvY2tOdW1iZXIoKSAtIDEwMDBuCmNvbnN0IHRvQmxvY2sgPSBhd2FpdCBwdWJsaWNDbGllbnQuZ2V0QmxvY2tOdW1iZXIoKQoKY29uc3QgcmV3YXJkRXZlbnRzID0gYXdhaXQgZ2V0UmV3YXJkRGlzdHJpYnV0aW9uRXZlbnRzKAogIHB1YmxpY0NsaWVudCwKICBlc2Nyb3dBZGRyZXNzLAogIGZyb21CbG9jaywKICB0b0Jsb2NrCikKCmNvbnNvbGUubG9nKCJSZWNlbnQgcmV3YXJkIGRpc3RyaWJ1dGlvbnM6IikKcmV3YXJkRXZlbnRzLmZvckVhY2goZXZlbnQgPT4gewogIGNvbnNvbGUubG9nKHsKICAgIGNvbGxlY3Rpb246IGV2ZW50LmFyZ3MuY29sbGVjdGlvbiwKICAgIHJlY2lwaWVudDogZXZlbnQuYXJncy5yZWNpcGllbnQsCiAgICByZWNpcGllbnRUeXBlOiBldmVudC5hcmdzLnJlY2lwaWVudFR5cGUsCiAgICBhbW91bnQ6IGV2ZW50LmFyZ3MuYW1vdW50Py50b1N0cmluZygpLAogICAgYmxvY2tOdW1iZXI6IGV2ZW50LmJsb2NrTnVtYmVyCiAgfSkKfSkKYGBgCgojIyMgUmVhbC10aW1lIFJld2FyZCBNb25pdG9yaW5nCgpgYGB0eXBlc2NyaXB0IHRpdGxlPSJSZWFsLXRpbWUgTW9uaXRvcmluZyIKLy8gV2F0Y2ggZm9yIG5ldyByZXdhcmQgZGlzdHJpYnV0aW9ucwpjb25zdCB1bndhdGNoID0gcHVibGljQ2xpZW50LndhdGNoQ29udHJhY3RFdmVudCh7CiAgYWRkcmVzczogZXNjcm93QWRkcmVzcywKICBhYmk6IHJld2FyZFRyYWNrZXIuZXNjcm93QWJpLAogIGV2ZW50TmFtZTogJ1Jld2FyZERpc3RyaWJ1dGVkJywKICBvbkxvZ3M6IChsb2dzKSA9PiB7CiAgICBsb2dzLmZvckVhY2gobG9nID0+IHsKICAgICAgY29uc29sZS5sb2coJ05ldyByZXdhcmQgZGlzdHJpYnV0ZWQ6JywgewogICAgICAgIGNvbGxlY3Rpb246IGxvZy5hcmdzLmNvbGxlY3Rpb24sCiAgICAgICAgcmVjaXBpZW50OiBsb2cuYXJncy5yZWNpcGllbnQsCiAgICAgICAgYW1vdW50OiBsb2cuYXJncy5hbW91bnQ/LnRvU3RyaW5nKCksCiAgICAgICAgdHlwZTogbG9nLmFyZ3MucmVjaXBpZW50VHlwZQogICAgICB9KQogICAgfSkKICB9Cn0pCgovLyBTdG9wIHdhdGNoaW5nIHdoZW4gZG9uZQovLyB1bndhdGNoKCkKYGBgCgojIyBSZXdhcmQgV2l0aGRyYXdhbAoKIyMjIEluZGl2aWR1YWwgV2l0aGRyYXdhbHMKCmBgYHR5cGVzY3JpcHQgdGl0bGU9IldpdGhkcmF3IFJld2FyZHMiCmltcG9ydCB7IGNyZWF0ZVdhbGxldENsaWVudCB9IGZyb20gJ3ZpZW0nCmltcG9ydCB7IHByaXZhdGVLZXlUb0FjY291bnQgfSBmcm9tICd2aWVtL2FjY291bnRzJwoKY29uc3QgYWNjb3VudCA9IHByaXZhdGVLZXlUb0FjY291bnQocHJvY2Vzcy5lbnYuUFJJVkFURV9LRVkgYXMgYDB4JHtzdHJpbmd9YCkKY29uc3Qgd2FsbGV0Q2xpZW50ID0gY3JlYXRlV2FsbGV0Q2xpZW50KHsKICBjaGFpbjogYjNUZXN0bmV0LAogIHRyYW5zcG9ydDogaHR0cCgpLAogIGFjY291bnQKfSkKCi8vIFdpdGhkcmF3IHJld2FyZHMgZm9yIGEgc3BlY2lmaWMgY29sbGVjdGlvbiBhbmQgcmVjaXBpZW50IHR5cGUKYXN5bmMgZnVuY3Rpb24gd2l0aGRyYXdSZXdhcmRzKAogIGNvbGxlY3Rpb25BZGRyZXNzOiBzdHJpbmcsCiAgcmVjaXBpZW50VHlwZTogIkNSRUFUT1IiIHwgIkZJUlNUX01JTlRFUiIgfCAiR0FNRV9PV05FUiIgfCAiUExBVEZPUk0iCikgewogIHRyeSB7CiAgICAvLyBDaGVjayBhdmFpbGFibGUgcmV3YXJkcyBmaXJzdAogICAgY29uc3QgYXZhaWxhYmxlUmV3YXJkcyA9IGF3YWl0IHJld2FyZFRyYWNrZXIuZ2V0UmVjaXBpZW50UmV3YXJkcygKICAgICAgZXNjcm93QWRkcmVzcywKICAgICAgY29sbGVjdGlvbkFkZHJlc3MsCiAgICAgIHJlY2lwaWVudFR5cGUsCiAgICAgIGFjY291bnQuYWRkcmVzcwogICAgKQoKICAgIGlmIChhdmFpbGFibGVSZXdhcmRzID09PSAwbikgewogICAgICBjb25zb2xlLmxvZygiTm8gcmV3YXJkcyBhdmFpbGFibGUgdG8gd2l0aGRyYXciKQogICAgICByZXR1cm4KICAgIH0KCiAgICBjb25zb2xlLmxvZyhgV2l0aGRyYXdpbmcgJHthdmFpbGFibGVSZXdhcmRzLnRvU3RyaW5nKCl9IHdlaSBvZiByZXdhcmRzLi4uYCkKCiAgICAvLyBXaXRoZHJhdyByZXdhcmRzCiAgICBjb25zdCB0eCA9IGF3YWl0IHJld2FyZFRyYWNrZXIud2l0aGRyYXdSZXdhcmRzKAogICAgICB3YWxsZXRDbGllbnQsCiAgICAgIGVzY3Jvd0FkZHJlc3MsCiAgICAgIGNvbGxlY3Rpb25BZGRyZXNzLAogICAgICByZWNpcGllbnRUeXBlCiAgICApCgogICAgY29uc29sZS5sb2coYOKchSBSZXdhcmRzIHdpdGhkcmF3biBzdWNjZXNzZnVsbHk6ICR7dHh9YCkKICAgIHJldHVybiB0eAoKICB9IGNhdGNoIChlcnJvcikgewogICAgY29uc29sZS5lcnJvcigi4p2MIFdpdGhkcmF3YWwgZmFpbGVkOiIsIGVycm9yKQogICAgdGhyb3cgZXJyb3IKICB9Cn0KCi8vIEV4YW1wbGU6IENyZWF0b3Igd2l0aGRyYXdzIHRoZWlyIHJld2FyZHMKYXdhaXQgd2l0aGRyYXdSZXdhcmRzKGNvbGxlY3Rpb25BZGRyZXNzLCAiQ1JFQVRPUiIpCmBgYAoKIyMjIEJhdGNoIFdpdGhkcmF3YWxzCgpgYGB0eXBlc2NyaXB0IHRpdGxlPSJCYXRjaCBXaXRoZHJhd2FsIgovLyBXaXRoZHJhdyByZXdhcmRzIGZyb20gbXVsdGlwbGUgY29sbGVjdGlvbnMKYXN5bmMgZnVuY3Rpb24gd2l0aGRyYXdBbGxDcmVhdG9yUmV3YXJkcyhjcmVhdG9yQWRkcmVzczogc3RyaW5nKSB7CiAgLy8gR2V0IGFsbCBjb2xsZWN0aW9ucyB3aGVyZSB0aGlzIGFkZHJlc3MgaXMgdGhlIGNyZWF0b3IKICBjb25zdCBjcmVhdG9yQ29sbGVjdGlvbnMgPSBhd2FpdCBnZXRDcmVhdG9yQ29sbGVjdGlvbnMoY3JlYXRvckFkZHJlc3MpCiAgCiAgZm9yIChjb25zdCBjb2xsZWN0aW9uIG9mIGNyZWF0b3JDb2xsZWN0aW9ucykgewogICAgY29uc3QgcmV3YXJkcyA9IGF3YWl0IHJld2FyZFRyYWNrZXIuZ2V0UmVjaXBpZW50UmV3YXJkcygKICAgICAgZXNjcm93QWRkcmVzcywKICAgICAgY29sbGVjdGlvbi5hZGRyZXNzLAogICAgICAiQ1JFQVRPUiIsCiAgICAgIGNyZWF0b3JBZGRyZXNzCiAgICApCgogICAgaWYgKHJld2FyZHMgPiAwbikgewogICAgICBjb25zb2xlLmxvZyhgV2l0aGRyYXdpbmcgJHtyZXdhcmRzLnRvU3RyaW5nKCl9IHdlaSBmcm9tICR7Y29sbGVjdGlvbi5uYW1lfWApCiAgICAgIAogICAgICB0cnkgewogICAgICAgIGF3YWl0IHJld2FyZFRyYWNrZXIud2l0aGRyYXdSZXdhcmRzKAogICAgICAgICAgd2FsbGV0Q2xpZW50LAogICAgICAgICAgZXNjcm93QWRkcmVzcywKICAgICAgICAgIGNvbGxlY3Rpb24uYWRkcmVzcywKICAgICAgICAgICJDUkVBVE9SIgogICAgICAgICkKICAgICAgICBjb25zb2xlLmxvZyhg4pyFIFdpdGhkcmF3biBmcm9tICR7Y29sbGVjdGlvbi5uYW1lfWApCiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgY29uc29sZS5lcnJvcihg4p2MIEZhaWxlZCB0byB3aXRoZHJhdyBmcm9tICR7Y29sbGVjdGlvbi5uYW1lfTpgLCBlcnJvcikKICAgICAgfQogICAgfQogIH0KfQpgYGAKCiMjIFJld2FyZCBBbmFseXRpY3MKCiMjIyBQb3J0Zm9saW8gT3ZlcnZpZXcKCmBgYHR5cGVzY3JpcHQgdGl0bGU9IkNyZWF0b3IgUG9ydGZvbGlvIgphc3luYyBmdW5jdGlvbiBnZXRDcmVhdG9yUG9ydGZvbGlvKGNyZWF0b3JBZGRyZXNzOiBzdHJpbmcpIHsKICBjb25zdCBjb2xsZWN0aW9ucyA9IGF3YWl0IGdldENyZWF0b3JDb2xsZWN0aW9ucyhjcmVhdG9yQWRkcmVzcykKICAKICBsZXQgdG90YWxSZXdhcmRzID0gMG4KICBsZXQgdG90YWxVbmNsYWltZWRSZXdhcmRzID0gMG4KICBsZXQgdG90YWxNaW50cyA9IDBuCiAgCiAgY29uc3QgY29sbGVjdGlvbkRhdGEgPSBbXQogIAogIGZvciAoY29uc3QgY29sbGVjdGlvbiBvZiBjb2xsZWN0aW9ucykgewogICAgY29uc3QgY29sbGVjdGlvblJld2FyZHMgPSBhd2FpdCByZXdhcmRUcmFja2VyLmdldENvbGxlY3Rpb25SZXdhcmRzKAogICAgICBlc2Nyb3dBZGRyZXNzLAogICAgICBjb2xsZWN0aW9uLmFkZHJlc3MKICAgICkKICAgIAogICAgY29uc3QgY3JlYXRvclJld2FyZHMgPSBhd2FpdCByZXdhcmRUcmFja2VyLmdldFJlY2lwaWVudFJld2FyZHMoCiAgICAgIGVzY3Jvd0FkZHJlc3MsCiAgICAgIGNvbGxlY3Rpb24uYWRkcmVzcywKICAgICAgIkNSRUFUT1IiLAogICAgICBjcmVhdG9yQWRkcmVzcwogICAgKQogICAgCiAgICB0b3RhbFJld2FyZHMgKz0gY29sbGVjdGlvblJld2FyZHMudG90YWxSZXdhcmRzCiAgICB0b3RhbFVuY2xhaW1lZFJld2FyZHMgKz0gY3JlYXRvclJld2FyZHMKICAgIHRvdGFsTWludHMgKz0gY29sbGVjdGlvblJld2FyZHMudG90YWxNaW50cwogICAgCiAgICBjb2xsZWN0aW9uRGF0YS5wdXNoKHsKICAgICAgbmFtZTogY29sbGVjdGlvbi5uYW1lLAogICAgICBhZGRyZXNzOiBjb2xsZWN0aW9uLmFkZHJlc3MsCiAgICAgIHRvdGFsUmV3YXJkczogY29sbGVjdGlvblJld2FyZHMudG90YWxSZXdhcmRzLAogICAgICBjcmVhdG9yUmV3YXJkcywKICAgICAgbWludHM6IGNvbGxlY3Rpb25SZXdhcmRzLnRvdGFsTWludHMKICAgIH0pCiAgfQogIAogIHJldHVybiB7CiAgICBzdW1tYXJ5OiB7CiAgICAgIHRvdGFsQ29sbGVjdGlvbnM6IGNvbGxlY3Rpb25zLmxlbmd0aCwKICAgICAgdG90YWxSZXdhcmRzOiB0b3RhbFJld2FyZHMudG9TdHJpbmcoKSwKICAgICAgdG90YWxVbmNsYWltZWRSZXdhcmRzOiB0b3RhbFVuY2xhaW1lZFJld2FyZHMudG9TdHJpbmcoKSwgCiAgICAgIHRvdGFsTWludHM6IHRvdGFsTWludHMudG9TdHJpbmcoKSwKICAgICAgYXZlcmFnZVJld2FyZFBlck1pbnQ6IHRvdGFsTWludHMgPiAwbiA/ICh0b3RhbFJld2FyZHMgLyB0b3RhbE1pbnRzKS50b1N0cmluZygpIDogIjAiCiAgICB9LAogICAgY29sbGVjdGlvbnM6IGNvbGxlY3Rpb25EYXRhCiAgfQp9Cgpjb25zdCBwb3J0Zm9saW8gPSBhd2FpdCBnZXRDcmVhdG9yUG9ydGZvbGlvKGNyZWF0b3JBZGRyZXNzKQpjb25zb2xlLmxvZygiQ3JlYXRvciBQb3J0Zm9saW86IiwgcG9ydGZvbGlvKQpgYGAKCiMjIyBQZXJmb3JtYW5jZSBNZXRyaWNzCgpgYGB0eXBlc2NyaXB0IHRpdGxlPSJSZXdhcmQgUGVyZm9ybWFuY2UiCmFzeW5jIGZ1bmN0aW9uIGdldFJld2FyZE1ldHJpY3MoY29sbGVjdGlvbkFkZHJlc3M6IHN0cmluZykgewogIGNvbnN0IGNvbGxlY3Rpb25SZXdhcmRzID0gYXdhaXQgcmV3YXJkVHJhY2tlci5nZXRDb2xsZWN0aW9uUmV3YXJkcygKICAgIGVzY3Jvd0FkZHJlc3MsCiAgICBjb2xsZWN0aW9uQWRkcmVzcwogICkKICAKICBjb25zdCBjb2xsZWN0aW9uID0gY29sbGVjdGlvbk1hbmFnZXIuY3JlYXRlQ29sbGVjdGlvbihjb2xsZWN0aW9uQWRkcmVzcywgIkVSQzcyMSIpCiAgY29uc3QgY3VycmVudFN1cHBseSA9IGF3YWl0IGNvbGxlY3Rpb24udG90YWxTdXBwbHkoKQogIGNvbnN0IG1pbnRQcmljZSA9IGF3YWl0IGNvbGxlY3Rpb24ubWludFByaWNlKCkKICAKICBjb25zdCB0b3RhbE1pbnRSZXZlbnVlID0gY3VycmVudFN1cHBseSAqIG1pbnRQcmljZQogIGNvbnN0IHJld2FyZFBlcmNlbnRhZ2UgPSB0b3RhbE1pbnRSZXZlbnVlID4gMG4gCiAgICA/IChjb2xsZWN0aW9uUmV3YXJkcy50b3RhbFJld2FyZHMgKiAxMDBuKSAvIHRvdGFsTWludFJldmVudWUgCiAgICA6IDBuCiAgCiAgcmV0dXJuIHsKICAgIHRvdGFsTWludHM6IGNvbGxlY3Rpb25SZXdhcmRzLnRvdGFsTWludHMudG9TdHJpbmcoKSwKICAgIHRvdGFsUmV3YXJkczogY29sbGVjdGlvblJld2FyZHMudG90YWxSZXdhcmRzLnRvU3RyaW5nKCksCiAgICB0b3RhbFJldmVudWU6IHRvdGFsTWludFJldmVudWUudG9TdHJpbmcoKSwKICAgIHJld2FyZFBlcmNlbnRhZ2U6IHJld2FyZFBlcmNlbnRhZ2UudG9TdHJpbmcoKSArICIlIiwKICAgIGF2ZXJhZ2VSZXdhcmRQZXJNaW50OiBjb2xsZWN0aW9uUmV3YXJkcy50b3RhbE1pbnRzID4gMG4gCiAgICAgID8gKGNvbGxlY3Rpb25SZXdhcmRzLnRvdGFsUmV3YXJkcyAvIGNvbGxlY3Rpb25SZXdhcmRzLnRvdGFsTWludHMpLnRvU3RyaW5nKCkKICAgICAgOiAiMCIKICB9Cn0KYGBgCgojIyBBZHZhbmNlZCBSZXdhcmQgRmVhdHVyZXMKCiMjIyBDdXN0b20gUmV3YXJkIFJhdGVzCgo8V2FybmluZz4KUmV3YXJkIHJhdGUgY29uZmlndXJhdGlvbiBpcyB0eXBpY2FsbHkgcmVzdHJpY3RlZCB0byBwcm90b2NvbCBhZG1pbmlzdHJhdG9ycy4KPC9XYXJuaW5nPgoKYGBgdHlwZXNjcmlwdCB0aXRsZT0iUmV3YXJkIFJhdGUgTWFuYWdlbWVudCIKLy8gRm9yIHByb3RvY29sIGFkbWluaXN0cmF0b3JzIG9ubHkKYXN5bmMgZnVuY3Rpb24gdXBkYXRlUmV3YXJkUmF0ZXMoCiAgYWRtaW5XYWxsZXRDbGllbnQ6IGFueSwKICBlc2Nyb3dBZGRyZXNzOiBzdHJpbmcKKSB7CiAgLy8gVXBkYXRlIHJld2FyZCByYXRlcyAob25seSBjYWxsYWJsZSBieSBvd25lcikKICBhd2FpdCByZXdhcmRUcmFja2VyLnNldFJld2FyZFJhdGVzKAogICAgYWRtaW5XYWxsZXRDbGllbnQsCiAgICBlc2Nyb3dBZGRyZXNzLAogICAgewogICAgICBjcmVhdG9yUmF0ZTogNDUwMG4sICAgIC8vIDQ1JQogICAgICBmaXJzdE1pbnRlclJhdGU6IDI1MDBuLCAvLyAyNSUKICAgICAgZ2FtZU93bmVyUmF0ZTogMjAwMG4sICAvLyAyMCUKICAgICAgcGxhdGZvcm1SYXRlOiAxMDAwbiAgICAvLyAxMCUKICAgIH0KICApCn0KCi8vIENoZWNrIGN1cnJlbnQgcmV3YXJkIHJhdGVzCmNvbnN0IHJhdGVzID0gYXdhaXQgcmV3YXJkVHJhY2tlci5nZXRSZXdhcmRSYXRlcyhlc2Nyb3dBZGRyZXNzKQpjb25zb2xlLmxvZygiQ3VycmVudCByZXdhcmQgcmF0ZXM6IiwgewogIGNyZWF0b3I6IHJhdGVzLmNyZWF0b3JSYXRlLnRvU3RyaW5nKCksCiAgZmlyc3RNaW50ZXI6IHJhdGVzLmZpcnN0TWludGVyUmF0ZS50b1N0cmluZygpLAogIGdhbWVPd25lcjogcmF0ZXMuZ2FtZU93bmVyUmF0ZS50b1N0cmluZygpLAogIHBsYXRmb3JtOiByYXRlcy5wbGF0Zm9ybVJhdGUudG9TdHJpbmcoKQp9KQpgYGAKCiMjIyBSZWNpcGllbnQgTWFuYWdlbWVudAoKYGBgdHlwZXNjcmlwdCB0aXRsZT0iUmVjaXBpZW50IFN0YXR1cyIKLy8gQ2hlY2sgaWYgYSByZWNpcGllbnQgdHlwZSBpcyBhY3RpdmUKY29uc3QgaXNDcmVhdG9yQWN0aXZlID0gYXdhaXQgcmV3YXJkVHJhY2tlci5pc1JlY2lwaWVudEFjdGl2ZSgKICBlc2Nyb3dBZGRyZXNzLAogICJDUkVBVE9SIgopCgovLyBHZXQgcmVjaXBpZW50IGluZm9ybWF0aW9uCmNvbnN0IHJlY2lwaWVudEluZm8gPSBhd2FpdCByZXdhcmRUcmFja2VyLmdldFJlY2lwaWVudEluZm8oCiAgZXNjcm93QWRkcmVzcywKICAiQ1JFQVRPUiIKKQoKY29uc29sZS5sb2coIkNyZWF0b3IgcmVjaXBpZW50IGluZm86IiwgewogIHJhdGU6IHJlY2lwaWVudEluZm8ucmF0ZS50b1N0cmluZygpLAogIGlzQWN0aXZlOiByZWNpcGllbnRJbmZvLmlzQWN0aXZlCn0pCmBgYAoKIyMgSW50ZWdyYXRpb24gQmVzdCBQcmFjdGljZXMKCiMjIyBVc2VyIEludGVyZmFjZSBJbnRlZ3JhdGlvbgoKYGBgdHlwZXNjcmlwdCB0aXRsZT0iVUkgSGVscGVyIEZ1bmN0aW9ucyIKLy8gRm9ybWF0IHJld2FyZHMgZm9yIGRpc3BsYXkKZnVuY3Rpb24gZm9ybWF0UmV3YXJkcyh3ZWlBbW91bnQ6IGJpZ2ludCk6IHN0cmluZyB7CiAgY29uc3QgZXRoID0gTnVtYmVyKHdlaUFtb3VudCkgLyAxZTE4CiAgcmV0dXJuIGAke2V0aC50b0ZpeGVkKDYpfSBFVEhgCn0KCi8vIENhbGN1bGF0ZSBVU0QgdmFsdWUgKGV4YW1wbGUgd2l0aCBwcmljZSBmZWVkKQphc3luYyBmdW5jdGlvbiBnZXRSZXdhcmRWYWx1ZVVTRCh3ZWlBbW91bnQ6IGJpZ2ludCwgZXRoUHJpY2VVU0Q6IG51bWJlcik6IFByb21pc2U8c3RyaW5nPiB7CiAgY29uc3QgZXRoID0gTnVtYmVyKHdlaUFtb3VudCkgLyAxZTE4CiAgY29uc3QgdXNkID0gZXRoICogZXRoUHJpY2VVU0QKICByZXR1cm4gYCQke3VzZC50b0ZpeGVkKDIpfWAKfQoKLy8gQ2hlY2sgaWYgd2l0aGRyYXdhbCBpcyBwcm9maXRhYmxlIChjb25zaWRlcmluZyBnYXMgY29zdHMpCmFzeW5jIGZ1bmN0aW9uIGlzV2l0aGRyYXdhbFByb2ZpdGFibGUoCiAgcmV3YXJkQW1vdW50OiBiaWdpbnQsCiAgZ2FzUHJpY2U6IGJpZ2ludCwKICBnYXNMaW1pdDogYmlnaW50Cik6IFByb21pc2U8Ym9vbGVhbj4gewogIGNvbnN0IGdhc0Nvc3QgPSBnYXNQcmljZSAqIGdhc0xpbWl0CiAgcmV0dXJuIHJld2FyZEFtb3VudCA+IGdhc0Nvc3QgKiAybiAvLyBSZXF1aXJlIDJ4IGdhcyBjb3N0IG1pbmltdW0KfQpgYGAKCiMjIyBBdXRvbWF0ZWQgUmV3YXJkIENsYWltaW5nCgpgYGB0eXBlc2NyaXB0IHRpdGxlPSJBdXRvbWF0ZWQgQ2xhaW1pbmciCi8vIEF1dG9tYXRlZCByZXdhcmQgY2xhaW1pbmcgc2VydmljZQpjbGFzcyBSZXdhcmRDbGFpbWluZ1NlcnZpY2UgewogIHByaXZhdGUgcmV3YXJkVHJhY2tlcjogUmV3YXJkVHJhY2tlcgogIHByaXZhdGUgd2FsbGV0Q2xpZW50OiBhbnkKICBwcml2YXRlIG1pbldpdGhkcmF3VGhyZXNob2xkOiBiaWdpbnQKCiAgY29uc3RydWN0b3IocmV3YXJkVHJhY2tlcjogUmV3YXJkVHJhY2tlciwgd2FsbGV0Q2xpZW50OiBhbnksIG1pblRocmVzaG9sZDogYmlnaW50KSB7CiAgICB0aGlzLnJld2FyZFRyYWNrZXIgPSByZXdhcmRUcmFja2VyCiAgICB0aGlzLndhbGxldENsaWVudCA9IHdhbGxldENsaWVudAogICAgdGhpcy5taW5XaXRoZHJhd1RocmVzaG9sZCA9IG1pblRocmVzaG9sZAogIH0KCiAgYXN5bmMgY2hlY2tBbmRDbGFpbVJld2FyZHMoCiAgICBjb2xsZWN0aW9uczogc3RyaW5nW10sCiAgICByZWNpcGllbnRUeXBlOiAiQ1JFQVRPUiIgfCAiRklSU1RfTUlOVEVSIiB8ICJHQU1FX09XTkVSIgogICkgewogICAgZm9yIChjb25zdCBjb2xsZWN0aW9uQWRkcmVzcyBvZiBjb2xsZWN0aW9ucykgewogICAgICB0cnkgewogICAgICAgIGNvbnN0IHJld2FyZHMgPSBhd2FpdCB0aGlzLnJld2FyZFRyYWNrZXIuZ2V0UmVjaXBpZW50UmV3YXJkcygKICAgICAgICAgIGVzY3Jvd0FkZHJlc3MsCiAgICAgICAgICBjb2xsZWN0aW9uQWRkcmVzcywKICAgICAgICAgIHJlY2lwaWVudFR5cGUsCiAgICAgICAgICB0aGlzLndhbGxldENsaWVudC5hY2NvdW50LmFkZHJlc3MKICAgICAgICApCgogICAgICAgIGlmIChyZXdhcmRzID49IHRoaXMubWluV2l0aGRyYXdUaHJlc2hvbGQpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKGBDbGFpbWluZyAke3Jld2FyZHMudG9TdHJpbmcoKX0gd2VpIGZyb20gJHtjb2xsZWN0aW9uQWRkcmVzc31gKQogICAgICAgICAgCiAgICAgICAgICBhd2FpdCB0aGlzLnJld2FyZFRyYWNrZXIud2l0aGRyYXdSZXdhcmRzKAogICAgICAgICAgICB0aGlzLndhbGxldENsaWVudCwKICAgICAgICAgICAgZXNjcm93QWRkcmVzcywKICAgICAgICAgICAgY29sbGVjdGlvbkFkZHJlc3MsCiAgICAgICAgICAgIHJlY2lwaWVudFR5cGUKICAgICAgICAgICkKICAgICAgICAgIAogICAgICAgICAgY29uc29sZS5sb2coYOKchSBTdWNjZXNzZnVsbHkgY2xhaW1lZCByZXdhcmRzIGZyb20gJHtjb2xsZWN0aW9uQWRkcmVzc31gKQogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICBjb25zb2xlLmVycm9yKGDinYwgRmFpbGVkIHRvIGNsYWltIGZyb20gJHtjb2xsZWN0aW9uQWRkcmVzc306YCwgZXJyb3IpCiAgICAgIH0KICAgIH0KICB9Cn0KCi8vIFVzYWdlCmNvbnN0IGNsYWltaW5nU2VydmljZSA9IG5ldyBSZXdhcmRDbGFpbWluZ1NlcnZpY2UoCiAgcmV3YXJkVHJhY2tlciwKICB3YWxsZXRDbGllbnQsCiAgcGFyc2VFdGhlcigiMC4wMDEiKSAvLyBNaW5pbXVtIDAuMDAxIEVUSCB0byBjbGFpbQopCgphd2FpdCBjbGFpbWluZ1NlcnZpY2UuY2hlY2tBbmRDbGFpbVJld2FyZHMoCiAgY3JlYXRvckNvbGxlY3Rpb25zLAogICJDUkVBVE9SIgopCmBgYAoKIyMgVHJvdWJsZXNob290aW5nCgo8QWNjb3JkaW9uR3JvdXA+CiAgPEFjY29yZGlvbiB0aXRsZT0iTm8gcmV3YXJkcyBzaG93aW5nIj4KICAgIC0gVmVyaWZ5IHRoZSBjb2xsZWN0aW9uIGhhcyByZWNlaXZlZCBtaW50cyBhZnRlciBkZXBsb3ltZW50CiAgICAtIENoZWNrIHRoYXQgeW91J3JlIHF1ZXJ5aW5nIHRoZSBjb3JyZWN0IHJlY2lwaWVudCB0eXBlIGFuZCBhZGRyZXNzCiAgICAtIEVuc3VyZSB0aGUgY29sbGVjdGlvbiB3YXMgY3JlYXRlZCB3aXRoIHByb3BlciBzaWduYXR1cmVzCiAgPC9BY2NvcmRpb24+CgogIDxBY2NvcmRpb24gdGl0bGU9IldpdGhkcmF3YWwgZmFpbGVkIj4KICAgIC0gQ29uZmlybSB5b3UgaGF2ZSBhdmFpbGFibGUgcmV3YXJkcyB0byB3aXRoZHJhdwogICAgLSBDaGVjayB0aGF0IHlvdSBoYXZlIHN1ZmZpY2llbnQgZ2FzIGZvciB0aGUgdHJhbnNhY3Rpb24KICAgIC0gVmVyaWZ5IHlvdSdyZSB1c2luZyB0aGUgY29ycmVjdCByZWNpcGllbnQgdHlwZSBmb3IgeW91ciByb2xlCiAgPC9BY2NvcmRpb24+CgogIDxBY2NvcmRpb24gdGl0bGU9IlJld2FyZCBhbW91bnRzIHNlZW0gaW5jb3JyZWN0Ij4KICAgIC0gQ2hlY2sgdGhlIGN1cnJlbnQgcmV3YXJkIHJhdGVzIGNvbmZpZ3VyYXRpb24KICAgIC0gVmVyaWZ5IHRoZSBtaW50IHByaWNlIGFuZCB2b2x1bWUgY2FsY3VsYXRpb25zCiAgICAtIEVuc3VyZSB5b3UncmUgdXNpbmcgdGhlIGNvcnJlY3QgZXNjcm93IGNvbnRyYWN0IGFkZHJlc3MKICA8L0FjY29yZGlvbj4KPC9BY2NvcmRpb25Hcm91cD4KCiMjIE5leHQgU3RlcHMKCjxDYXJkR3JvdXAgY29scz17Mn0+CiAgPENhcmQgdGl0bGU9IlN0b3JhZ2UgU2VydmljZSIgaWNvbj0iZGF0YWJhc2UiIGhyZWY9Ii9jcmVhdGVraXQvc3RvcmFnZSI+CiAgICBMZWFybiBob3cgdG8gbWFuYWdlIGNvbGxlY3Rpb24gbWV0YWRhdGEgd2l0aCBCYXNlTWludCBzdG9yYWdlCiAgPC9DYXJkPgogIDxDYXJkIHRpdGxlPSJFeGFtcGxlcyIgaWNvbj0iY29kZSIgaHJlZj0iL2NyZWF0ZWtpdC9leGFtcGxlcyI+CiAgICBTZWUgY29tcGxldGUgaW1wbGVtZW50YXRpb24gZXhhbXBsZXMgaW5jbHVkaW5nIHJld2FyZCB0cmFja2luZwogIDwvQ2FyZD4KPC9DYXJkR3JvdXA+Cg==",
    "lastUpdated": "2025-09-03T02:53:51.613Z"
  },
  {
    "sourceFile": "createkit/quickstart.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-09-03T02:54:51.904Z"
  },
  {
    "sourceFile": "createkit/minting.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-09-03T02:56:32.721Z"
  },
  {
    "sourceFile": "createkit/introduction.mdx",
    "sourceHash": "ClshW05QTV0oaHR0cHM6Ly9ub2RlaS5jby9ucG0vQGIzZG90ZnVuL2Jhc2VtaW50LnN2ZyldKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL0BiM2RvdGZ1bi9iYXNlbWludCkKCjxDb2RlR3JvdXA+CmBgYGJhc2ggbnBtCm5wbSBpbnN0YWxsIEBiM2RvdGZ1bi9iYXNlbWludApgYGAKCmBgYGJhc2ggeWFybgp5YXJuIGFkZCBAYjNkb3RmdW4vYmFzZW1pbnQKYGBgCgpgYGBiYXNoIHBucG0KcG5wbSBhZGQgQGIzZG90ZnVuL2Jhc2VtaW50CmBgYAo8L0NvZGVHcm91cD4KCiMjIFdoeSBDcmVhdGVLaXQ/CioqQ3JlYXRlIE5GVHMgZm9yIGZyZWUqKiB3aXRoIENyZWF0ZUtpdCwgdXNlcnMganVzdCBzaWduIGEgbWVzc2FnZSAobm8gZ2FzIHJlcXVpcmVkKSBhbmQgdGhlIGNvbGxlY3Rpb24gaXMgZGVwbG95ZWQgYW5kIG1pbnRlZCBpbiBhIHNpbmdsZSB0cmFuc2FjdGlvbiBhdCB0aGUgZmlyc3QgbWludC4KCjxOb3RlPioqVHJ5IGl0IG91dDoqKiBbQ3JlYXRlIE5GVHMgZm9yIGZyZWUgJiBlYXJuXShodHRwczovL2V4cGxvcmVyLmIzLmZ1bi9hcHBzL25mdHMvY3JlYXRlKTwvTm90ZT4KCkNyZWF0ZUtpdCwgcG93ZXJlZCBieSB0aGUgQmFzZU1pbnQgUHJvdG9jb2wsIGlzIGEgY29tcHJlaGVuc2l2ZSBUeXBlU2NyaXB0IFNESyB0aGF0IHJldm9sdXRpb25pemVzIE5GVCBjb2xsZWN0aW9uIGNyZWF0aW9uIGFuZCBtYW5hZ2VtZW50LiBCdWlsdCBzcGVjaWZpY2FsbHkgZm9yIHRoZSBCMyBlY29zeXN0ZW0sIGl0IHByb3ZpZGVzIGEgc3RyZWFtbGluZWQsIGdhcy1lZmZpY2llbnQgd29ya2Zsb3cgZm9yIGRlcGxveWluZyBhbmQgbWFuYWdpbmcgTkZUIGNvbGxlY3Rpb25zIHdpdGggbWluaW1hbCBjb3N0cyBhbmQgbWF4aW11bSBmbGV4aWJpbGl0eS4KCjxDYXJkR3JvdXAgY29scz17Mn0+CiAgPENhcmQgdGl0bGU9Ilplcm8gR2FzIENyZWF0aW9uIiBpY29uPSJjaXJjbGUtZG9sbGFyIj4KICAgIENyZWF0ZSBORlRzIHdpdGggb25jaGFpbiBhZGRyZXNzZXMgY29tcGxldGVseSBmcmVlIGR1cmluZyB0aGUgaW5pdGlhbCBzZXR1cCBwaGFzZQogIDwvQ2FyZD4KICA8Q2FyZCB0aXRsZT0iU2luZ2xlIFRyYW5zYWN0aW9uIERlcGxveSIgaWNvbj0iYm9sdCI+CiAgICBEZXBsb3kgY29sbGVjdGlvbnMgYW5kIG1pbnQgeW91ciBmaXJzdCBORlQgaW4gYSBzaW5nbGUgdHJhbnNhY3Rpb24KICA8L0NhcmQ+CiAgPENhcmQgdGl0bGU9Ik11bHRpLVN0YW5kYXJkIFN1cHBvcnQiIGljb249ImxheWVyLWdyb3VwIj4KICAgIFN1cHBvcnRzIGJvdGggRVJDNzIxIGFuZCBFUkMxMTU1IHRva2VuIHN0YW5kYXJkcwogIDwvQ2FyZD4KICA8Q2FyZCB0aXRsZT0iTWFya2V0cGxhY2UgUmVhZHkiIGljb249InN0b3JlIj4KICAgIE9wZW5TZWEtY29tcGF0aWJsZSBtZXRhZGF0YSBmb3JtYXQgZW5zdXJlcyBzZWFtbGVzcyBtYXJrZXRwbGFjZSBpbnRlZ3JhdGlvbgogIDwvQ2FyZD4KPC9DYXJkR3JvdXA+CgojIyBLZXkgRmVhdHVyZXMKCiMjIyDwn46oICoqQ29sbGVjdGlvbiBNYW5hZ2VtZW50KioKLSBEZXBsb3kgRVJDNzIxIGFuZCBFUkMxMTU1IGNvbGxlY3Rpb25zCi0gQ3VzdG9taXplIGNvbGxlY3Rpb24gcGFyYW1ldGVycyAobmFtZSwgc3ltYm9sLCBzdXBwbHksIHByaWNpbmcpCi0gU2V0IG1pbnRpbmcgdGltZWZyYW1lcyBhbmQgbGltaXRzCi0gTWFuYWdlIGNvbGxlY3Rpb24gbWV0YWRhdGEgYW5kIFVSSXMKLSBTdXBwb3J0IGZvciBkaWZmZXJlbnQgbWVkaWEgdHlwZXMgKDNEIG1vZGVscywgYXJ0d29yaywgdmlkZW8sIG1lbWVzKQoKIyMjIPCflJIgKipTZWN1cmUgRGVwbG95bWVudCoqCi0gVHdvLXN0ZXAgc2lnbmF0dXJlIHZlcmlmaWNhdGlvbiBwcm9jZXNzCi0gQ3JlYXRvciBzaWduYXR1cmUgdmFsaWRhdGlvbgotIERlcGxveWVyIHNpZ25hdHVyZSB2YWxpZGF0aW9uCi0gQ29sbGVjdGlvbiBhZGRyZXNzIHByZWRpY3Rpb24KCiMjIyDwn46vICoqVG9rZW4gT3BlcmF0aW9ucyoqCi0gTWludCBFUkM3MjEgYW5kIEVSQzExNTUgdG9rZW5zCi0gV2hpdGVsaXN0LWJhc2VkIG1pbnRpbmcgd2l0aCBNZXJrbGUgcHJvb2ZzCi0gQXV0b21hdGljIHByaWNlIGNhbGN1bGF0aW9uCi0gQnVpbHQtaW4gcGFyYW1ldGVyIHZhbGlkYXRpb24KLSBHYXMtZWZmaWNpZW50IHRyYW5zYWN0aW9ucwoKIyMjIPCfkrAgKipSZXdhcmQgRGlzdHJpYnV0aW9uKioKLSBUcmFjayBjcmVhdG9yIHJld2FyZHMKLSBNb25pdG9yIHBlci1jb2xsZWN0aW9uIHJld2FyZCBhY2N1bXVsYXRpb24KLSBWaWV3IHRvdGFsIGFuZCB1bmNsYWltZWQgcmV3YXJkcyBwZXIgY29sbGVjdGlvbgotIFRyYWNrIHJld2FyZCBkaXN0cmlidXRpb24gcGVyIHJlY2lwaWVudCB0eXBlCi0gV2l0aGRyYXcgYWNjdW11bGF0ZWQgcmV3YXJkcwoKIyMgU3lzdGVtIEZsb3cKClRoZSBCYXNlTWludCBwcm90b2NvbCBwcm92aWRlcyBhIHVuaXF1ZSwgZ2FzLWVmZmljaWVudCB3b3JrZmxvdzoKCjxTdGVwcz4KICA8U3RlcCB0aXRsZT0iQ29sbGVjdGlvbiBDcmVhdGlvbiAmIFNpZ25hdHVyZSBHZW5lcmF0aW9uIj4KICAgIENyZWF0b3JzIGRlZmluZSBjb2xsZWN0aW9uIHBhcmFtZXRlcnMgYW5kIGdlbmVyYXRlIGNyeXB0b2dyYXBoaWMgc2lnbmF0dXJlcyBzdG9yZWQgb2ZmLWNoYWluIHdpdGggemVybyBnYXMgY29zdHMuCiAgPC9TdGVwPgogIDxTdGVwIHRpdGxlPSJPZmYtY2hhaW4gU3RvcmFnZSAmIERpc2NvdmVyeSI+CiAgICBDb2xsZWN0aW9uIGRhdGEgaXMgc3RvcmVkIHNlY3VyZWx5IGluIEJhc2VNaW50IHN0b3JhZ2Ugd2l0aCBkZXRlcm1pbmlzdGljIGFkZHJlc3NlcyBmb3IgZWFzeSBkaXNjb3ZlcnkuCiAgPC9TdGVwPgogIDxTdGVwIHRpdGxlPSJEZXBsb3ltZW50ICYgRmlyc3QgTWludCI+CiAgICBUaGUgZmlyc3QgbWludGVyIHRyaWdnZXJzIG9uLWNoYWluIGRlcGxveW1lbnQgaW4gYSBzaW5nbGUgdHJhbnNhY3Rpb24gdGhhdCBjb3ZlcnMgYm90aCBkZXBsb3ltZW50IGFuZCBmaXJzdCBtaW50LgogIDwvU3RlcD4KICA8U3RlcCB0aXRsZT0iUmVndWxhciBNaW50aW5nIFBoYXNlIj4KICAgIE9wZW4gbWludGluZyBmb3IgYWxsIHVzZXJzIHdpdGggb3B0aW9uYWwgd2hpdGVsaXN0IHN1cHBvcnQgYW5kIHdhbGxldCBsaW1pdHMuCiAgPC9TdGVwPgo8L1N0ZXBzPgoKIyMgUmV3YXJkIFN0cnVjdHVyZQoKQ3JlYXRlS2l0IGZlYXR1cmVzIGFuIGlubm92YXRpdmUgcmV3YXJkIHN5c3RlbSB0aGF0IGJlbmVmaXRzIGFsbCBwYXJ0aWNpcGFudHMgaW4gdGhlIGVjb3N5c3RlbToKCnwgUmVjaXBpZW50IFR5cGUgfCBEZWZhdWx0IFNoYXJlIHwgRGVzY3JpcHRpb24gfAp8LS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLXwKfCAqKkNyZWF0b3IqKiB8IDQwJSB8IENvbGxlY3Rpb24gb3JpZ2luYXRvciB8CnwgKipGaXJzdCBNaW50ZXIqKiB8IDMwJSB8IEluaXRpYWwgZGVwbG95ZXIgd2hvIHRyaWdnZXJzIGRlcGxveW1lbnQgfAp8ICoqR2FtZSBPd25lcioqIHwgMjAlIHwgUGxhdGZvcm0gaW50ZWdyYXRvciB8CnwgKipQbGF0Zm9ybSoqIHwgMTAlIHwgUHJvdG9jb2wgZmVlIHwKCjxOb3RlPgpSZXdhcmQgcmF0ZXMgYXJlIGNvbmZpZ3VyYWJsZSBieSB0aGUgcHJvdG9jb2wgb3duZXIgYW5kIGNhbiBiZSBhZGp1c3RlZCBiYXNlZCBvbiBlY29zeXN0ZW0gbmVlZHMuCjwvTm90ZT4KCiMjIFN1cHBvcnRlZCBOZXR3b3JrcwoKQ3JlYXRlS2l0IHN1cHBvcnRzIHRoZSBCMyBlY29zeXN0ZW0gd2l0aCBwbGFubmVkIGV4cGFuc2lvbiB0byBhZGRpdGlvbmFsIG5ldHdvcmtzOgoKPENhcmRHcm91cCBjb2xzPXsyfT4KICA8Q2FyZCB0aXRsZT0iQjMgTWFpbm5ldCIgaWNvbj0iZ2xvYmUiPgogICAgKipDaGFpbiBJRDoqKiA4MzMzICAKICAgIFByb2R1Y3Rpb24tcmVhZHkgZGVwbG95bWVudCBmb3IgbGl2ZSBhcHBsaWNhdGlvbnMKICA8L0NhcmQ+CiAgPENhcmQgdGl0bGU9IkIzIFRlc3RuZXQiIGljb249ImZsYXNrIj4KICAgICoqQ2hhaW4gSUQ6KiogMTk5MyAgCiAgICBEZXZlbG9wbWVudCBhbmQgdGVzdGluZyBlbnZpcm9ubWVudAogIDwvQ2FyZD4KPC9DYXJkR3JvdXA+CgojIyBHZXR0aW5nIFN0YXJ0ZWQKClJlYWR5IHRvIHN0YXJ0IGJ1aWxkaW5nPyBDaGVjayBvdXQgb3VyIGluc3RhbGxhdGlvbiBndWlkZSBhbmQgcXVpY2tzdGFydCB0dXRvcmlhbCB0byBiZWdpbiBjcmVhdGluZyB5b3VyIGZpcnN0IE5GVCBjb2xsZWN0aW9uIHdpdGggQ3JlYXRlS2l0LgoKPENhcmRHcm91cCBjb2xzPXsyfT4KICA8Q2FyZCB0aXRsZT0iSW5zdGFsbGF0aW9uIiBpY29uPSJkb3dubG9hZCIgaHJlZj0iL2NyZWF0ZWtpdC9pbnN0YWxsYXRpb24iPgogICAgSW5zdGFsbCBDcmVhdGVLaXQgYW5kIHNldCB1cCB5b3VyIGRldmVsb3BtZW50IGVudmlyb25tZW50CiAgPC9DYXJkPgogIDxDYXJkIHRpdGxlPSJRdWljayBTdGFydCIgaWNvbj0icm9ja2V0IiBocmVmPSIvY3JlYXRla2l0L3F1aWNrc3RhcnQiPgogICAgQnVpbGQgeW91ciBmaXJzdCBORlQgY29sbGVjdGlvbiBpbiBtaW51dGVzCiAgPC9DYXJkPgo8L0NhcmRHcm91cD4KCiMjIERldmVsb3BlciBSZXNvdXJjZXMKCjxDYXJkR3JvdXAgY29scz17M30+CiAgPENhcmQgdGl0bGU9IkNvbGxlY3Rpb24gTWFuYWdlbWVudCIgaWNvbj0iZm9sZGVyIiBocmVmPSIvY3JlYXRla2l0L2NvbGxlY3Rpb25zIj4KICAgIExlYXJuIGhvdyB0byBjcmVhdGUgYW5kIG1hbmFnZSBORlQgY29sbGVjdGlvbnMKICA8L0NhcmQ+CiAgPENhcmQgdGl0bGU9Ik1pbnRpbmciIGljb249ImNvaW5zIiBocmVmPSIvY3JlYXRla2l0L21pbnRpbmciPgogICAgSW1wbGVtZW50IHRva2VuIG1pbnRpbmcgZnVuY3Rpb25hbGl0eQogIDwvQ2FyZD4KICA8Q2FyZCB0aXRsZT0iRXhhbXBsZXMiIGljb249ImNvZGUiIGhyZWY9Ii9jcmVhdGVraXQvZXhhbXBsZXMiPgogICAgRXhwbG9yZSBwcmFjdGljYWwgaW1wbGVtZW50YXRpb24gZXhhbXBsZXMKICA8L0NhcmQ+CjwvQ2FyZEdyb3VwPgo=",
    "lastUpdated": "2025-09-03T02:57:14.022Z"
  },
  {
    "sourceFile": "createkit/installation.mdx",
    "sourceHash": "CiMjIFBhY2thZ2UgSW5zdGFsbGF0aW9uCgpJbnN0YWxsIENyZWF0ZUtpdCB1c2luZyB5b3VyIHByZWZlcnJlZCBwYWNrYWdlIG1hbmFnZXI6Cgo8Q29kZUdyb3VwPgpgYGBiYXNoIG5wbQpucG0gaW5zdGFsbCBAYjNkb3RmdW4vYmFzZW1pbnQKYGBgCgpgYGBiYXNoIHlhcm4KeWFybiBhZGQgQGIzZG90ZnVuL2Jhc2VtaW50CmBgYAoKYGBgYmFzaCBwbnBtCnBucG0gYWRkIEBiM2RvdGZ1bi9iYXNlbWludApgYGAKPC9Db2RlR3JvdXA+Cgo8Tm90ZT4KQ3JlYXRlS2l0IGlzIGJ1aWx0IHdpdGggVHlwZVNjcmlwdCBhbmQgcHJvdmlkZXMgZnVsbCB0eXBlIGRlZmluaXRpb25zIG91dCBvZiB0aGUgYm94Lgo8L05vdGU+CgojIyBEZXBlbmRlbmNpZXMKCkNyZWF0ZUtpdCBpcyBidWlsdCBvbiB0b3Agb2YgbW9kZXJuIHdlYjMgdGVjaG5vbG9naWVzIGFuZCByZXF1aXJlcyB0aGUgZm9sbG93aW5nIHBlZXIgZGVwZW5kZW5jaWVzOgoKPENvZGVHcm91cD4KYGBgYmFzaCBucG0KbnBtIGluc3RhbGwgdmllbSBAd2FnbWkvY29yZQpgYGAKCmBgYGJhc2ggeWFybgp5YXJuIGFkZCB2aWVtIEB3YWdtaS9jb3JlCmBgYAoKYGBgYmFzaCBwbnBtCnBucG0gYWRkIHZpZW0gQHdhZ21pL2NvcmUKYGBgCjwvQ29kZUdyb3VwPgoKIyMgRW52aXJvbm1lbnQgU2V0dXAKCiMjIyAxLiBDb25maWd1cmUgQ2hhaW4gTmV0d29ya3MKCkNyZWF0ZUtpdCBwcm92aWRlcyBwcmUtY29uZmlndXJlZCBjaGFpbiBkZWZpbml0aW9ucyBmb3IgQjMgbmV0d29ya3M6CgpgYGB0eXBlc2NyaXB0IHRpdGxlPSJjaGFpbnMudHMiCmltcG9ydCB7IGIzTWFpbm5ldCwgYjNUZXN0bmV0IH0gZnJvbSAnQGIzZG90ZnVuL2Jhc2VtaW50JwoKLy8gQjMgTWFpbm5ldCAoUHJvZHVjdGlvbikKY29uc29sZS5sb2coJ0NoYWluIElEOicsIGIzTWFpbm5ldC5pZCkgLy8gODMzMwpjb25zb2xlLmxvZygnTmFtZTonLCBiM01haW5uZXQubmFtZSkKY29uc29sZS5sb2coJ1JQQyBVUkw6JywgYjNNYWlubmV0LnJwY1VybHMuZGVmYXVsdC5odHRwWzBdKQoKLy8gQjMgVGVzdG5ldCAoRGV2ZWxvcG1lbnQpCmNvbnNvbGUubG9nKCdDaGFpbiBJRDonLCBiM1Rlc3RuZXQuaWQpIC8vIDE5OTMKY29uc29sZS5sb2coJ05hbWU6JywgYjNUZXN0bmV0Lm5hbWUpCmNvbnNvbGUubG9nKCdSUEMgVVJMOicsIGIzVGVzdG5ldC5ycGNVcmxzLmRlZmF1bHQuaHR0cFswXSkKYGBgCgojIyMgMi4gSW5pdGlhbGl6ZSBWaWVtIENsaWVudAoKU2V0IHVwIHlvdXIgdmllbSBjbGllbnQgZm9yIGludGVyYWN0aW5nIHdpdGggdGhlIGJsb2NrY2hhaW46CgpgYGB0eXBlc2NyaXB0IHRpdGxlPSJjbGllbnQudHMiCmltcG9ydCB7IGNyZWF0ZVB1YmxpY0NsaWVudCwgY3JlYXRlV2FsbGV0Q2xpZW50LCBodHRwIH0gZnJvbSAndmllbScKaW1wb3J0IHsgcHJpdmF0ZUtleVRvQWNjb3VudCB9IGZyb20gJ3ZpZW0vYWNjb3VudHMnCmltcG9ydCB7IGIzVGVzdG5ldCB9IGZyb20gJ0BiM2RvdGZ1bi9iYXNlbWludCcKCi8vIFB1YmxpYyBjbGllbnQgZm9yIHJlYWRpbmcgZGF0YQpleHBvcnQgY29uc3QgcHVibGljQ2xpZW50ID0gY3JlYXRlUHVibGljQ2xpZW50KHsKICBjaGFpbjogYjNUZXN0bmV0LAogIHRyYW5zcG9ydDogaHR0cCgpCn0pCgovLyBXYWxsZXQgY2xpZW50IGZvciB0cmFuc2FjdGlvbnMgKGZvciBzZXJ2ZXItc2lkZSB1c2FnZSkKZXhwb3J0IGNvbnN0IHdhbGxldENsaWVudCA9IGNyZWF0ZVdhbGxldENsaWVudCh7CiAgY2hhaW46IGIzVGVzdG5ldCwKICB0cmFuc3BvcnQ6IGh0dHAoKSwKICBhY2NvdW50OiBwcml2YXRlS2V5VG9BY2NvdW50KHByb2Nlc3MuZW52LlBSSVZBVEVfS0VZIGFzIGAweCR7c3RyaW5nfWApCn0pCmBgYAoKIyMjIDMuIEVudmlyb25tZW50IFZhcmlhYmxlcwoKQ3JlYXRlIGEgYC5lbnZgIGZpbGUgaW4geW91ciBwcm9qZWN0IHJvb3Q6CgpgYGBiYXNoIHRpdGxlPSIuZW52IgojIFJlcXVpcmVkIGZvciBzaWduaW5nIHRyYW5zYWN0aW9ucwpQUklWQVRFX0tFWT0weC4uLgoKIyBPcHRpb25hbDogQ3VzdG9tIFJQQyBlbmRwb2ludHMKQjNfTUFJTk5FVF9SUEM9aHR0cHM6Ly95b3VyLWN1c3RvbS1ycGMuY29tCkIzX1RFU1RORVRfUlBDPWh0dHBzOi8veW91ci1jdXN0b20tdGVzdG5ldC1ycGMuY29tCmBgYAoKPFdhcm5pbmc+Ck5ldmVyIGNvbW1pdCBwcml2YXRlIGtleXMgdG8gdmVyc2lvbiBjb250cm9sLiBVc2UgZW52aXJvbm1lbnQgdmFyaWFibGVzIG9yIHNlY3VyZSBrZXkgbWFuYWdlbWVudCBzb2x1dGlvbnMuCjwvV2FybmluZz4KCiMjIEZyYW1ld29yayBJbnRlZ3JhdGlvbgoKIyMjIE5leHQuanMgU2V0dXAKCkZvciBOZXh0LmpzIGFwcGxpY2F0aW9ucywgY3JlYXRlIGEgY29uZmlndXJhdGlvbiBmaWxlOgoKYGBgdHlwZXNjcmlwdCB0aXRsZT0ibGliL2NyZWF0ZWtpdC50cyIKaW1wb3J0IHsgY3JlYXRlUHVibGljQ2xpZW50LCBodHRwIH0gZnJvbSAndmllbScKaW1wb3J0IHsgYjNUZXN0bmV0IH0gZnJvbSAnQGIzZG90ZnVuL2Jhc2VtaW50JwppbXBvcnQgeyAKICBDb2xsZWN0aW9uTWFuYWdlciwgCiAgUmV3YXJkVHJhY2tlciwgCiAgQmFzZU1pbnRTdG9yYWdlIAp9IGZyb20gJ0BiM2RvdGZ1bi9iYXNlbWludCcKCi8vIEluaXRpYWxpemUgY2xpZW50cwpleHBvcnQgY29uc3QgcHVibGljQ2xpZW50ID0gY3JlYXRlUHVibGljQ2xpZW50KHsKICBjaGFpbjogYjNUZXN0bmV0LAogIHRyYW5zcG9ydDogaHR0cCgpCn0pCgovLyBJbml0aWFsaXplIENyZWF0ZUtpdCBtYW5hZ2VycwpleHBvcnQgY29uc3QgY29sbGVjdGlvbk1hbmFnZXIgPSBuZXcgQ29sbGVjdGlvbk1hbmFnZXIocHVibGljQ2xpZW50KQpleHBvcnQgY29uc3QgcmV3YXJkVHJhY2tlciA9IG5ldyBSZXdhcmRUcmFja2VyKHB1YmxpY0NsaWVudCkKZXhwb3J0IGNvbnN0IHN0b3JhZ2UgPSBuZXcgQmFzZU1pbnRTdG9yYWdlKHsKICBiYXNlVXJsOiAnaHR0cHM6Ly9hcGkuYmFzZW1pbnQuZnVuJwp9KQpgYGAKCiMjIyBSZWFjdC9WaXRlIFNldHVwCgpgYGB0eXBlc2NyaXB0IHRpdGxlPSJzcmMvbGliL2NyZWF0ZWtpdC50cyIKaW1wb3J0IHsgY3JlYXRlUHVibGljQ2xpZW50LCBodHRwIH0gZnJvbSAndmllbScKaW1wb3J0IHsgYjNUZXN0bmV0IH0gZnJvbSAnQGIzZG90ZnVuL2Jhc2VtaW50JwppbXBvcnQgeyBDb2xsZWN0aW9uTWFuYWdlciB9IGZyb20gJ0BiM2RvdGZ1bi9iYXNlbWludCcKCmV4cG9ydCBjb25zdCBwdWJsaWNDbGllbnQgPSBjcmVhdGVQdWJsaWNDbGllbnQoewogIGNoYWluOiBiM1Rlc3RuZXQsCiAgdHJhbnNwb3J0OiBodHRwKGltcG9ydC5tZXRhLmVudi5WSVRFX1JQQ19VUkwpCn0pCgpleHBvcnQgY29uc3QgY29sbGVjdGlvbk1hbmFnZXIgPSBuZXcgQ29sbGVjdGlvbk1hbmFnZXIocHVibGljQ2xpZW50KQpgYGAKCiMjIFZlcmlmeSBJbnN0YWxsYXRpb24KClRlc3QgeW91ciBpbnN0YWxsYXRpb24gd2l0aCBhIHNpbXBsZSBzY3JpcHQ6CgpgYGB0eXBlc2NyaXB0IHRpdGxlPSJ0ZXN0LWluc3RhbGxhdGlvbi50cyIKaW1wb3J0IHsgYjNUZXN0bmV0LCBDb2xsZWN0aW9uTWFuYWdlciB9IGZyb20gJ0BiM2RvdGZ1bi9iYXNlbWludCcKaW1wb3J0IHsgY3JlYXRlUHVibGljQ2xpZW50LCBodHRwIH0gZnJvbSAndmllbScKCmFzeW5jIGZ1bmN0aW9uIHRlc3RJbnN0YWxsYXRpb24oKSB7CiAgdHJ5IHsKICAgIC8vIENyZWF0ZSBjbGllbnQKICAgIGNvbnN0IGNsaWVudCA9IGNyZWF0ZVB1YmxpY0NsaWVudCh7CiAgICAgIGNoYWluOiBiM1Rlc3RuZXQsCiAgICAgIHRyYW5zcG9ydDogaHR0cCgpCiAgICB9KQoKICAgIC8vIEluaXRpYWxpemUgbWFuYWdlcgogICAgY29uc3QgbWFuYWdlciA9IG5ldyBDb2xsZWN0aW9uTWFuYWdlcihjbGllbnQpCiAgICAKICAgIC8vIFRlc3QgY29ubmVjdGlvbgogICAgY29uc3QgYmxvY2tOdW1iZXIgPSBhd2FpdCBjbGllbnQuZ2V0QmxvY2tOdW1iZXIoKQogICAgY29uc29sZS5sb2coJ+KchSBTdWNjZXNzZnVsbHkgY29ubmVjdGVkIHRvIEIzIFRlc3RuZXQnKQogICAgY29uc29sZS5sb2coYPCfk4ogQ3VycmVudCBibG9jayBudW1iZXI6ICR7YmxvY2tOdW1iZXJ9YCkKICAgIAogICAgLy8gVGVzdCBjb250cmFjdCBpbnRlcmFjdGlvbgogICAgY29uc3QgZmFjdG9yeUFkZHJlc3MgPSBtYW5hZ2VyLmdldEZhY3RvcnlBZGRyZXNzKCkKICAgIGNvbnNvbGUubG9nKGDwn4+tIEZhY3RvcnkgYWRkcmVzczogJHtmYWN0b3J5QWRkcmVzc31gKQogICAgCiAgICBjb25zb2xlLmxvZygn8J+OiSBDcmVhdGVLaXQgaW5zdGFsbGF0aW9uIHN1Y2Nlc3NmdWwhJykKICB9IGNhdGNoIChlcnJvcikgewogICAgY29uc29sZS5lcnJvcign4p2MIEluc3RhbGxhdGlvbiB0ZXN0IGZhaWxlZDonLCBlcnJvcikKICB9Cn0KCnRlc3RJbnN0YWxsYXRpb24oKQpgYGAKClJ1biB0aGUgdGVzdCBzY3JpcHQ6Cgo8Q29kZUdyb3VwPgpgYGBiYXNoIG5wbQpucHggdHN4IHRlc3QtaW5zdGFsbGF0aW9uLnRzCmBgYAoKYGBgYmFzaCB5YXJuCnlhcm4gdHN4IHRlc3QtaW5zdGFsbGF0aW9uLnRzCmBgYAoKYGBgYmFzaCBwbnBtCnBucG0gdHN4IHRlc3QtaW5zdGFsbGF0aW9uLnRzCmBgYAo8L0NvZGVHcm91cD4KCiMjIFR5cGVTY3JpcHQgQ29uZmlndXJhdGlvbgoKRW5zdXJlIHlvdXIgYHRzY29uZmlnLmpzb25gIGluY2x1ZGVzIHRoZSBuZWNlc3NhcnkgY29uZmlndXJhdGlvbnM6CgpgYGBqc29uIHRpdGxlPSJ0c2NvbmZpZy5qc29uIgp7CiAgImNvbXBpbGVyT3B0aW9ucyI6IHsKICAgICJzdHJpY3QiOiB0cnVlLAogICAgIm1vZHVsZVJlc29sdXRpb24iOiAibm9kZSIsCiAgICAiYWxsb3dTeW50aGV0aWNEZWZhdWx0SW1wb3J0cyI6IHRydWUsCiAgICAiZXNNb2R1bGVJbnRlcm9wIjogdHJ1ZSwKICAgICJza2lwTGliQ2hlY2siOiB0cnVlLAogICAgInRhcmdldCI6ICJFUzIwMjAiLAogICAgIm1vZHVsZSI6ICJFU05leHQiLAogICAgImxpYiI6IFsiRVMyMDIwIiwgIkRPTSJdCiAgfQp9CmBgYAoKIyMgTmV4dCBTdGVwcwoKTm93IHRoYXQgeW91IGhhdmUgQ3JlYXRlS2l0IGluc3RhbGxlZCBhbmQgY29uZmlndXJlZCwgeW91J3JlIHJlYWR5IHRvIHN0YXJ0IGJ1aWxkaW5nOgoKPENhcmRHcm91cCBjb2xzPXsyfT4KICA8Q2FyZCB0aXRsZT0iUXVpY2sgU3RhcnQgR3VpZGUiIGljb249InJvY2tldCIgaHJlZj0iL2NyZWF0ZWtpdC9xdWlja3N0YXJ0Ij4KICAgIENyZWF0ZSB5b3VyIGZpcnN0IE5GVCBjb2xsZWN0aW9uIGluIG1pbnV0ZXMKICA8L0NhcmQ+CiAgPENhcmQgdGl0bGU9IkNvbGxlY3Rpb24gTWFuYWdlbWVudCIgaWNvbj0iZm9sZGVyIiBocmVmPSIvY3JlYXRla2l0L2NvbGxlY3Rpb25zIj4KICAgIExlYXJuIGFib3V0IGNvbGxlY3Rpb24gY3JlYXRpb24gYW5kIG1hbmFnZW1lbnQKICA8L0NhcmQ+CjwvQ2FyZEdyb3VwPgoKIyMgVHJvdWJsZXNob290aW5nCgo8QWNjb3JkaW9uR3JvdXA+CiAgPEFjY29yZGlvbiB0aXRsZT0iTW9kdWxlIG5vdCBmb3VuZCBlcnJvcnMiPgogICAgRW5zdXJlIGFsbCBwZWVyIGRlcGVuZGVuY2llcyBhcmUgaW5zdGFsbGVkOgogICAgYGBgYmFzaAogICAgbnBtIGluc3RhbGwgdmllbSBAd2FnbWkvY29yZQogICAgYGBgCiAgPC9BY2NvcmRpb24+CgogIDxBY2NvcmRpb24gdGl0bGU9IlR5cGVTY3JpcHQgZXJyb3JzIj4KICAgIE1ha2Ugc3VyZSB5b3VyIFR5cGVTY3JpcHQgY29uZmlndXJhdGlvbiBpbmNsdWRlcyB0aGUgbmVjZXNzYXJ5IGxpYiBlbnRyaWVzIGFuZCB0aGF0IGBza2lwTGliQ2hlY2tgIGlzIGVuYWJsZWQuCiAgPC9BY2NvcmRpb24+CgogIDxBY2NvcmRpb24gdGl0bGU9Ik5ldHdvcmsgY29ubmVjdGlvbiBpc3N1ZXMiPgogICAgVmVyaWZ5IHlvdXIgUlBDIGVuZHBvaW50cyBhcmUgY29ycmVjdCBhbmQgYWNjZXNzaWJsZS4gVXNlIHRoZSBkZWZhdWx0IEIzIFJQQyBlbmRwb2ludHMgaWYgY3VzdG9tIG9uZXMgZmFpbC4KICA8L0FjY29yZGlvbj4KCiAgPEFjY29yZGlvbiB0aXRsZT0iUHJpdmF0ZSBrZXkgZm9ybWF0IGVycm9ycyI+CiAgICBFbnN1cmUgeW91ciBwcml2YXRlIGtleSBpcyBpbiB0aGUgY29ycmVjdCBmb3JtYXQgKDB4IHByZWZpeGVkKSBhbmQgaGFzIHN1ZmZpY2llbnQgZnVuZHMgZm9yIGdhcyBmZWVzLgogIDwvQWNjb3JkaW9uPgo8L0FjY29yZGlvbkdyb3VwPgo=",
    "lastUpdated": "2025-09-03T02:57:59.624Z"
  },
  {
    "sourceFile": "createkit/examples.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-09-03T02:59:41.976Z"
  },
  {
    "sourceFile": "createkit/error-handling.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-09-03T03:01:01.204Z"
  },
  {
    "sourceFile": "createkit/collections.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-09-03T03:02:50.034Z"
  },
  {
    "sourceFile": "bondkit/quickstart.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-10-31T02:28:34.555Z"
  },
  {
    "sourceFile": "bondkit/networks.mdx",
    "sourceHash": "CiMjIEJhc2UgTWFpbm5ldAoKfCBOYW1lIHwgQWRkcmVzcyB8CnwtLS0tLS18LS0tLS0tLS0tfAp8IEJvbmRraXRUb2tlbkZhY3RvcnkgfCBgMHg1ZDY0MWJiQjIwNmQ0QjU1ODVlQ0NkOTE5RjM2MjcwMjAwQTlBMkFkYCB8CnwgQm9uZGtpdFRva2VuIEltcGxlbWVudGF0aW9uIHwgYDB4NjhkRWNDMDlEODgwMEVEMTEzOEM3ODFBQmU0MDU2YWJhN2E0ZUY3RWAgfAp8IFVuaXN3YXAgVjQgUG9vbCBNYW5hZ2VyIHwgYDB4NDk4NTgxZkY3MTg5MjJjM2Y4ZTZBMjQ0OTU2YUYwOTlCMjY1MmIyYmAgfAp8IEJvbmRraXRVbmlzd2FwVjRIb29rIHwgYDB4QjM2ZjRBMkZCMThiNzQ1ZWY4ZUQzMTQ1Mjc4MWE0NjNkMkIzZjBjQ2AgfAp8IEIzIHwgYDB4QjNCMzJGOWY4ODI3RDQ2MzRmRTdkOTczRmExMDM0RWM5ZmREQjNCM2AgfAp8IEJvbmRpbmcgUGhhc2UgU3BsaXR0ZXIgfCBgMHgyQUI2OWUwZDlEMjBEMzcwMDQ2NjE1M0Q4NGE2NTc0MTI4MTU0RmQyYCB8CnwgRGV4IFBoYXNlIFNwbGl0dGVyIHwgYFRCRGAgfAoKPE5vdGU+CkJvbmRLaXQgb3BlcmF0ZXMgb24gQmFzZSBtYWlubmV0LiBUZXN0bmV0L2RldiBlbnZpcm9ubWVudHMgYXJlIGN1cnJlbnRseSBub3QgYXZhaWxhYmxlLgo8L05vdGU+CgoK",
    "lastUpdated": "2025-10-31T02:28:46.515Z"
  },
  {
    "sourceFile": "bondkit/introduction.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-10-31T02:30:02.626Z"
  },
  {
    "sourceFile": "bondkit/installation.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-09-03T03:06:35.953Z"
  },
  {
    "sourceFile": "bondkit/how-it-works.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-10-31T02:31:46.680Z"
  },
  {
    "sourceFile": "basement/unity-guide.mdx",
    "sourceHash": "CiMjIEZlYXR1cmVzCgpUaGUgQjMgVW5pdHkgU0RLIHByb3ZpZGVzIGNvbXByZWhlbnNpdmUgaW50ZWdyYXRpb24gY2FwYWJpbGl0aWVzIGZvciBVbml0eSBkZXZlbG9wZXJzOgoKPENhcmRHcm91cCBjb2xzPXsxfT4KICA8Q2FyZCB0aXRsZT0iU2Vzc2lvbiBNYW5hZ2VtZW50IiBpY29uPSJ1c2VyLWNoZWNrIj4KICAgIFRoZSBTREsgYXV0b21hdGljYWxseSBhbmQgc2VhbWxlc3NseSBoYW5kbGVzIHVzZXIgYXV0aGVudGljYXRpb24uCiAgPC9DYXJkPgogIAogIDxDYXJkIHRpdGxlPSJBUElzIGFzIEZ1bmN0aW9ucyIgaWNvbj0iY29kZSI+CiAgICBVc2UgYWxsIG9mIHRoZSBsYXVuY2hlciBBUElzIGVhc2lseSB3aXRoIHN1cHBvcnQgZm9yIGJvdGggY2FsbGJhY2sgYmFzZWQgQU5EIGFzeW5jL2F3YWl0IGJhc2VkIGNhbGxzLgogIDwvQ2FyZD4KICAKICA8Q2FyZCB0aXRsZT0iV2ViaG9va3MgZm9yIFdlYkdMIiBpY29uPSJ3ZWJob29rIj4KICAgIEhhbmRsZXMgbGF1bmNoZXIgY2xpZW50IHdlYmhvb2tzLCBhbmQgcGFyc2VzIGFuZCBwcm9wYWdhdGVzIHRoZW0gdG8geW91ciBvd24gQyMgQ29kZS4KICA8L0NhcmQ+CjwvQ2FyZEdyb3VwPgoKIyMgSW5zdGFsbGF0aW9uIGFuZCBVc2FnZQoKPFN0ZXBzPgo8U3RlcCB0aXRsZT0iRG93bmxvYWQgdGhlIFNESyI+CiAgSGVhZCBvdmVyIHRvIHRoZSBHaXRIdWIgcmVwb3NpdG9yeSBhbmQgZG93bmxvYWQgdGhlIGxhdGVzdCByZWxlYXNlLgogIAogIDxDYXJkIHRpdGxlPSJHZXQgdGhlIFVuaXR5IFNESyIgaWNvbj0iZG93bmxvYWQiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9iMy1mdW4vYjMtdW5pdHktc2RrIiBjdGE9IkRvd25sb2FkIGZyb20gR2l0SHViIiBob3Jpem9udGFsPgogICAgQWNjZXNzIHRoZSBvZmZpY2lhbCBCMyBVbml0eSBTREsgcmVwb3NpdG9yeSB3aXRoIGluc3RhbGxhdGlvbiBpbnN0cnVjdGlvbnMKICA8L0NhcmQ+CjwvU3RlcD4KCjxTdGVwIHRpdGxlPSJJbnN0YWxsIHRvIFVuaXR5IFByb2plY3QiPgogIEZvbGxvdyB0aGUgc2V0dXAgZ3VpZGUgaW5zdHJ1Y3Rpb25zIG9uIEdpdEh1YiB0byBpbnN0YWxsIHRoZSBTREsgdG8geW91ciBVbml0eSBQcm9qZWN0LgogIAogIDxOb3RlPgogIFRoZSBHaXRIdWIgcmVwb3NpdG9yeSBjb250YWlucyBkZXRhaWxlZCBpbnN0YWxsYXRpb24gaW5zdHJ1Y3Rpb25zIGFuZCBzZXR1cCByZXF1aXJlbWVudHMuCiAgPC9Ob3RlPgo8L1N0ZXA+Cgo8U3RlcCB0aXRsZT0iSW5pdGlhbGl6ZSB0aGUgU0RLIj4KICBBZnRlciBpbnN0YWxsaW5nIHRoZSBTREsgYW5kIGZvbGxvd2luZyB0aGUgc2V0dXAgZ3VpZGUsIHlvdSdsbCBiZSBhYmxlIHRvIGVhc2lseSBjYWxsIGFsbCB0aGUgQVBJcyBhcyBmdW5jdGlvbnMuCiAgCiAgPENoZWNrPgogIFlvdXIgVW5pdHkgcHJvamVjdCBpcyBub3cgcmVhZHkgdG8gaW50ZWdyYXRlIHdpdGggdGhlIEIzIGxhdW5jaGVyIQogIDwvQ2hlY2s+CjwvU3RlcD4KPC9TdGVwcz4KCiMjIENvZGUgRXhhbXBsZXMKCiMjIyBUcmlnZ2VyIFJ1bGVzIEVuZ2luZQoKSGVyZSdzIGFuIGV4YW1wbGUgb2YgaG93IHRvIHRyaWdnZXIgdGhlIHJ1bGVzIGVuZ2luZSBmcm9tIHdpdGhpbiB5b3VyIFVuaXR5IGdhbWU6CgpgYGBjc2hhcnAgVW5pdHkgQyMgRXhhbXBsZQpCM0xhdW5jaGVyQ2xpZW50LlRyaWdnZXJSdWxlc0VuZ2luZShuZXcgQjNMYXVuY2hlckNsaWVudC5UcmlnZ2VyUnVsZXNFbmdpbmVCb2R5CnsKICAgIGxhdW5jaGVySnd0ID0gQjNJbnN0YW5jZS5JbnN0YW5jZS5TZXNzaW9uSldUID8/IGp3dElucHV0LnRleHQsCiAgICB0cmlnZ2VyID0gIm9wZW4tdGlwLW1vZGFsIiwKICAgIG90aGVyV2FsbGV0ID0gb3RoZXJXYWxsZXRJbnB1dC50ZXh0LAp9LCBudWxsKTsKYGBgCgojIyMgU2Vzc2lvbiBNYW5hZ2VtZW50CgpUaGUgU0RLIGF1dG9tYXRpY2FsbHkgaGFuZGxlcyB1c2VyIHNlc3Npb25zOgoKYGBgY3NoYXJwIFNlc3Npb24gRXhhbXBsZQovLyBBY2Nlc3MgdGhlIGN1cnJlbnQgc2Vzc2lvbiBKV1QKc3RyaW5nIHNlc3Npb25Ub2tlbiA9IEIzSW5zdGFuY2UuSW5zdGFuY2UuU2Vzc2lvbkpXVDsKCi8vIENoZWNrIGlmIHVzZXIgaXMgYXV0aGVudGljYXRlZAppZiAoQjNJbnN0YW5jZS5JbnN0YW5jZS5Jc0F1dGhlbnRpY2F0ZWQpCnsKICAgIC8vIFVzZXIgaXMgbG9nZ2VkIGluIGFuZCByZWFkeSB0byBpbnRlcmFjdCB3aXRoIEIzIHNlcnZpY2VzCiAgICBEZWJ1Zy5Mb2coIlVzZXIgYXV0aGVudGljYXRlZCBzdWNjZXNzZnVsbHkiKTsKfQpgYGAKCiMjIEFQSSBJbnRlZ3JhdGlvbgoKVGhlIFVuaXR5IFNESyBwcm92aWRlcyBzZWFtbGVzcyBhY2Nlc3MgdG8gYWxsIEIzIGxhdW5jaGVyIEFQSXM6Cgo8QWNjb3JkaW9uR3JvdXA+CjxBY2NvcmRpb24gdGl0bGU9IkNhbGxiYWNrLWJhc2VkIENhbGxzIj4KICBUcmFkaXRpb25hbCBjYWxsYmFjayBwYXR0ZXJuIGZvciBoYW5kbGluZyBBUEkgcmVzcG9uc2VzOgogIAogIGBgYGNzaGFycAogIEIzTGF1bmNoZXJDbGllbnQuU29tZUFQSUNhbGwocmVxdWVzdERhdGEsIChyZXNwb25zZSkgPT4gewogICAgICAvLyBIYW5kbGUgcmVzcG9uc2UKICAgICAgRGVidWcuTG9nKCJBUEkgY2FsbCBjb21wbGV0ZWQiKTsKICB9KTsKICBgYGAKPC9BY2NvcmRpb24+Cgo8QWNjb3JkaW9uIHRpdGxlPSJBc3luYy9Bd2FpdCBDYWxscyI+CiAgTW9kZXJuIGFzeW5jL2F3YWl0IHBhdHRlcm4gZm9yIGNsZWFuZXIgY29kZToKICAKICBgYGBjc2hhcnAKICBwdWJsaWMgYXN5bmMgdm9pZCBDYWxsQVBJKCkKICB7CiAgICAgIHZhciByZXNwb25zZSA9IGF3YWl0IEIzTGF1bmNoZXJDbGllbnQuU29tZUFQSUNhbGxBc3luYyhyZXF1ZXN0RGF0YSk7CiAgICAgIC8vIEhhbmRsZSByZXNwb25zZQogICAgICBEZWJ1Zy5Mb2coIkFQSSBjYWxsIGNvbXBsZXRlZCIpOwogIH0KICBgYGAKPC9BY2NvcmRpb24+Cgo8QWNjb3JkaW9uIHRpdGxlPSJXZWJHTCBXZWJob29rcyI+CiAgSGFuZGxlIGxhdW5jaGVyIGV2ZW50cyBpbiBXZWJHTCBidWlsZHM6CiAgCiAgYGBgY3NoYXJwCiAgLy8gUmVnaXN0ZXIgd2ViaG9vayBoYW5kbGVycwogIEIzSW5zdGFuY2UuSW5zdGFuY2UuT25XZWJob29rUmVjZWl2ZWQgKz0gSGFuZGxlV2ViaG9vazsKICAKICBwcml2YXRlIHZvaWQgSGFuZGxlV2ViaG9vayhXZWJob29rRGF0YSBkYXRhKQogIHsKICAgICAgLy8gUHJvY2VzcyBpbmNvbWluZyB3ZWJob29rIGRhdGEKICAgICAgRGVidWcuTG9nKCQiUmVjZWl2ZWQgd2ViaG9vazoge2RhdGEudHlwZX0iKTsKICB9CiAgYGBgCjwvQWNjb3JkaW9uPgo8L0FjY29yZGlvbkdyb3VwPgoKIyMgTmV4dCBTdGVwcwoKPENhcmRHcm91cCBjb2xzPXsyfT4KICA8Q2FyZCB0aXRsZT0iR2FtZSBMYXVuY2hlciBHdWlkZSIgaWNvbj0icm9ja2V0IiBocmVmPSIvYmFzZW1lbnQvZ2FtZS1sYXVuY2hlciI+CiAgICBMZWFybiBob3cgdG8gaW50ZWdyYXRlIHdpdGggdGhlIEJTTU5UIGdhbWUgbGF1bmNoZXIKICA8L0NhcmQ+CiAgCiAgPENhcmQgdGl0bGU9IkJTTU5UIEFQSSBEb2NzIiBpY29uPSJib29rIiBocmVmPSJodHRwczovL2RvY3MuYmFzZW1lbnQuZnVuL2FwaSI+CiAgICBDb21wbGV0ZSBBUEkgZG9jdW1lbnRhdGlvbiBmb3IgYWxsIGF2YWlsYWJsZSBlbmRwb2ludHMKICA8L0NhcmQ+CiAgCiAgPENhcmQgdGl0bGU9IlVuaXR5IERvY3VtZW50YXRpb24iIGljb249ImV4dGVybmFsLWxpbmsiIGhyZWY9Imh0dHBzOi8vZG9jcy51bml0eTNkLmNvbS8iPgogICAgT2ZmaWNpYWwgVW5pdHkgZG9jdW1lbnRhdGlvbiBhbmQgcmVzb3VyY2VzCiAgPC9DYXJkPgogIAogIDxDYXJkIHRpdGxlPSJFeGFtcGxlIFByb2plY3RzIiBpY29uPSJmb2xkZXIiIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS9iMy1mdW4vdW5pdHktZXhhbXBsZXMiPgogICAgU2FtcGxlIFVuaXR5IHByb2plY3RzIHVzaW5nIHRoZSBCMyBTREsKICA8L0NhcmQ+CjwvQ2FyZEdyb3VwPgoKIyMgU3VwcG9ydAoKPEluZm8+CkZvciB0ZWNobmljYWwgc3VwcG9ydCwgYnVnIHJlcG9ydHMsIG9yIGZlYXR1cmUgcmVxdWVzdHMsIHBsZWFzZSB2aXNpdCB0aGUgR2l0SHViIHJlcG9zaXRvcnkgb3IgcmVhY2ggb3V0IHRvIG91ciBkZXZlbG9wZXIgY29tbXVuaXR5Lgo8L0luZm8+Cgo8Q2FyZCB0aXRsZT0iR2V0IFVuaXR5IFNESyBTdXBwb3J0IiBpY29uPSJoZWxwLWNpcmNsZSIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL2IzLWZ1bi9iMy11bml0eS1zZGsvaXNzdWVzIiBjdGE9IkdpdEh1YiBJc3N1ZXMiIGhvcml6b250YWw+CiAgUmVwb3J0IGlzc3VlcyBvciBnZXQgaGVscCBmcm9tIHRoZSBkZXZlbG9wZXIgY29tbXVuaXR5CjwvQ2FyZD4K",
    "lastUpdated": "2025-09-03T03:08:29.383Z"
  },
  {
    "sourceFile": "basement/introduction.mdx",
    "sourceHash": "CjxpbWcgc3JjPSIvaW1hZ2VzL2JzbW50LWdhbWUtZGV2cy1iYW5uZXIuanBnIiBhbHQ9IkJhc2VtZW50LmZ1biBEZXZlbG9wZXIgRGFzaGJvYXJkIiBjbGFzc05hbWU9InctZnVsbCBhc3BlY3QtdmlkZW8gcm91bmRlZC0zeGwiIC8+CgojIyBXaGF0IGlzIEJhc2VtZW50PwpCYXNlbWVudCBpcyB0aGUgZ2FtaW5nLWZvY3VzZWQgbGF5ZXIgb2YgdGhlIEIzIGVjb3N5c3RlbSwgZGVzaWduZWQgc3BlY2lmaWNhbGx5IGZvciBnYW1lIGRldmVsb3BlcnMgYW5kIGdhbWluZyBjb21tdW5pdGllcy4gSXQgcHJvdmlkZXM6Cgo8aW1nIHNyYz0iL2ltYWdlcy9ic21udC1sb2dvLnN2ZyIgYWx0PSJCYXNlbWVudC5mdW4iIGNsYXNzTmFtZT0idy0zMiIgLz4KCi0gKipHYW1lIExhdW5jaGVyKio6IERlcGxveSBhbmQgbWFuYWdlIGdhbWVzIG9uIEIzCi0gKipEZXZlbG9wZXIgVG9vbHMqKjogU0RLcyBhbmQgQVBJcyBmb3IgZ2FtZSBkZXZlbG9wbWVudAotICoqQ29tbXVuaXR5IEZlYXR1cmVzKio6IFBsYXllciBwcm9maWxlcywgYWNoaWV2ZW1lbnRzLCBhbmQgc29jaWFsIGZlYXR1cmVzCi0gKipCcmFuZCBSZXNvdXJjZXMqKjogQXNzZXRzIGFuZCBndWlkZWxpbmVzIGZvciBjb25zaXN0ZW50IGJyYW5kaW5nCgo8Tm90ZT4KICA8YSBocmVmPSJodHRwczovL2Jhc2VtZW50LmZ1biI+CiAgICBQbGF5IG9uIHRoZSBiYXNlbWVudC5mdW4gYXBwCiAgPC9hPgo8L05vdGU+CgojIyBHZXR0aW5nIFN0YXJ0ZWQKCiA8aWZyYW1lCiAgIGNsYXNzTmFtZT0idy1mdWxsIGFzcGVjdC12aWRlbyByb3VuZGVkLXhsIG1iLTYiCiAgICBzcmM9Imh0dHBzOi8vY3VzdG9tZXItZ2c2cXM3bm01dWU5NHQ2NC5jbG91ZGZsYXJlc3RyZWFtLmNvbS84OTQwMzZmMWNlM2U1YWE4YzZmMDA5NzJiODg5YTI5MS9pZnJhbWU/cG9zdGVyPWh0dHBzJTNBJTJGJTJGY3VzdG9tZXItZ2c2cXM3bm01dWU5NHQ2NC5jbG91ZGZsYXJlc3RyZWFtLmNvbSUyRjg5NDAzNmYxY2UzZTVhYThjNmYwMDk3MmI4ODlhMjkxJTJGdGh1bWJuYWlscyUyRnRodW1ibmFpbC5qcGclM0Z0aW1lJTNEJTI2aGVpZ2h0JTNENjAwIgogICAgdGl0bGU9IkJhc2VtZW50LmZ1biBEZXZlbG9wZXIgRGFzaGJvYXJkIgogICAgZnJhbWVCb3JkZXI9IjAiCiAgYWxsb3c9ImFjY2VsZXJvbWV0ZXI7IGF1dG9wbGF5OyBjbGlwYm9hcmQtd3JpdGU7IGVuY3J5cHRlZC1tZWRpYTsgZ3lyb3Njb3BlOyBwaWN0dXJlLWluLXBpY3R1cmUiCiAgYWxsb3dGdWxsU2NyZWVuCiAgPjwvaWZyYW1lPgoKPENhcmRHcm91cCBjb2xzPXsyfT4KPENhcmQgdGl0bGU9IkdhbWUgTGF1bmNoZXIgR3VpZGUiIGljb249InJvY2tldCIgaHJlZj0iL2Jhc2VtZW50L2dhbWUtbGF1bmNoZXIiPgogIExlYXJuIGhvdyB0byBkZXBsb3kgeW91ciBnYW1lcyB1c2luZyB0aGUgQmFzZW1lbnQgR2FtZSBMYXVuY2hlcgo8L0NhcmQ+Cgo8Q2FyZCB0aXRsZT0iVW5pdHkgR3VpZGUiIGljb249InVuaXR5IiBocmVmPSIvYmFzZW1lbnQvdW5pdHktZ3VpZGUiPgogIEludGVncmF0ZSBCMyBmZWF0dXJlcyBpbnRvIHlvdXIgVW5pdHkgZ2FtZXMKPC9DYXJkPgoKPENhcmQgdGl0bGU9IkNvbnN0cnVjdCBHdWlkZSIgaWNvbj0iZ2FtZXBhZCIgaHJlZj0iL2Jhc2VtZW50L2NvbnN0cnVjdC1ndWlkZSI+CiAgQnVpbGQgZ2FtZXMgd2l0aCBDb25zdHJ1Y3QgMyBhbmQgQjMgaW50ZWdyYXRpb24KPC9DYXJkPgoKPENhcmQgdGl0bGU9IkJyYW5kIEtpdCIgaWNvbj0icGFsZXR0ZSIgaHJlZj0iL2Jhc2VtZW50L2JyYW5kLWtpdCI+CiAgQWNjZXNzIEJhc2VtZW50IGJyYW5kaW5nIGFzc2V0cyBhbmQgZ3VpZGVsaW5lcwo8L0NhcmQ+CjwvQ2FyZEdyb3VwPgoKIyMgS2V5IEZlYXR1cmVzCgo8QWNjb3JkaW9uR3JvdXA+CjxBY2NvcmRpb24gdGl0bGU9IkdhbWUgRGV2ZWxvcG1lbnQgU0RLcyI+CkNvbXByZWhlbnNpdmUgc29mdHdhcmUgZGV2ZWxvcG1lbnQga2l0cyBmb3IgVW5pdHksIENvbnN0cnVjdCwgYW5kIG90aGVyIHBvcHVsYXIgZ2FtZSBlbmdpbmVzLCBlbmFibGluZyBzZWFtbGVzcyBpbnRlZ3JhdGlvbiB3aXRoIEIzJ3MgYmxvY2tjaGFpbiBmZWF0dXJlcy4KPC9BY2NvcmRpb24+Cgo8QWNjb3JkaW9uIHRpdGxlPSJQbGF5ZXIgSWRlbnRpdHkgJiBBY2NvdW50cyI+Ckdsb2JhbCBhY2NvdW50IHN5c3RlbSB0aGF0IGFsbG93cyBwbGF5ZXJzIHRvIG1haW50YWluIGNvbnNpc3RlbnQgcHJvZmlsZXMsIGFjaGlldmVtZW50cywgYW5kIGFzc2V0cyBhY3Jvc3MgYWxsIGdhbWVzIGluIHRoZSBCYXNlbWVudCBlY29zeXN0ZW0uCjwvQWNjb3JkaW9uPgoKPEFjY29yZGlvbiB0aXRsZT0iQXNzZXQgTWFuYWdlbWVudCI+ClRvb2xzIGZvciBtYW5hZ2luZyBpbi1nYW1lIGFzc2V0cywgTkZUcywgYW5kIHRva2Vucywgd2l0aCBlYXN5IGludGVncmF0aW9uIGZvciBkZXZlbG9wZXJzIGFuZCB0cmFuc3BhcmVudCBvd25lcnNoaXAgZm9yIHBsYXllcnMuCjwvQWNjb3JkaW9uPgoKPEFjY29yZGlvbiB0aXRsZT0iQ29tbXVuaXR5IEZlYXR1cmVzIj4KQnVpbHQtaW4gc29jaWFsIGZlYXR1cmVzLCBsZWFkZXJib2FyZHMsIHRvdXJuYW1lbnRzLCBhbmQgY29tbXVuaXR5IG1hbmFnZW1lbnQgdG9vbHMgdG8gZW5oYW5jZSBwbGF5ZXIgZW5nYWdlbWVudC4KPC9BY2NvcmRpb24+CjwvQWNjb3JkaW9uR3JvdXA+CgoKUmVhZHkgdG8gc3RhcnQgYnVpbGRpbmc/IENoZWNrIG91dCBvdXIgW0dhbWUgTGF1bmNoZXIgR3VpZGVdKC9iYXNlbWVudC9nYW1lLWxhdW5jaGVyKSB0byBkZXBsb3kgeW91ciBmaXJzdCBnYW1lIG9uIEIzLgo=",
    "lastUpdated": "2025-10-31T02:32:13.436Z"
  },
  {
    "sourceFile": "basement/game-launcher.mdx",
    "sourceHash": "CiA8aWZyYW1lCiAgIGNsYXNzTmFtZT0idy1mdWxsIGFzcGVjdC12aWRlbyByb3VuZGVkLXhsIG1iLTYiCiAgICBzcmM9Imh0dHBzOi8vY3VzdG9tZXItZ2c2cXM3bm01dWU5NHQ2NC5jbG91ZGZsYXJlc3RyZWFtLmNvbS84OTQwMzZmMWNlM2U1YWE4YzZmMDA5NzJiODg5YTI5MS9pZnJhbWU/cG9zdGVyPWh0dHBzJTNBJTJGJTJGY3VzdG9tZXItZ2c2cXM3bm01dWU5NHQ2NC5jbG91ZGZsYXJlc3RyZWFtLmNvbSUyRjg5NDAzNmYxY2UzZTVhYThjNmYwMDk3MmI4ODlhMjkxJTJGdGh1bWJuYWlscyUyRnRodW1ibmFpbC5qcGclM0Z0aW1lJTNEJTI2aGVpZ2h0JTNENjAwIgogICAgdGl0bGU9IkJhc2VtZW50LmZ1biBEZXZlbG9wZXIgRGFzaGJvYXJkIgogICAgZnJhbWVCb3JkZXI9IjAiCiAgYWxsb3c9ImFjY2VsZXJvbWV0ZXI7IGF1dG9wbGF5OyBjbGlwYm9hcmQtd3JpdGU7IGVuY3J5cHRlZC1tZWRpYTsgZ3lyb3Njb3BlOyBwaWN0dXJlLWluLXBpY3R1cmUiCiAgYWxsb3dGdWxsU2NyZWVuCiAgPjwvaWZyYW1lPgoKCiMjIEhvdyBJdCBXb3JrcwoKPFN0ZXBzPgo8U3RlcCB0aXRsZT0iTG9hZCIgaWNvbj0iZG93bmxvYWQiPgogIFlvdXIgZ2FtZSBsb2FkcyBpbnNpZGUgQlNNTlQgbGF1bmNoZXIuIFdlIHBhc3MgYSBKV1Qgd2l0aCB0aGUgYXV0aCB0b2tlbiB0byB5b3VyIGdhbWUuCiAgCiAgYGBgdGV4dCBFeGFtcGxlIFVSTAogIGh0dHBzOi8veW91cmdhbWUuY29tP3Rva2VuPWV5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS4uLgogIGBgYAo8L1N0ZXA+Cgo8U3RlcCB0aXRsZT0iQXV0aCIgaWNvbj0ia2V5Ij4KICBZb3UgY2FuIGxvYWQgdGhlIHBsYXllcidzIHByb2ZpbGUgYnkgZGVjb2RpbmcgdGhlIEpXVCwgb3IgYnkgdXNpbmcgb3VyIEFQSS4gV2UnbGwgdGFrZSBjYXJlIG9mIHdhbGxldCBjb25uZWN0aW9ucywgdmVyaWZpY2F0aW9uICYgb25ib2FyZGluZy4KICAKICBgYGBqc29uIFBsYXllciBQcm9maWxlCiAgewogICAgImlkIjogIjU1MGU4NDAwLWUyOWItNDFkNC1hNzE2LTQ0NjY1NTQ0MDAwMCIsCiAgICAiYWRkcmVzcyI6ICIweDEyMzQ1Njc4OTBhYmNkZWYxMjM0NTY3ODkwYWJjZGVmMTIzNDU2NzgiLAogICAgInVzZXJuYW1lIjogIkNyeXB0b0dhbWVyNDIiLAogICAgImF2YXRhciI6ICJodHRwczovL2F2YXRhcnMuYjMuZnVuL2F2YXRhci5wbmciLAogICAgImdhbWVJZCI6ICJnYW1lLTEyMzQ1Ni1hYmNkZWYiLAogICAgImxpY2Vuc2UiOiAiNTUwZTg0MDAtZTI5Yi00MWQ0LWE3MTYtNDQ2NjU1NDQwMDAwIiwKICAgICJ0b2tlbiI6ICJleUpoYkdjaU9pSklVekkxTmlJc0luUjVjQ0k2SWtwWFZDSjkuLi4iCiAgfQogIGBgYAo8L1N0ZXA+Cgo8U3RlcCB0aXRsZT0iVHJpZ2dlciIgaWNvbj0iYm9sdCI+CiAgTGV0IHRoZSB1c2VyIHBsYXkgeW91ciBnYW1lLiBXaGVuIHNvbWV0aGluZyBoYXBwZW5zLCB5b3UgY2FuIHRyaWdnZXIgYW4gYWN0aW9uIHZpYSBvdXIgWmFwaWVyLXN0eWxlIHJ1bGVzIGVuZ2luZSwgb3IgZGlyZWN0bHkgdmlhIEFQSS4KICAKICBgYGBiYXNoIFRyaWdnZXIgQVBJIEV4YW1wbGUKICBjdXJsIC0tbG9jYXRpb24gJ2h0dHBzOi8vYXBpLmJhc2VtZW50LmZ1bi9sYXVuY2hlci8nIFwKICAtLWhlYWRlciAnWC1TZXJ2aWNlLU1ldGhvZDogdHJpZ2dlclJ1bGVzRW5naW5lJyBcCiAgLS1kYXRhICd7CiAgICAgICJsYXVuY2hlckp3dCI6ICJ7eyBqd3QgfX0iLAogICAgICAidHJpZ2dlciI6ICJhY2hpZXZlbWVudFVubG9ja2VkIiwKICAgICAgIm5vbmNlIjogImQxMzEyZSIKICB9JwogIGBgYAo8L1N0ZXA+CjwvU3RlcHM+Cgo8Q2FyZEdyb3VwIGNvbHM9ezJ9PgogIDxDYXJkIHRpdGxlPSJSZWdpc3RlciBhcyBEZXZlbG9wZXIiIGljb249InVzZXItcGx1cyIgaHJlZj0iaHR0cHM6Ly9iYXNlbWVudC5mdW4vZGV2ZWxvcGVyL3NpZ251cCIgY3RhPSJTaWduIFVwIj4KICAgIEdldCBzdGFydGVkIGJ1aWxkaW5nIGdhbWVzIHdpdGggQlNNTlQgbGF1bmNoZXIKICA8L0NhcmQ+CiAgCiAgPENhcmQgdGl0bGU9IkxhdW5jaGVyIFBsYXlncm91bmQiIGljb249InBsYXkiIGhyZWY9Imh0dHBzOi8vYmFzZW1lbnQuZnVuL3BsYXlncm91bmQiIGN0YT0iVHJ5IE5vdyI+CiAgICBUZXN0IHRoZSBsYXVuY2hlciBpbnRlZ3JhdGlvbiBpbiBhIHNhbmRib3ggZW52aXJvbm1lbnQKICA8L0NhcmQ+CjwvQ2FyZEdyb3VwPgoKIyMgV2hhdCBjYW4geW91IGRvIHdpdGggQlNNTlQgbGF1bmNoZXI/CgpUaGUgcmVhbCBwb3dlciBvZiB0aGUgZ2FtZSBsYXVuY2hlciBpcyBpbiB0aGUgY3J5cHRvIFVYIGFic3RyYWN0aW9uLiBZb3VyIGdhbWUgY2FuIHNlY3VyZWx5IHNlbmQgb25jaGFpbiBldmVudHMgdGhyb3VnaCBhIHNpbXBsZSBSRVNUIEFQSSwgZXhlY3V0YWJsZSBjbGllbnQgc2lkZS4KCiMjIyBBdmFpbGFibGUgTm93Cgo8Q2FyZEdyb3VwIGNvbHM9ezJ9PgogIDxDYXJkIHRpdGxlPSJTYXZlIHN0YXRlIHRvIElQRlMiIGljb249ImRhdGFiYXNlIj4KICAgIFN0b3JlIHBsYXllciBzdGF0ZSBvbiBkZWNlbnRyYWxpemVkIHN0b3JhZ2Ugb3B0aW9ucyBsaWtlIElQRlMuCiAgPC9DYXJkPgogIAogIDxDYXJkIHRpdGxlPSJCdXkgTkZUcyAmIE1pbnQiIGljb249InBhbGV0dGUiPgogICAgTGV0IHVzZXJzIG1pbnQgTkZUcyB1cG9uIGFjaGlldmVtZW50cyBvciBvbiBjZXJ0YWluIGdhbWUgZXZlbnRzLgogIDwvQ2FyZD4KICAKICA8Q2FyZCB0aXRsZT0iT25jaGFpbiBMZWFkZXJib2FyZHMiIGljb249InRyb3BoeSI+CiAgICBCcmluZyBwbGF5ZXIgcmFua2luZ3Mgb25jaGFpbiwgaG9zdCBjb250ZXN0cyAmIHRvdXJuYW1lbnRzLgogIDwvQ2FyZD4KICAKICA8Q2FyZCB0aXRsZT0iSXNzdWUgVG9rZW5zICYgTkZUcyIgaWNvbj0iY29pbnMiPgogICAgU2VuZCBFUkMyMHMgYW5kIEVSQzcyMSAmIDExNTUgTkZUcyBiYXNlZCBvbiBnYW1lIGFjdGlvbnMuCiAgPC9DYXJkPgogIAogIDxDYXJkIHRpdGxlPSJQYXkgd2l0aCBUb2tlbnMiIGljb249ImNyZWRpdC1jYXJkIj4KICAgIFByb21wdCB1c2VycyB0byBzZW5kIG9yIHRyYW5zZmVyIHRva2VucyB0byBwYXkgZm9yIGluLWdhbWUgYWN0aW9ucyBvciBhc3NldHMuCiAgPC9DYXJkPgo8L0NhcmRHcm91cD4KCiMjIyBDb21pbmcgU29vbgoKPENhcmRHcm91cCBjb2xzPXsyfT4KICA8Q2FyZCB0aXRsZT0iU3dhcCAmIFRyYWRlIiBpY29uPSJhcnJvd3Mtcm90YXRlIj4KICAgIFVzZXJzIGNhbiB1c2UgYXNzZXRzIGZyb20gb3RoZXIgY2hhaW5zIHRvIHN3YXAgZm9yIHlvdXIgdG9rZW5zLgogICAgPGRpdiBzdHlsZT17eyBtYXJnaW5Ub3A6ICc4cHgnIH19PgogICAgICA8c3BhbiBzdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6ICcjZjU5ZTBiJywgY29sb3I6ICd3aGl0ZScsIHBhZGRpbmc6ICcycHggNnB4JywgYm9yZGVyUmFkaXVzOiAnMTJweCcsIGZvbnRTaXplOiAnMTBweCcsIGZvbnRXZWlnaHQ6ICdib2xkJyB9fT5DT01JTkcgU09PTjwvc3Bhbj4KICAgIDwvZGl2PgogIDwvQ2FyZD4KICAKICA8Q2FyZCB0aXRsZT0iQ3JlZGl0IENhcmQgT25yYW1wIiBpY29uPSJjcmVkaXQtY2FyZCI+CiAgICBEaXJlY3QgZmlhdCB0byBjcnlwdG8gb25yYW1wIGZvciBzZWFtbGVzcyB1c2VyIGV4cGVyaWVuY2UuCiAgICA8ZGl2IHN0eWxlPXt7IG1hcmdpblRvcDogJzhweCcgfX0+CiAgICAgIDxzcGFuIHN0eWxlPXt7IGJhY2tncm91bmRDb2xvcjogJyNmNTllMGInLCBjb2xvcjogJ3doaXRlJywgcGFkZGluZzogJzJweCA2cHgnLCBib3JkZXJSYWRpdXM6ICcxMnB4JywgZm9udFNpemU6ICcxMHB4JywgZm9udFdlaWdodDogJ2JvbGQnIH19PkNPTUlORyBTT09OPC9zcGFuPgogICAgPC9kaXY+CiAgPC9DYXJkPgogIAogIDxDYXJkIHRpdGxlPSJDb2xsZWN0IFJldmlld3MiIGljb249InN0YXIiPgogICAgQnVpbHQtaW4gcmV2aWV3IGFuZCByYXRpbmcgc3lzdGVtIGZvciBnYW1lcy4KICAgIDxkaXYgc3R5bGU9e3sgbWFyZ2luVG9wOiAnOHB4JyB9fT4KICAgICAgPHNwYW4gc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAnI2Y1OWUwYicsIGNvbG9yOiAnd2hpdGUnLCBwYWRkaW5nOiAnMnB4IDZweCcsIGJvcmRlclJhZGl1czogJzEycHgnLCBmb250U2l6ZTogJzEwcHgnLCBmb250V2VpZ2h0OiAnYm9sZCcgfX0+Q09NSU5HIFNPT048L3NwYW4+CiAgICA8L2Rpdj4KICA8L0NhcmQ+CiAgCiAgPENhcmQgdGl0bGU9IlNoYXJlIHlvdXIgR2FtZSIgaWNvbj0ic2hhcmUiPgogICAgU29jaWFsIHNoYXJpbmcgYW5kIHZpcmFsIG1lY2hhbmljcy4KICAgIDxkaXYgc3R5bGU9e3sgbWFyZ2luVG9wOiAnOHB4JyB9fT4KICAgICAgPHNwYW4gc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAnI2Y1OWUwYicsIGNvbG9yOiAnd2hpdGUnLCBwYWRkaW5nOiAnMnB4IDZweCcsIGJvcmRlclJhZGl1czogJzEycHgnLCBmb250U2l6ZTogJzEwcHgnLCBmb250V2VpZ2h0OiAnYm9sZCcgfX0+Q09NSU5HIFNPT048L3NwYW4+CiAgICA8L2Rpdj4KICA8L0NhcmQ+CiAgCiAgPENhcmQgdGl0bGU9IlJlY29yZCBHYW1lcGxheSIgaWNvbj0idmlkZW8iPgogICAgQXV0b21hdGljIGdhbWVwbGF5IHJlY29yZGluZyBhbmQgc2hhcmluZy4KICAgIDxkaXYgc3R5bGU9e3sgbWFyZ2luVG9wOiAnOHB4JyB9fT4KICAgICAgPHNwYW4gc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAnI2Y1OWUwYicsIGNvbG9yOiAnd2hpdGUnLCBwYWRkaW5nOiAnMnB4IDZweCcsIGJvcmRlclJhZGl1czogJzEycHgnLCBmb250U2l6ZTogJzEwcHgnLCBmb250V2VpZ2h0OiAnYm9sZCcgfX0+Q09NSU5HIFNPT048L3NwYW4+CiAgICA8L2Rpdj4KICA8L0NhcmQ+CiAgCiAgPENhcmQgdGl0bGU9Ikxpc3QgTkZUcyIgaWNvbj0ic3RvcmUiPgogICAgTWFya2V0cGxhY2UgaW50ZWdyYXRpb24gZm9yIHRyYWRpbmcgZ2FtZSBhc3NldHMuCiAgICA8ZGl2IHN0eWxlPXt7IG1hcmdpblRvcDogJzhweCcgfX0+CiAgICAgIDxzcGFuIHN0eWxlPXt7IGJhY2tncm91bmRDb2xvcjogJyNmNTllMGInLCBjb2xvcjogJ3doaXRlJywgcGFkZGluZzogJzJweCA2cHgnLCBib3JkZXJSYWRpdXM6ICcxMnB4JywgZm9udFNpemU6ICcxMHB4JywgZm9udFdlaWdodDogJ2JvbGQnIH19PkNPTUlORyBTT09OPC9zcGFuPgogICAgPC9kaXY+CiAgPC9DYXJkPgo8L0NhcmRHcm91cD4KCjxOb3RlPgpBbmQgbW9yZSBhY3Rpb25zIGNvbWluZyAtIHRoZSBmdXR1cmUgbG9va3MgYnJpZ2h0IQo8L05vdGU+CgojIyBHZXR0aW5nIFN0YXJ0ZWQKCldlJ2QgbG92ZSB0byBoYXZlIHlvdXIgZ2FtZSBvbiBiYXNlbWVudC5mdW4hIEl0J3Mgc2ltcGxlLCBmcmVlLCBhbmQgZWFzeSB0byBzdGFydCBpbnRlZ3JhdGluZy4KCjxUYWJzPgo8VGFiIHRpdGxlPSJHYW1lIERldmVsb3BlcnMiPgogIDxDYXJkR3JvdXAgY29scz17MX0+CiAgICA8Q2FyZCB0aXRsZT0iUmVnaXN0ZXIgYXMgYSBEZXZlbG9wZXIiIGljb249InVzZXItcGx1cyIgaHJlZj0iaHR0cHM6Ly9iYXNlbWVudC5mdW4vZGV2ZWxvcGVyL3NpZ251cCIgY3RhPSJSZWdpc3RlciBOb3ciIGhvcml6b250YWw+CiAgICAgIFNpZ24gdXAgdG8gc3RhcnQgaW50ZWdyYXRpbmcgeW91ciBnYW1lIHdpdGggQlNNTlQgbGF1bmNoZXIKICAgIDwvQ2FyZD4KICA8L0NhcmRHcm91cD4KICAKICA8ZGl2IHN0eWxlPXt7IG1hcmdpblRvcDogJzE2cHgnIH19PgogICAgPHN0cm9uZz5BbHJlYWR5IHJlZ2lzdGVyZWQ/PC9zdHJvbmc+CiAgPC9kaXY+CiAgCiAgPENhcmRHcm91cCBjb2xzPXsyfT4KICAgIDxDYXJkIHRpdGxlPSJHYW1lIExhdW5jaGVyIFBsYXlncm91bmQiIGljb249InBsYXkiIGhyZWY9Imh0dHBzOi8vYmFzZW1lbnQuZnVuL3BsYXlncm91bmQiPgogICAgICBUZXN0IHlvdXIgaW50ZWdyYXRpb24gaW4gYSBzYW5kYm94IGVudmlyb25tZW50CiAgICA8L0NhcmQ+CiAgICAKICAgIDxDYXJkIHRpdGxlPSJCU01OVCBBUEkgRG9jcyIgaWNvbj0iYm9vayIgaHJlZj0iaHR0cHM6Ly9kb2NzLmJhc2VtZW50LmZ1bi9hcGkiPgogICAgICBDb21wbGV0ZSBBUEkgZG9jdW1lbnRhdGlvbiBhbmQgZXhhbXBsZXMKICAgIDwvQ2FyZD4KICA8L0NhcmRHcm91cD4KPC9UYWI+Cgo8VGFiIHRpdGxlPSJQbGF5ZXJzIj4KICA8Q2FyZCB0aXRsZT0iU2VlIEJTTU5UIExhdW5jaGVyIGluIEFjdGlvbiIgaWNvbj0iZ2FtZXBhZC0yIiBocmVmPSJodHRwczovL2Jhc2VtZW50LmZ1bi9nYW1lcyIgY3RhPSJQbGF5IEdhbWVzIiBob3Jpem9udGFsPgogICAgTm8gdmFwb3J3YXJlIGhlcmUgLSBwbGF5IEdhbWVzIG9uIEJTTU5UIHRvZGF5IQogIDwvQ2FyZD4KICAKICA8Tm90ZT4KICBObyB2YXBvcndhcmUgLSBwbGF5IHRvZGF5IQogIDwvTm90ZT4KPC9UYWI+CjwvVGFicz4KCiMjIFdoYXQgaXMgQmFzZW1lbnQuZnVuPwoKQmFzZW1lbnQgaXMgdGhlIHBsYWNlIHRvIGRpc2NvdmVyICYgcGxheSBvbmNoYWluIGdhbWVzLiBBc2lkZSBmcm9tIGJlaW5nIGEgZGlzY292ZXJ5IHBsYXRmb3JtIGZvciBmaW5kaW5nIGdyZWF0IG9uY2hhaW4gZ2FtZXMsIEJhc2VtZW50IG9mZmVycyBhIHdheSBmb3IgZ2FtZSBkZXZlbG9wZXJzIHRvIGJ1aWxkIHNlYW1sZXNzLCBuYXRpdmUsIGFuZCBlbWJlZGRlZCBleHBlcmllbmNlcyB3aXRoaW4gQmFzZW1lbnQuCgpZb3VyIGdhbWUgaXMgbG9hZGVkIGluc2lkZSBvdXIgZ2FtZSBsYXVuY2hlciwgd2hlcmUgdXNlcnMgY29ubmVjdCB0byBCYXNlbWVudCwgYW5kIHRoZWlyIHBsYXllciBjb250ZXh0IGlzIHBhc3NlZCBkb3duIHRvIHlvdXIgZ2FtZS4KCkZyb20gdGhlcmUsIHlvdSBjYW4gbGV2ZXJhZ2UgYW55IG9mIG91ciBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgKHN1Y2ggYXMgc2F2aW5nIHN0YXRlICYgc2NvcmVzKSArIHRyaWdnZXIgYW55IG51bWJlciBvZiBidWlsdC1pbiBjcnlwdG8gVVggKHdpdGhvdXQgeW91IGhhdmluZyB0byBpbnRlZ3JhdGUgYW55dGhpbmcgb25jaGFpbiBpbiB5b3VyIGdhbWUpLgoKIyMgQWNjZXNzIFBsYXllciBEYXRhCgpUaGUgZ2FtZSBsYXVuY2hlciB1c2VzIGEgSldUIChKU09OIFdlYiBUb2tlbikgdG8gc2VjdXJlbHkgZW5jb2RlIGEgdmVyaWZpZWQgJiBhdXRoZW50aWNhdGVkIHBsYXllciBjb250ZXh0LCB3aGljaCBpcyBzZW50IHRvIHlvdXIgZ2FtZS4KClRoZSBwYXlsb2FkIGlzIHJlYWQgZnJvbSB0aGUgR0VUIHBhcmFtZXRlcnMsIHNvIGFueSBob3N0ZWQgd2ViIGdhbWUgY2FuIGVhc2lseSBhY2Nlc3MgJiBkZWNvZGUgaXQgdXNpbmcgYW55IG51bWJlciBvZiBKV1QgbGlicmFyaWVzIChvciB1c2luZyBvdXIgbGF1bmNoZXIgQVBJcykuCgojIyMgQmFzaWMgUGxheWVyIERhdGEgSW5jbHVkZXM6Cgo8QWNjb3JkaW9uR3JvdXA+CjxBY2NvcmRpb24gdGl0bGU9IlVzZXJuYW1lIGFuZCBFTlMiPgogIFVzZXJuYW1lIChhbmQgY29tcGF0aWJsZSAuYjMuZnVuIEVOUyByZXNvbHZhYmxlIGFkZHJlc3MpCjwvQWNjb3JkaW9uPgoKPEFjY29yZGlvbiB0aXRsZT0iM0QgQXZhdGFyIj4KICAzRCBBdmF0YXIgKC5HTEIgbW9kZWwgcG93ZXJlZCBieSBSZWFkeVBsYXllck1lKQo8L0FjY29yZGlvbj4KCjxBY2NvcmRpb24gdGl0bGU9IldhbGxldCBBZGRyZXNzIj4KICBWZXJpZmllZCB3YWxsZXQgYWRkcmVzcyBmb3Igb25jaGFpbiBpbnRlcmFjdGlvbnMKPC9BY2NvcmRpb24+Cgo8QWNjb3JkaW9uIHRpdGxlPSJBZGRpdGlvbmFsIERhdGEiPgogIEdhbWUtc3BlY2lmaWMgcGxheWVyIGRhdGEsIHNlc3Npb24gaW5mb3JtYXRpb24sIGFuZCBtb3JlIC0gc2VlIG91ciBMYXVuY2hlciBBUEkgRG9jcwo8L0FjY29yZGlvbj4KPC9BY2NvcmRpb25Hcm91cD4KCjxUaXA+CllvdSBjYW4gb3B0aW9uYWxseSBzdG9yZSBhbnkgYXJiaXRyYXJ5IGdhbWUtc3BlY2lmaWMgcGxheWVyIGRhdGEgdXNpbmcgb3VyIHBsYXllciBzdGF0ZSBBUElzLgo8L1RpcD4KCjxDYXJkIHRpdGxlPSJFeHBsb3JlIExhdW5jaGVyIEFQSXMiIGljb249ImNvZGUiIGhyZWY9Imh0dHBzOi8vZG9jcy5iYXNlbWVudC5mdW4vYXBpIiBjdGE9IlZpZXcgRG9jcyIgaG9yaXpvbnRhbD4KICBDb21wbGV0ZSBkb2N1bWVudGF0aW9uIGZvciBwbGF5ZXIgZGF0YSBhY2Nlc3MgYW5kIGdhbWUgaW50ZWdyYXRpb24KPC9DYXJkPgoKIyMgQnVpbHQtaW4gVVggQWJzdHJhY3Rpb24KCk91ciBtaW5pbWFsIGdhbWUgbGF1bmNoZXIgZXhwZXJpZW5jZSBtZWFucyB0aGF0IHRoZSBmb2N1cyBzdGF5cyBvbiB5b3VyIGdhbWUuCgpBIG51bWJlciBvZiBjdXN0b21pemF0aW9ucyBhcmUgYXZhaWxhYmxlIG9uIHRoZSBnYW1lIGxhdW5jaGVyLCBzbyB0aGF0IEJTTU5UIGNhbiBwcm92aWRlIGFuIGFsbW9zdCBpbnZpc2libGUgZXhwZXJpZW5jZSwgaGFuZGxpbmcgYWxsIG9mIHRoZSBjb3JlIGNyeXB0byBVWCBjaGFsbGVuZ2VzIGZvciB5b3UuCgojIyMgSGVscGZ1bCBBUElzIEF2YWlsYWJsZToKCi0gKipTdG9yZSAmIHJldHJpZXZlIHNjb3JlcyAmIGxlYWRlcmJvYXJkcyoqIC0gUGVyc2lzdGVudCBnYW1lIHN0YXRlIG1hbmFnZW1lbnQKLSAqKlNlbmQgbm90aWZpY2F0aW9ucyoqIC0gQWxlcnQgcGxheWVycyBhYm91dCBnYW1lIGV2ZW50cwotICoqTG9nIGFuZCBzdHJlYW0gZ2FtZSBhY3Rpdml0eSoqIC0gQW5hbHl0aWNzIGFuZCBwbGF5ZXIgYmVoYXZpb3IgdHJhY2tpbmcgIAotICoqU3RvcmUgcGxheWVyIHN0YXRlIGFuZCBnYW1lIHNlc3Npb25zKiogLSBTYXZlIGdhbWUgcHJvZ3Jlc3MgYXV0b21hdGljYWxseQotICoqQW5kIG1vcmUgY29taW5nISoqIC0gTmV3IGZlYXR1cmVzIGFkZGVkIHJlZ3VsYXJseQoKPENhcmQgdGl0bGU9IkV4cGxvcmUgTGF1bmNoZXIgQVBJcyIgaWNvbj0iYXBpIiBocmVmPSJodHRwczovL2RvY3MuYmFzZW1lbnQuZnVuL2FwaSIgY3RhPSJWaWV3IERvY3VtZW50YXRpb24iIGhvcml6b250YWw+CiAgQ29tcGxldGUgQVBJIHJlZmVyZW5jZSBmb3IgYWxsIGF2YWlsYWJsZSBsYXVuY2hlciBmZWF0dXJlcwo8L0NhcmQ+CgojIyBBcmNoaXRlY3R1cmUgT3ZlcnZpZXcKCjxGcmFtZSBjYXB0aW9uPSJHYW1lIExhdW5jaGVyIEludGVncmF0aW9uIEZsb3ciPgogIDxkaXYgc3R5bGU9e3sgCiAgICBwYWRkaW5nOiAnMjBweCcsIAogICAgYmFja2dyb3VuZENvbG9yOiAnI2Y4ZmFmYycsIAogICAgYm9yZGVyOiAnMXB4IHNvbGlkICNlMmU4ZjAnLCAKICAgIGJvcmRlclJhZGl1czogJzhweCcsCiAgICB0ZXh0QWxpZ246ICdjZW50ZXInLAogICAgZm9udEZhbWlseTogJ21vbm9zcGFjZScKICB9fT4KICAgIDxkaXYgc3R5bGU9e3sgbWFyZ2luQm90dG9tOiAnMTBweCcsIGNvbG9yOiAnIzY0NzQ4YicgfX0+Q29ubmVjdGVkOiAweC4uMTIzPC9kaXY+CiAgICA8ZGl2IHN0eWxlPXt7IG1hcmdpbkJvdHRvbTogJzEwcHgnLCBiYWNrZ3JvdW5kQ29sb3I6ICcjMDA3QUZGJywgY29sb3I6ICd3aGl0ZScsIHBhZGRpbmc6ICc4cHgnLCBib3JkZXJSYWRpdXM6ICc0cHgnIH19PgogICAgICB3d3cueW91cmdhbWUuY29tCiAgICA8L2Rpdj4KICAgIDxkaXYgc3R5bGU9e3sgZm9udFNpemU6ICcxNHB4JywgY29sb3I6ICcjNDc1NTY5JyB9fT4KICAgICAgWW91ciBnYW1lIGxvYWRzIGluc2lkZSBCU01OVCBsYXVuY2hlcgogICAgPC9kaXY+CiAgPC9kaXY+CjwvRnJhbWU+Cg==",
    "lastUpdated": "2025-10-31T02:33:43.529Z"
  },
  {
    "sourceFile": "basement/construct-guide.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-09-03T03:11:07.517Z"
  },
  {
    "sourceFile": "basement/brand-kit.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-09-03T04:55:14.892Z"
  },
  {
    "sourceFile": "b3ar/introduction.mdx",
    "sourceHash": "CiMjIFdoYXQgaXMgQjNBUj8KCk1vcmUgZG9jdW1lbnRhdGlvbiBpcyBjb21pbmcgc29vbi4K",
    "lastUpdated": "2025-09-03T03:12:08.315Z"
  },
  {
    "sourceFile": "anyspend/onramp.mdx",
    "sourceHash": "CiMjIFdoYXQgSXQgRG9lcwoKVGhlIEFueVNwZW5kIG9ucmFtcCBhbGxvd3MgdXNlcnMgdG8gcGF5IHdpdGggdHJhZGl0aW9uYWwgZmlhdCBtZXRob2RzIChlLmcuLCBjcmVkaXQgY2FyZCwgYmFuayB0cmFuc2ZlcikgYW5kIGF1dG9tYXRpY2FsbHkgZXhlY3V0ZSBhbnkgb25jaGFpbiB0cmFuc2FjdGlvbi4gVGhpcyBzZWFtbGVzcyBmbG93IGVsaW1pbmF0ZXMgdGhlIG5lZWQgZm9yIHVzZXJzIHRvIG1hbnVhbGx5IGFjcXVpcmUgY3J5cHRvY3VycmVuY3kgb3IgbWFuYWdlIHdhbGxldCBmdW5kaW5nLgoKSXTigJlzIGRlc2lnbmVkIHRvIHJlZHVjZSBmcmljdGlvbiBmb3Igbm9uLWNyeXB0by1uYXRpdmUgdXNlcnMsIG1ha2luZyBibG9ja2NoYWluLXBvd2VyZWQgcHJvZHVjdHMgYWNjZXNzaWJsZSB0byBhIGJyb2FkZXIgYXVkaWVuY2UuCgojIyBIb3cgSXQgV29ya3MKCjEuICoqVXNlciBJbml0aWF0ZXMgQWN0aW9uKipcCiAgIEEgdXNlciBiZWdpbnMgYW4gb25jaGFpbiBhY3Rpb24gKGUuZy4sIG1pbnRpbmcsIHN0YWtpbmcsIG9yIGNvbnRyYWN0IGludGVyYWN0aW9uKS4KMi4gKipGaWF0IFBheW1lbnQqKlwKICAgVGhleSBwYXkgd2l0aCBhIGNhcmQgb3IgYmFuayB0cmFuc2ZlciB2aWEgU3RyaXBlIG9yIENvaW5iYXNlIFBheS4KMy4gKipDb252ZXJzaW9uIFwrIEV4ZWN1dGlvbioqXAogICBBbnlTcGVuZCBjb252ZXJ0cyBmaWF0IHRvIHRoZSBkZXNpcmVkIGNyeXB0b2N1cnJlbmN5IGFuZCBleGVjdXRlcyB0aGUgdHJhbnNhY3Rpb24uCjQuICoqV2FsbGV0IERlbGl2ZXJ5KipcCiAgIFRoZSByZXN1bHQgaXMgc2VudCB0byB0aGUgdXNlcidzIGNvbm5lY3RlZCB3YWxsZXQgb3IgZ2xvYmFsIHdhbGxldC4gTm8gY3J5cHRvIGFjcXVpc2l0aW9uIHJlcXVpcmVkLgoKIyMgUGF5bWVudCBPcHRpb25zCgoqKlN0cmlwZSoqCgotIEdsb2JhbCBzdXBwb3J0IGZvciBtYWpvciBjcmVkaXQvZGViaXQgY2FyZHMKLSAzRCBTZWN1cmUgYXV0aGVudGljYXRpb24KLSBDdXJyZW5jeSBjb252ZXJzaW9uIGZvciBub24tVVNEIHRyYW5zYWN0aW9ucwotIExvY2FsaXplZCBwYXltZW50IG1ldGhvZHMgYW5kIGZlZSBhZGp1c3RtZW50CgoqKkNvaW5iYXNlIFBheSoqCgotIFVzZXJzIGNhbiBwYXkgZGlyZWN0bHkgd2l0aCB0aGVpciBDb2luYmFzZSBhY2NvdW50IGJhbGFuY2VzIG9yIGRlYml0IGNhcmQKLSBObyBuZWVkIHRvIHRyYW5zZmVyIGZ1bmRzIGJldHdlZW4gcGxhdGZvcm1zCi0gVHJ1c3RlZCBVWCBmb3IgZXhpc3RpbmcgQ29pbmJhc2UgdXNlcnMKLSBObyBhZGRpdGlvbmFsIGZlZXMgZnJvbSBBbnlTcGVuZAoKKipFeHRlbnNpYmxlIFByb3ZpZGVyIEFyY2hpdGVjdHVyZSoqCgotIE1vZHVsYXIgc3lzdGVtIHRvIHN1cHBvcnQgYWRkaXRpb25hbCBmaWF0IHByb3ZpZGVycwotIER5bmFtaWMgcm91dGluZyBiYXNlZCBvbiByZWdpb24gYW5kIGF2YWlsYWJpbGl0eQotIEJ1aWx0LWluIGNvbXBsaWFuY2UgZmxleGliaWxpdHkgZm9yIHJlZ2lvbmFsIHN1cHBvcnQKCiMjIFNlY3VyaXR5CgpBbnlTcGVuZCBpbmNsdWRlcyBhIGJ1aWx0LWluLCByZWFsLXRpbWUgcmlzayBlbmdpbmUgZGVzaWduZWQgdG8gbWluaW1pemUgZnJhdWQgd2hpbGUga2VlcGluZyB0aGUgdXNlciBleHBlcmllbmNlIHNlYW1sZXNzLgoKKipLZXkgRmVhdHVyZXM6KioKCi0gQmVoYXZpb3JhbCBhbmQgdHJhbnNhY3Rpb25hbCByaXNrIGFuYWx5c2lzCi0gRGV2aWNlIGFuZCBuZXR3b3JrIHNlY3VyaXR5IGNoZWNrcwotIFJlYWwtdGltZSB0aHJlYXQgaW50ZWxsaWdlbmNlCgoqKlNtYXJ0IFRyYW5zYWN0aW9uIEV2YWx1YXRpb24qKgoKRWFjaCB0cmFuc2FjdGlvbiBpcyBldmFsdWF0ZWQgaW4gcmVhbCB0aW1lOgoKLSAqKkFsbG93KirCoOKAkyB0cmFuc2FjdGlvbiBwcm9jZWVkcyBub3JtYWxseQotICoqVmVyaWZ5KirCoOKAkyBhZGRpdGlvbmFsIHVzZXIgdmVyaWZpY2F0aW9uIG1heSBiZSByZXF1aXJlZAotICoqQmxvY2sqKsKg4oCTIHN1c3BpY2lvdXMgYWN0aXZpdHkgaXMgcHJldmVudGVkCgojIyBHbG9iYWwgQ292ZXJhZ2UKCkFueVNwZW5kIHN1cHBvcnRzIGEgd2lkZSByYW5nZSBvZiBjdXJyZW5jaWVzIGFuZCByZWdpb25zIHRocm91Z2ggaW50ZWdyYXRlZCBwcm92aWRlcnM6CgotIEF1dG9tYXRpYyBsb2NhdGlvbiBkZXRlY3Rpb24gYW5kIGxvY2FsaXphdGlvbgotIExvY2FsIHBheW1lbnQgbWV0aG9kcyBhbmQgY3VycmVuY3kgaGFuZGxpbmcKLSBEeW5hbWljIHByb3ZpZGVyIHNlbGVjdGlvbiBiYXNlZCBvbiBnZW9ncmFwaHkKLSBSZWdpb25hbCBjb21wbGlhbmNlIG91dCBvZiB0aGUgYm94CgojIyBGZWVzCgotICoqU3RyaXBlIFBheW1lbnRzOioqwqA1LjQlIFwrIFwkMC4zMCBwZXIgdHJhbnNhY3Rpb24gKGZsYXQgcmF0ZSwgZ2xvYmFsKQotICoqQ29pbmJhc2UgUGF5OioqwqBObyBhZGRpdGlvbmFsIGZlZXMgZnJvbSBBbnlTcGVuZAoKVXNlcnMgYXJlIHNob3duIGEgdHJhbnNwYXJlbnQgZmVlIGJyZWFrZG93biBkdXJpbmcgY2hlY2tvdXQuCgojIyBDb21tb24gVXNlIENhc2VzCgpBbnlTcGVuZCBlbmFibGVzIGRldmVsb3BlcnMgdG86CgotIExldCB1c2VycyBtaW50IE5GVHMgd2l0aCBhIGNyZWRpdCBjYXJkCi0gQWxsb3cgc3Rha2luZywgdm90aW5nLCBvciBnYW1lIGFjdGlvbnMgZGlyZWN0bHkgZnJvbSBmaWF0Ci0gT25ib2FyZCB1c2VycyB0byBEZUZpLCBnYW1pbmcsIG9yIG90aGVyIGRBcHBzIHdpdGggbm8gY3J5cHRvIHByZXJlcXVpc2l0ZQ==",
    "lastUpdated": "2025-09-03T03:12:40.902Z"
  },
  {
    "sourceFile": "anyspend/introduction.mdx",
    "sourceHash": "CjxpbWcgc3JjPSIvaW1hZ2VzL2FueXNwZW5kLWV4YW1wbGUtYmFubmVyLmpwZyIgYWx0PSJBbnlTcGVuZCBCYW5uZXIiIGNsYXNzTmFtZT0idy1mdWxsIHJvdW5kZWQteGwiIC8+CgojIyBXaGF0IGlzIEFueVNwZW5kPwoKQW55U3BlbmQgaXMgQjMncyBjb21wcmVoZW5zaXZlIHBheW1lbnQgaW5mcmFzdHJ1Y3R1cmUgdGhhdCBlbmFibGVzIHNlYW1sZXNzIGNyeXB0byB0cmFuc2FjdGlvbnMgYWNyb3NzIG11bHRpcGxlIGJsb2NrY2hhaW5zLiBXaGV0aGVyIHlvdSdyZSBidWlsZGluZyBhIERlRmkgYXBwbGljYXRpb24sIE5GVCBtYXJrZXRwbGFjZSwgb3IgZ2FtaW5nIHBsYXRmb3JtLCBBbnlTcGVuZCBwcm92aWRlcyB0aGUgY29tcG9uZW50cyBhbmQgQVBJcyB5b3UgbmVlZCB0byBhY2NlcHQgcGF5bWVudHMgaW4gYW55IHRva2VuLgoKW1RyeSBBbnlTcGVuZCBpbiB5b3VyIGJyb3dzZXJdKGh0dHBzOi8vYW55c3BlbmQuY29tL3N3YXApCgojIyBVc2UgQ2FzZXMKCjxDYXJkR3JvdXAgY29scz17Mn0+CjxDYXJkIGhyZWY9Ii9hbnlzcGVuZC9leGFtcGxlcyI+CiAgPGltZyBzcmM9Ii9pbWFnZXMvY3VzdG9taXplLWZvci1zd2FwLnBuZyIgY2xhc3NOYW1lPSJ3LWZ1bGwgaC00OCBvYmplY3QtY292ZXIgcm91bmRlZC14bCBtYi00IiAvPgogIDxoMyBjbGFzc05hbWU9InRleHQtbGcgZm9udC1zZW1pYm9sZCB0ZXh0LXByaW1hcnkgYmxvY2sgbWItMSI+Q3Jvc3MtQ2hhaW4gU3dhcHM8L2gzPgogIEVuYWJsZSB1c2VycyB0byBzd2FwIHRva2VucyBiZXR3ZWVuIGRpZmZlcmVudCBibG9ja2NoYWlucyB3aXRoIGF1dG9tYXRpYyByb3V0aW5nIGFuZCBiZXN0IHByaWNlIGRpc2NvdmVyeS4KPC9DYXJkPgoKPENhcmQgaHJlZj0iL2FueXNwZW5kL2V4YW1wbGVzIj4KICA8aW1nIHNyYz0iL2ltYWdlcy9jdXN0b21pemUtZm9yLWNoZWNrb3V0LnBuZyIgY2xhc3NOYW1lPSJ3LWZ1bGwgaC00OCBvYmplY3QtY292ZXIgcm91bmRlZC14bCBtYi00IiAvPgogIDxoMyBjbGFzc05hbWU9InRleHQtbGcgZm9udC1zZW1pYm9sZCB0ZXh0LXByaW1hcnkgYmxvY2sgbWItMSI+Q2hlY2tvdXQ8L2gzPgogIE9uZS1jbGljayBjaGVja291dCBidXR0b25zIHRoYXQgYWNjZXB0IGFueSB0b2tlbiBhcyBwYXltZW50LCB3aXRoIGF1dG9tYXRpYyBjb252ZXJzaW9uLgo8L0NhcmQ+Cgo8Q2FyZCBocmVmPSIvYW55c3BlbmQvZXhhbXBsZXMiPgogIDxpbWcgc3JjPSIvaW1hZ2VzL2N1c3RvbWl6ZS1mb3ItZGVmaS5wbmciIGNsYXNzTmFtZT0idy1mdWxsIGgtNDggb2JqZWN0LWNvdmVyIHJvdW5kZWQteGwgbWItNCIgLz4KICA8aDMgY2xhc3NOYW1lPSJ0ZXh0LWxnIGZvbnQtc2VtaWJvbGQgdGV4dC1wcmltYXJ5IGJsb2NrIG1iLTEiPkRlRmk8L2gzPgogIEV4ZWN1dGUgYW55IG9uY2hhaW4gY29udHJhY3QgY2FsbCwgd2l0aCB1c2FnZSBmb3Igc3Rha2luZywgcHJlZGljdGlvbiBtYXJrZXRzLCBib25kaW5nIGN1cnZlcywgYW5kIG1vcmUuCjwvQ2FyZD4KCjxDYXJkIGhyZWY9Ii9hbnlzcGVuZC9leGFtcGxlcyI+CiAgPGltZyBzcmM9Ii9pbWFnZXMvY3VzdG9taXplLWZvci1nYW1lcy5wbmciIGNsYXNzTmFtZT0idy1mdWxsIGgtNDggb2JqZWN0LWNvdmVyIHJvdW5kZWQteGwgbWItNCIgLz4KICA8aDMgY2xhc3NOYW1lPSJ0ZXh0LWxnIGZvbnQtc2VtaWJvbGQgdGV4dC1wcmltYXJ5IGJsb2NrIG1iLTEiPkdhbWVzPC9oMz4KICBFbWJlZGRhYmxlIGluIG5hdGl2ZSBpT1MvQW5kcm9pZCwgVW5pdHksICYgb3RoZXIgc3VyZmFjZXMuCjwvQ2FyZD4KPC9DYXJkR3JvdXA+CgojIyBGZWF0dXJlcwoKPFN0ZXBzPgo8U3RlcCB0aXRsZT0iVXNlciBJbml0aWF0ZXMgUGF5bWVudCI+ClVzZXIgY2xpY2tzIGEgcGF5bWVudCBidXR0b24gb3IgaW50ZXJhY3RzIHdpdGggeW91ciBpbnRlcmZhY2UsIGNob29zaW5nIHRoZWlyIHByZWZlcnJlZCB0b2tlbgo8L1N0ZXA+Cgo8U3RlcCB0aXRsZT0iQW55U3BlbmQgUXVvdGVzIj4KT3VyIHJvdXRpbmcgZW5naW5lIGZpbmRzIHRoZSBiZXN0IHBhdGggdG8gY29udmVydCB0aGVpciB0b2tlbiB0byB0aGUgcmVxdWlyZWQgZGVzdGluYXRpb24gdG9rZW4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IkNyb3NzLUNoYWluIEV4ZWN1dGlvbiI+CklmIG5lZWRlZCwgdG9rZW5zIGFyZSBicmlkZ2VkIGFjcm9zcyBjaGFpbnMgdXNpbmcgc2VjdXJlLCBiYXR0bGUtdGVzdGVkIGluZnJhc3RydWN0dXJlCjwvU3RlcD4KCjxTdGVwIHRpdGxlPSJGaW5hbCBEZWxpdmVyeSI+ClRva2VucyBhcnJpdmUgYXQgdGhlIGRlc3RpbmF0aW9uIGFkZHJlc3MsIGV4ZWN1dGUgYW55IGN1c3RvbSBsb2dpYywgYW5kIHRyaWdnZXIgeW91ciBzdWNjZXNzIGNhbGxiYWNrcwo8L1N0ZXA+CjwvU3RlcHM+CgojIyBVc2UgQ2FzZXMKPGltZyBzcmM9Ii9pbWFnZXMvYW55c3BlbmQtb25yYW1wLWFueW9uZS5wbmciIGFsdD0iQW55U3BlbmQgQmFubmVyIiBjbGFzc05hbWU9InctZnVsbCByb3VuZGVkLXhsIiAvPgoKPEFjY29yZGlvbkdyb3VwPgo8QWNjb3JkaW9uIHRpdGxlPSJEZUZpIEFwcGxpY2F0aW9ucyI+CkVuYWJsZSB0b2tlbiBzd2FwcywgcHJvdmlkZSBsaXF1aWRpdHksIGFuZCBmYWNpbGl0YXRlIHlpZWxkIGZhcm1pbmcgYWNyb3NzIG11bHRpcGxlIGNoYWlucyB3aXRoIGF1dG9tYXRpYyByb3V0aW5nIGFuZCBjb21wZXRpdGl2ZSByYXRlcy4KPC9BY2NvcmRpb24+Cgo8QWNjb3JkaW9uIHRpdGxlPSJORlQgTWFya2V0cGxhY2VzIj4KQWxsb3cgdXNlcnMgdG8gYnV5IE5GVHMgd2l0aCBhbnkgdG9rZW4gdGhleSBvd24sIHJlbW92aW5nIGJhcnJpZXJzIGFuZCBpbmNyZWFzaW5nIGNvbnZlcnNpb24gcmF0ZXMgYnkgc3VwcG9ydGluZyB0aGVpciBwcmVmZXJyZWQgcGF5bWVudCBtZXRob2RzLgo8L0FjY29yZGlvbj4KCjxBY2NvcmRpb24gdGl0bGU9IkdhbWluZyBQbGF0Zm9ybXMiPgpBY2NlcHQgcGF5bWVudHMgZm9yIGluLWdhbWUgYXNzZXRzLCB0b3VybmFtZW50IGVudHJpZXMsIGFuZCBwcmVtaXVtIGZlYXR1cmVzIHVzaW5nIGFueSBjcnlwdG9jdXJyZW5jeSBvciBmaWF0IHBheW1lbnQgbWV0aG9kcy4KPC9BY2NvcmRpb24+Cgo8QWNjb3JkaW9uIHRpdGxlPSJFLWNvbW1lcmNlIj4KSW50ZWdyYXRlIGNyeXB0byBwYXltZW50cyBpbnRvIHRyYWRpdGlvbmFsIGUtY29tbWVyY2UgcGxhdGZvcm1zIHdpdGggYXV0b21hdGljIGZpYXQgY29udmVyc2lvbiBhbmQgc2V0dGxlbWVudC4KPC9BY2NvcmRpb24+Cgo8QWNjb3JkaW9uIHRpdGxlPSJTdWJzY3JpcHRpb24gU2VydmljZXMiPgpBY2NlcHQgcmVjdXJyaW5nIHBheW1lbnRzIGluIGNyeXB0byB3aXRoIGF1dG9tYXRpYyBjb252ZXJzaW9uIHRvIHlvdXIgcHJlZmVycmVkIHNldHRsZW1lbnQgY3VycmVuY3kuCjwvQWNjb3JkaW9uPgo8L0FjY29yZGlvbkdyb3VwPgoKIyMgUXVpY2sgU3RhcnQKCkdldCBzdGFydGVkIHdpdGggQW55U3BlbmQgaW4ganVzdCBhIGZldyBzdGVwczoKCmBgYHRzeAppbXBvcnQgeyBBbnlTcGVuZCwgQW55c3BlbmRQcm92aWRlciB9IGZyb20gIkBiM2RvdGZ1bi9zZGsvYW55c3BlbmQvcmVhY3QiOwppbXBvcnQgeyBCM1Byb3ZpZGVyIH0gZnJvbSAiQGIzZG90ZnVuL3Nkay9nbG9iYWwtYWNjb3VudC9yZWFjdCI7CgppbXBvcnQgIkBiM2RvdGZ1bi9zZGsvaW5kZXguY3NzIjsKCmZ1bmN0aW9uIEFwcCgpIHsKICByZXR1cm4gKAogICAgPEIzUHJvdmlkZXIgdGhlbWU9ImxpZ2h0IiBlbnZpcm9ubWVudD0icHJvZHVjdGlvbiIgcGFydG5lcklkPSJ5b3VyLWF3ZXNvbWUtcGFydG5lci1pZCI+CiAgICAgIDxBbnlzcGVuZFByb3ZpZGVyPgogICAgICAgIDxBbnlTcGVuZCAvPgogICAgICA8L0FueXNwZW5kUHJvdmlkZXI+CiAgICA8L0IzUHJvdmlkZXI+CiAgKTsKfQoKZXhwb3J0IGRlZmF1bHQgQXBwCmBgYAoKIyMgV2hhdCdzIE5leHQ/Cgo8Q2FyZEdyb3VwIGNvbHM9ezN9Pgo8Q2FyZCB0aXRsZT0iSW5zdGFsbGF0aW9uIiBpY29uPSJkb3dubG9hZCIgaHJlZj0iL2FueXNwZW5kL2luc3RhbGxhdGlvbiI+CiAgU2V0IHVwIEFueVNwZW5kIGluIHlvdXIgcHJvamVjdCB3aXRoIG5wbSwgeWFybiwgb3IgcG5wbQo8L0NhcmQ+Cgo8Q2FyZCB0aXRsZT0iQ29tcG9uZW50cyIgaWNvbj0icHV6emxlLXBpZWNlIiBocmVmPSIvYW55c3BlbmQvY29tcG9uZW50cyI+CiAgRXhwbG9yZSBwcmUtYnVpbHQgY29tcG9uZW50cyBmb3IgY29tbW9uIHBheW1lbnQgc2NlbmFyaW9zCjwvQ2FyZD4KCjxDYXJkIHRpdGxlPSJFeGFtcGxlcyIgaWNvbj0iY29kZSIgaHJlZj0iL2FueXNwZW5kL2V4YW1wbGVzIj4KICBTZWUgcmVhbC13b3JsZCBpbXBsZW1lbnRhdGlvbiBleGFtcGxlcyBhbmQgYmVzdCBwcmFjdGljZXMKPC9DYXJkPgo8L0NhcmRHcm91cD4KCiMjIEdldHRpbmcgSGVscAoKLSAqKkRpc2NvcmQqKjogSm9pbiBvdXIgW0Rpc2NvcmQgY29tbXVuaXR5XShodHRwczovL2Rpc2NvcmQuZ2cvYjNkb3RmdW4pIGZvciBzdXBwb3J0Ci0gKipEb2N1bWVudGF0aW9uKio6IENvbXByZWhlbnNpdmUgZ3VpZGVzIGFuZCBBUEkgcmVmZXJlbmNlcwotICoqRXhhbXBsZXMqKjogUmVhZHktdG8tdXNlIGNvZGUgc2FtcGxlcyBhbmQgaW50ZWdyYXRpb25zCgo8ZGl2IGNsYXNzTmFtZT0iZmxleCBmbGV4LXJvdyBnYXAtNCI+CjxkaXYgY2xhc3NOYW1lPSJmbGV4LTEiPgo8YSBocmVmPSJodHRwczovL3guY29tL2FueXNwZW5kIiB0YXJnZXQ9Il9ibGFuayI+CiAgPGltZyBzcmM9Ii9pbWFnZXMvZm9sbG93LXVwZGF0ZXMtb24teC5wbmciIGNsYXNzTmFtZT0idy1mdWxsIGgtZnVsbCBvYmplY3QtY292ZXIgcm91bmRlZC14bCBtYi00IiAvPgo8L2E+CjwvZGl2PgoKPGRpdiBjbGFzc05hbWU9ImZsZXgtMSI+CiAgPGEgaHJlZj0iL2FueXNwZW5kL2luc3RhbGxhdGlvbiI+CiAgICA8aW1nIHNyYz0iL2ltYWdlcy9hbnlzcGVuZC1nZXR0aW5nLXN0YXJ0ZWQucG5nIiBjbGFzc05hbWU9InctZnVsbCBoLWZ1bGwgb2JqZWN0LWNvdmVyIHJvdW5kZWQteGwgbWItNCIgLz4KICA8L2E+CjwvZGl2Pgo8L2Rpdj4K",
    "lastUpdated": "2025-10-31T02:43:52.767Z"
  },
  {
    "sourceFile": "anyspend/installation.mdx",
    "sourceHash": "CjxpZnJhbWUgY2xhc3M9InctZnVsbCBhc3BlY3QtdmlkZW8gcm91bmRlZC14bCBtYi02IiBzcmM9Imh0dHBzOi8vY3VzdG9tZXItZ2c2cXM3bm01dWU5NHQ2NC5jbG91ZGZsYXJlc3RyZWFtLmNvbS81YjkwYWRiZTUzNzJhMTVmNDc3NmJkNzk2Nzc2YWEyZi9pZnJhbWU/cG9zdGVyPWh0dHBzJTNBJTJGJTJGY3VzdG9tZXItZ2c2cXM3bm01dWU5NHQ2NC5jbG91ZGZsYXJlc3RyZWFtLmNvbSUyRjViOTBhZGJlNTM3MmExNWY0Nzc2YmQ3OTY3NzZhYTJmJTJGdGh1bWJuYWlscyUyRnRodW1ibmFpbC5qcGclM0Z0aW1lJTNEMTY4JTI2aGVpZ2h0JTNENjAwIiB0aXRsZT0iQW55U3BlbmQgU2V0dXAiIGZyYW1lYm9yZGVyPSIwIiBhbGxvdz0iYWNjZWxlcm9tZXRlcjsgYXV0b3BsYXk7IGNsaXBib2FyZC13cml0ZTsgZW5jcnlwdGVkLW1lZGlhOyBneXJvc2NvcGU7IHBpY3R1cmUtaW4tcGljdHVyZSIgYWxsb3dmdWxsc2NyZWVuIC8+CgojIyBQcmVyZXF1aXNpdGVzCgo8Q2FyZEdyb3VwIGNvbHM9ezN9PgogIDxDYXJkIHRpdGxlPSJOb2RlLmpzIiBpY29uPSJub2RlLWpzIj4KICAgIHYyMC4xNS4wIG9yIGhpZ2hlcgogIDwvQ2FyZD4KICA8Q2FyZCB0aXRsZT0iUmVhY3QiIGljb249InJlYWN0Ij4KICAgIFZlcnNpb24gMTggb3IgMTkKICA8L0NhcmQ+CiAgPENhcmQgdGl0bGU9IlR5cGVTY3JpcHQiIGljb249ImNvZGUiPgogICAgUmVjb21tZW5kZWQgZm9yIGJldHRlciBEWAogIDwvQ2FyZD4KPC9DYXJkR3JvdXA+CgojIyBJbnN0YWxsYXRpb24KCkNob29zZSB5b3VyIHByZWZlcnJlZCBwYWNrYWdlIG1hbmFnZXI6Cgo8VGFicz4KICA8VGFiIHRpdGxlPSJucG0iPgogICAgYGBgYmFzaAogICAgbnBtIGluc3RhbGwgQGIzZG90ZnVuL3NkawogICAgYGBgCiAgPC9UYWI+CiAgPFRhYiB0aXRsZT0icG5wbSI+CiAgICBgYGBiYXNoCiAgICBwbnBtIGFkZCBAYjNkb3RmdW4vc2RrCiAgICBgYGAKICA8L1RhYj4KPC9UYWJzPgoKIyMgQmFzaWMgU2V0dXAKCiMjIyAxLiBQcm92aWRlciBTZXR1cAoKV3JhcCB5b3VyIGFwcCB3aXRoIHRoZSBgQjNQcm92aWRlcmAgYW5kIGBBbnlzcGVuZFByb3ZpZGVyYCB0byBlbmFibGUgQW55U3BlbmQgZnVuY3Rpb25hbGl0eToKCmBgYHRzeCBBcHAudHN4IGljb249cmVhY3QKaW1wb3J0IHsgQW55c3BlbmRQcm92aWRlciB9IGZyb20gIkBiM2RvdGZ1bi9zZGsvYW55c3BlbmQvcmVhY3QiOwppbXBvcnQgeyBCM1Byb3ZpZGVyIH0gZnJvbSAiQGIzZG90ZnVuL3Nkay9nbG9iYWwtYWNjb3VudC9yZWFjdCI7CmltcG9ydCAiQGIzZG90ZnVuL3Nkay9pbmRleC5jc3MiOwoKZnVuY3Rpb24gQXBwKCkgewogIHJldHVybiAoCiAgICA8QjNQcm92aWRlciB0aGVtZT0ibGlnaHQiIGVudmlyb25tZW50PSJwcm9kdWN0aW9uIiBwYXJ0bmVySWQ9InlvdXItYXdlc29tZS1wYXJ0bmVyLWlkIj4KICAgICAgPEFueXNwZW5kUHJvdmlkZXI+ey8qIFlvdXIgYXBwIGNvbXBvbmVudHMgKi99PC9BbnlzcGVuZFByb3ZpZGVyPgogICAgPC9CM1Byb3ZpZGVyPgogICk7Cn0KCmV4cG9ydCBkZWZhdWx0IEFwcDsKYGBgCgojIyMgMi4gRW52aXJvbm1lbnQgQ29uZmlndXJhdGlvbgoKPFRhYnM+CiAgPFRhYiB0aXRsZT0iTWFpbm5ldCI+CiAgICAqKkVuZHBvaW50Kio6IGBodHRwczovL21haW5uZXQuYW55c3BlbmQuY29tYAoKICAgIFVzZSB0aGlzIGZvciBwcm9kdWN0aW9uIGFwcGxpY2F0aW9ucyB3aXRoIHJlYWwgdHJhbnNhY3Rpb25zLgogIDwvVGFiPgogIDxUYWIgdGl0bGU9IlRlc3RuZXQiPgogICAgKipFbmRwb2ludCoqOiBgaHR0cDovL3Rlc3RuZXQuYW55c3BlbmQuY29tYAoKICAgIFVzZSB0aGlzIGZvciBkZXZlbG9wbWVudCBhbmQgdGVzdGluZyB3aXRoIHRlc3QgdG9rZW5zLgoKICAgIE5vdGU6IFRlc3RuZXQgaXMgY3VycmVudGx5IG5vdCBhdmFpbGFibGUuCiAgPC9UYWI+CjwvVGFicz4KCiMjIyAzLiBUeXBlU2NyaXB0IENvbmZpZ3VyYXRpb24gKE9wdGlvbmFsIGJ1dCBSZWNvbW1lbmRlZCkKCjxOb3RlPgogIElmIHlvdSdyZSB1c2luZyBUeXBlU2NyaXB0LCBlbnN1cmUgeW91ciBgdHNjb25maWcuanNvbmAgaW5jbHVkZXMgdGhlc2Ugc2V0dGluZ3MgZm9yIG9wdGltYWwgY29tcGF0aWJpbGl0eToKPC9Ob3RlPgoKYGBganNvbiB0c2NvbmZpZy5qc29uIGljb249c2V0dGluZ3MKewogICJjb21waWxlck9wdGlvbnMiOiB7CiAgICAibW9kdWxlUmVzb2x1dGlvbiI6ICJub2RlIiwKICAgICJhbGxvd1N5bnRoZXRpY0RlZmF1bHRJbXBvcnRzIjogdHJ1ZSwKICAgICJlc01vZHVsZUludGVyb3AiOiB0cnVlCiAgfQp9CmBgYAoKIyMgVmVyaWZpY2F0aW9uCgpDcmVhdGUgYSBzaW1wbGUgdGVzdCBjb21wb25lbnQgdG8gdmVyaWZ5IHlvdXIgc2V0dXAgd29ya3MgY29ycmVjdGx5OgoKYGBgdHN4IFRlc3RDb21wb25lbnQudHN4IGljb249dGVzdC10dWJlIGxpbmVzCmltcG9ydCB7IEFueVNwZW5kIH0gZnJvbSAiQGIzZG90ZnVuL3Nkay9hbnlzcGVuZC9yZWFjdCI7CgpmdW5jdGlvbiBUZXN0Q29tcG9uZW50KCkgewogIHJldHVybiA8QW55U3BlbmQgLz47Cn0KYGBgCgojIyBOZXh0IFN0ZXBzCgo8Q2FyZEdyb3VwIGNvbHM9ezN9PgogIDxDYXJkIHRpdGxlPSJFeHBsb3JlIENvbXBvbmVudHMiIGljb249InB1enpsZS1waWVjZSIgaHJlZj0iL2FueXNwZW5kL2NvbXBvbmVudHMiPgogICAgTGVhcm4gYWJvdXQgYXZhaWxhYmxlIGNvbXBvbmVudHMgZm9yIGRpZmZlcmVudCBwYXltZW50IHNjZW5hcmlvcwogIDwvQ2FyZD4KICA8Q2FyZCB0aXRsZT0iTGVhcm4gYWJvdXQgSG9va3MiIGljb249ImxpbmsiIGhyZWY9Ii9hbnlzcGVuZC9ob29rcyI+CiAgICBEaXNjb3ZlciBSZWFjdCBob29rcyBmb3IgYnVpbGRpbmcgY3VzdG9tIHBheW1lbnQgZmxvd3MKICA8L0NhcmQ+CiAgPENhcmQgdGl0bGU9IlNlZSBFeGFtcGxlcyIgaWNvbj0iY29kZSIgaHJlZj0iL2FueXNwZW5kL2V4YW1wbGVzIj4KICAgIEJyb3dzZSByZWFsLXdvcmxkIGltcGxlbWVudGF0aW9uIGV4YW1wbGVzCiAgPC9DYXJkPgo8L0NhcmRHcm91cD4KCiMjIFRyb3VibGVzaG9vdGluZwoKPEFjY29yZGlvbkdyb3VwPgogIDxBY2NvcmRpb24gdGl0bGU9IkltcG9ydCBFcnJvcnMiPgogICAgTWFrZSBzdXJlIHlvdSd2ZSBpbnN0YWxsZWQgdGhlIFNESyBjb3JyZWN0bHkgYW5kIGltcG9ydGVkIHRoZSBDU1MgZmlsZS4gVGhlIFNESyByZXF1aXJlcyBSZWFjdCAxOFwrIGFuZCBtYXkgaGF2ZSBjb21wYXRpYmlsaXR5IGlzc3VlcyB3aXRoIG9sZGVyIHZlcnNpb25zLgogIDwvQWNjb3JkaW9uPgogIDxBY2NvcmRpb24gdGl0bGU9IlByb3ZpZGVyIE5vdCBGb3VuZCI+CiAgICBFbnN1cmUgeW91IGhhdmUgYEIzUHJvdmlkZXJgIGFuZCBgQW55c3BlbmRQcm92aWRlcmAgcGxhY2VkIGhpZ2ggaW4geW91ciBjb21wb25lbnQgdHJlZSwgdHlwaWNhbGx5IGluIHlvdXIgbWFpbiBBcHAgY29tcG9uZW50LgogIDwvQWNjb3JkaW9uPgogIDxBY2NvcmRpb24gdGl0bGU9IlR5cGVTY3JpcHQgRXJyb3JzIj4KICAgIElmIHlvdSdyZSBzZWVpbmcgVHlwZVNjcmlwdCBlcnJvcnMsIHZlcmlmeSB5b3VyIGB0c2NvbmZpZy5qc29uYCBpbmNsdWRlcyB0aGUgcmVjb21tZW5kZWQgc2V0dGluZ3MgYWJvdmUuCiAgPC9BY2NvcmRpb24+CjwvQWNjb3JkaW9uR3JvdXA+Cg==",
    "lastUpdated": "2025-10-31T02:44:26.290Z"
  },
  {
    "sourceFile": "anyspend/hooks.mdx",
    "sourceHash": "CiMjIENvcmUgSG9va3MKCiMjIyBgdXNlQW55c3BlbmRRdW90ZWAKCkdldCByZWFsLXRpbWUgcHJpY2luZyBpbmZvcm1hdGlvbiBmb3IgdG9rZW4gc3dhcHMgYW5kIGNyb3NzLWNoYWluIHRyYW5zYWN0aW9ucy4KCmBgYHRzeCB0aXRsZT0iQmFzaWMgVXNhZ2UiIGljb249InF1b3RlLWxlZnQiCmltcG9ydCB7IHVzZUFueXNwZW5kUXVvdGUgfSBmcm9tICJAYjNkb3RmdW4vc2RrL2FueXNwZW5kIjsKCmNvbnN0IHsKICBhbnlzcGVuZFF1b3RlLAogIGlzTG9hZGluZ0FueXNwZW5kUXVvdGUsCiAgZ2V0QW55c3BlbmRRdW90ZUVycm9yLAogIHJlZmV0Y2hBbnlzcGVuZFF1b3RlCn0gPSB1c2VBbnlzcGVuZFF1b3RlKHF1b3RlUmVxdWVzdCk7CmBgYAoKIyMjIyBQYXJhbWV0ZXJzCgo8UGFyYW1GaWVsZCBwYXRoPSJxdW90ZVJlcXVlc3QiIHR5cGU9IlF1b3RlUmVxdWVzdCIgcmVxdWlyZWQ+CiAgUXVvdGUgY29uZmlndXJhdGlvbiBvYmplY3QKPC9QYXJhbUZpZWxkPgoKIyMjIyBRdW90ZVJlcXVlc3QgSW50ZXJmYWNlCgpgYGB0eXBlc2NyaXB0IHRpdGxlPSJUeXBlIERlZmluaXRpb24iIGljb249ImNvZGUiCmludGVyZmFjZSBRdW90ZVJlcXVlc3QgewogIHNyY0NoYWluOiBudW1iZXI7ICAgICAgICAgICAgICAvLyBTb3VyY2UgY2hhaW4gSUQKICBkc3RDaGFpbjogbnVtYmVyOyAgICAgICAgICAgICAgLy8gRGVzdGluYXRpb24gY2hhaW4gSUQKICBzcmNUb2tlbkFkZHJlc3M6IHN0cmluZzsgICAgICAgLy8gU291cmNlIHRva2VuIGNvbnRyYWN0IGFkZHJlc3MKICBkc3RUb2tlbkFkZHJlc3M6IHN0cmluZzsgICAgICAgLy8gRGVzdGluYXRpb24gdG9rZW4gY29udHJhY3QgYWRkcmVzcwogIHR5cGU6ICJzd2FwIiB8ICJjdXN0b20iOyAgICAgICAvLyBPcmRlciB0eXBlCiAgdHJhZGVUeXBlOiAiRVhBQ1RfSU5QVVQiIHwgIkVYQUNUX09VVFBVVCI7CiAgYW1vdW50OiBzdHJpbmc7ICAgICAgICAgICAgICAgIC8vIEFtb3VudCBpbiBzbWFsbGVzdCB1bml0ICh3ZWkpCn0KYGBgCgojIyMjIFJldHVybiBWYWx1ZXMKCjxSZXNwb25zZUZpZWxkIG5hbWU9ImFueXNwZW5kUXVvdGUiIHR5cGU9IlF1b3RlUmVzcG9uc2UgfCBudWxsIj4KICBRdW90ZSBkYXRhIHdpdGggcHJpY2luZyBhbmQgZmVlcwo8L1Jlc3BvbnNlRmllbGQ+Cgo8UmVzcG9uc2VGaWVsZCBuYW1lPSJpc0xvYWRpbmdBbnlzcGVuZFF1b3RlIiB0eXBlPSJib29sZWFuIj4KICBMb2FkaW5nIHN0YXRlIGluZGljYXRvcgo8L1Jlc3BvbnNlRmllbGQ+Cgo8UmVzcG9uc2VGaWVsZCBuYW1lPSJnZXRBbnlzcGVuZFF1b3RlRXJyb3IiIHR5cGU9IkVycm9yIHwgbnVsbCI+CiAgRXJyb3Igb2JqZWN0IGlmIHF1b3RlIGZhaWxlZAo8L1Jlc3BvbnNlRmllbGQ+Cgo8UmVzcG9uc2VGaWVsZCBuYW1lPSJyZWZldGNoQW55c3BlbmRRdW90ZSIgdHlwZT0iKCkgPT4gdm9pZCI+CiAgRnVuY3Rpb24gdG8gbWFudWFsbHkgcmVmcmVzaCBxdW90ZQo8L1Jlc3BvbnNlRmllbGQ+CgojIyMjIFVzYWdlIEV4YW1wbGUKCmBgYHRzeCB0aXRsZT0iU3dhcCBRdW90ZSBDb21wb25lbnQiIGljb249ImV4Y2hhbmdlLWFsdCIgbGluZXMKZnVuY3Rpb24gU3dhcFF1b3RlKCkgewogIGNvbnN0IHF1b3RlUmVxdWVzdCA9IHsKICAgIHNyY0NoYWluOiAxLCAgICAgICAgICAgLy8gRXRoZXJldW0KICAgIGRzdENoYWluOiA4MzMzLCAgICAgICAgLy8gQjMKICAgIHNyY1Rva2VuQWRkcmVzczogIjB4QTBiODZhMzNFNkZiNkRkOWE5QjNkOEI1RkViMmIzQzhlN0Q5RmYxRSIsIC8vIFVTREMKICAgIGRzdFRva2VuQWRkcmVzczogIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCIsIC8vIEVUSAogICAgdHlwZTogInN3YXAiLAogICAgdHJhZGVUeXBlOiAiRVhBQ1RfSU5QVVQiLAogICAgYW1vdW50OiAiMTAwMDAwMCIsIC8vIDEgVVNEQyAoNiBkZWNpbWFscykKICB9OwoKICBjb25zdCB7IGFueXNwZW5kUXVvdGUsIGlzTG9hZGluZ0FueXNwZW5kUXVvdGUsIGdldEFueXNwZW5kUXVvdGVFcnJvciB9ID0KICAgIHVzZUFueXNwZW5kUXVvdGUocXVvdGVSZXF1ZXN0KTsKCiAgaWYgKGlzTG9hZGluZ0FueXNwZW5kUXVvdGUpIHJldHVybiA8ZGl2PkdldHRpbmcgYmVzdCBwcmljZS4uLjwvZGl2PjsKICBpZiAoZ2V0QW55c3BlbmRRdW90ZUVycm9yKSByZXR1cm4gPGRpdj5GYWlsZWQgdG8gZ2V0IHF1b3RlPC9kaXY+OwoKICByZXR1cm4gKAogICAgPGRpdj4KICAgICAgPHA+WW91J2xsIHJlY2VpdmU6IHthbnlzcGVuZFF1b3RlPy5leHBlY3RlZE91dHB1dH0gRVRIPC9wPgogICAgICA8cD5OZXR3b3JrIGZlZTogJHthbnlzcGVuZFF1b3RlPy5uZXR3b3JrRmVlVXNkfTwvcD4KICAgICAgPHA+U2VydmljZSBmZWU6ICR7YW55c3BlbmRRdW90ZT8uc2VydmljZUZlZVVzZH08L3A+CiAgICAgIDxwPlRvdGFsIGNvc3Q6ICR7YW55c3BlbmRRdW90ZT8udG90YWxVc2RDb3N0fTwvcD4KICAgIDwvZGl2PgogICk7Cn0KYGBgCgotLS0KCiMjIyBgdXNlQW55c3BlbmRDcmVhdGVPcmRlcmAKCkNyZWF0ZSBhbmQgZXhlY3V0ZSBBbnlTcGVuZCBvcmRlcnMgd2l0aCBjb21wcmVoZW5zaXZlIGVycm9yIGhhbmRsaW5nLgoKYGBgdHN4IHRpdGxlPSJCYXNpYyBVc2FnZSIgaWNvbj0icGx1cy1jaXJjbGUiCmltcG9ydCB7IHVzZUFueXNwZW5kQ3JlYXRlT3JkZXIgfSBmcm9tICJAYjNkb3RmdW4vc2RrL2FueXNwZW5kIjsKCmNvbnN0IHsKICBjcmVhdGVPcmRlciwKICBpc0NyZWF0aW5nT3JkZXIsCiAgY3JlYXRlT3JkZXJFcnJvcgp9ID0gdXNlQW55c3BlbmRDcmVhdGVPcmRlcihvcHRpb25zKTsKYGBgCgojIyMjIFBhcmFtZXRlcnMKCjxQYXJhbUZpZWxkIHBhdGg9Im9wdGlvbnMiIHR5cGU9IkNyZWF0ZU9yZGVyT3B0aW9ucyI+CiAgQ29uZmlndXJhdGlvbiBvYmplY3Qgd2l0aCBjYWxsYmFjayBmdW5jdGlvbnMKPC9QYXJhbUZpZWxkPgoKIyMjIyBDcmVhdGVPcmRlck9wdGlvbnMgSW50ZXJmYWNlCgpgYGB0eXBlc2NyaXB0IHRpdGxlPSJUeXBlIERlZmluaXRpb24iIGljb249InNldHRpbmdzIgppbnRlcmZhY2UgQ3JlYXRlT3JkZXJPcHRpb25zIHsKICBvblN1Y2Nlc3M/OiAoZGF0YTogT3JkZXJSZXNwb25zZSkgPT4gdm9pZDsKICBvbkVycm9yPzogKGVycm9yOiBFcnJvcikgPT4gdm9pZDsKICBvblNldHRsZWQ/OiAoKSA9PiB2b2lkOwp9CmBgYAoKIyMjIyBSZXR1cm4gVmFsdWVzCgo8UmVzcG9uc2VGaWVsZCBuYW1lPSJjcmVhdGVPcmRlciIgdHlwZT0iKHJlcXVlc3Q6IENyZWF0ZU9yZGVyUmVxdWVzdCkgPT4gdm9pZCI+CiAgRnVuY3Rpb24gdG8gY3JlYXRlIGFuZCBleGVjdXRlIGFuIG9yZGVyCjwvUmVzcG9uc2VGaWVsZD4KCjxSZXNwb25zZUZpZWxkIG5hbWU9ImlzQ3JlYXRpbmdPcmRlciIgdHlwZT0iYm9vbGVhbiI+CiAgTG9hZGluZyBzdGF0ZSBpbmRpY2F0b3IKPC9SZXNwb25zZUZpZWxkPgoKPFJlc3BvbnNlRmllbGQgbmFtZT0iY3JlYXRlT3JkZXJFcnJvciIgdHlwZT0iRXJyb3IgfCBudWxsIj4KICBFcnJvciBvYmplY3QgaWYgb3JkZXIgY3JlYXRpb24gZmFpbGVkCjwvUmVzcG9uc2VGaWVsZD4KCiMjIyMgVXNhZ2UgRXhhbXBsZQoKYGBgdHN4IHRpdGxlPSJQYXltZW50IEZvcm0iIGljb249ImNyZWRpdC1jYXJkIiBsaW5lcwpmdW5jdGlvbiBQYXltZW50Rm9ybSgpIHsKICBjb25zdCB7IGNyZWF0ZU9yZGVyLCBpc0NyZWF0aW5nT3JkZXIgfSA9IHVzZUFueXNwZW5kQ3JlYXRlT3JkZXIoewogICAgb25TdWNjZXNzOiAoZGF0YSkgPT4gewogICAgICBjb25zb2xlLmxvZygiT3JkZXIgY3JlYXRlZDoiLCBkYXRhLmRhdGEuaWQpOwogICAgICAvLyBSZWRpcmVjdCB0byBwYXltZW50IG9yIHNob3cgc3VjY2VzcwogICAgICByb3V0ZXIucHVzaChgL3BheW1lbnQvJHtkYXRhLmRhdGEuaWR9YCk7CiAgICB9LAogICAgb25FcnJvcjogKGVycm9yKSA9PiB7CiAgICAgIGNvbnNvbGUuZXJyb3IoIk9yZGVyIGZhaWxlZDoiLCBlcnJvci5tZXNzYWdlKTsKICAgICAgdG9hc3QuZXJyb3IoIlBheW1lbnQgZmFpbGVkLiBQbGVhc2UgdHJ5IGFnYWluLiIpOwogICAgfSwKICB9KTsKCiAgY29uc3QgaGFuZGxlUGF5bWVudCA9ICgpID0+IHsKICAgIGNyZWF0ZU9yZGVyKHsKICAgICAgcmVjaXBpZW50QWRkcmVzczogdXNlcldhbGxldEFkZHJlc3MsCiAgICAgIG9yZGVyVHlwZTogInN3YXAiLAogICAgICBzcmNDaGFpbjogMSwKICAgICAgZHN0Q2hhaW46IDgzMzMsCiAgICAgIHNyY1Rva2VuOiB7CiAgICAgICAgY2hhaW5JZDogMSwKICAgICAgICBhZGRyZXNzOiAiMHhBMGI4NmEzM0U2RmI2RGQ5YTlCM2Q4QjVGRWIyYjNDOGU3RDlGZjFFIiwKICAgICAgICBuYW1lOiAiVVNEIENvaW4iLAogICAgICAgIHN5bWJvbDogIlVTREMiLAogICAgICAgIGRlY2ltYWxzOiA2LAogICAgICB9LAogICAgICBkc3RUb2tlbjogewogICAgICAgIGNoYWluSWQ6IDgzMzMsCiAgICAgICAgYWRkcmVzczogIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCIsCiAgICAgICAgbmFtZTogIkV0aGVyIiwKICAgICAgICBzeW1ib2w6ICJFVEgiLAogICAgICAgIGRlY2ltYWxzOiAxOCwKICAgICAgfSwKICAgICAgc3JjQW1vdW50OiAiMTAwMDAwMCIsIC8vIDEgVVNEQwogICAgICBleHBlY3RlZERzdEFtb3VudDogIjUwMDAwMDAwMDAwMDAwMDAwMCIsIC8vIH4wLjUgRVRICiAgICAgIGNyZWF0b3JBZGRyZXNzOiB1c2VyV2FsbGV0QWRkcmVzcywKICAgIH0pOwogIH07CgogIHJldHVybiAoCiAgICA8YnV0dG9uCiAgICAgIG9uQ2xpY2s9e2hhbmRsZVBheW1lbnR9CiAgICAgIGRpc2FibGVkPXtpc0NyZWF0aW5nT3JkZXJ9CiAgICA+CiAgICAgIHtpc0NyZWF0aW5nT3JkZXIgPyAiUHJvY2Vzc2luZy4uLiIgOiAiUGF5IHdpdGggQ3J5cHRvIn0KICAgIDwvYnV0dG9uPgogICk7Cn0KYGBgCgotLS0KCiMjIyBgdXNlQW55c3BlbmRPcmRlckFuZFRyYW5zYWN0aW9uc2AKCk1vbml0b3Igb3JkZXIgc3RhdHVzIGFuZCB0cmFjayBhc3NvY2lhdGVkIGJsb2NrY2hhaW4gdHJhbnNhY3Rpb25zIGluIHJlYWwtdGltZS4KCmBgYHRzeCB0aXRsZT0iQmFzaWMgVXNhZ2UiIGljb249InNlYXJjaCIKaW1wb3J0IHsgdXNlQW55c3BlbmRPcmRlckFuZFRyYW5zYWN0aW9ucyB9IGZyb20gIkBiM2RvdGZ1bi9zZGsvYW55c3BlbmQiOwoKY29uc3QgewogIG9yZGVyQW5kVHJhbnNhY3Rpb25zLAogIGlzTG9hZGluZ09yZGVyQW5kVHJhbnNhY3Rpb25zLAogIGdldE9yZGVyQW5kVHJhbnNhY3Rpb25zRXJyb3IKfSA9IHVzZUFueXNwZW5kT3JkZXJBbmRUcmFuc2FjdGlvbnMob3JkZXJJZCk7CmBgYAoKIyMjIyBQYXJhbWV0ZXJzCgo8UGFyYW1GaWVsZCBwYXRoPSJvcmRlcklkIiB0eXBlPSJzdHJpbmciIHJlcXVpcmVkPgogIE9yZGVyIElEIHRvIHRyYWNrIGFuZCBtb25pdG9yCjwvUGFyYW1GaWVsZD4KCiMjIyMgUmV0dXJuIFZhbHVlcwoKPFJlc3BvbnNlRmllbGQgbmFtZT0ib3JkZXJBbmRUcmFuc2FjdGlvbnMiIHR5cGU9Ik9yZGVyV2l0aFRyYW5zYWN0aW9ucyB8IG51bGwiPgogIENvbXBsZXRlIG9yZGVyIGRhdGEgd2l0aCB0cmFuc2FjdGlvbiBkZXRhaWxzCjwvUmVzcG9uc2VGaWVsZD4KCjxSZXNwb25zZUZpZWxkIG5hbWU9ImlzTG9hZGluZ09yZGVyQW5kVHJhbnNhY3Rpb25zIiB0eXBlPSJib29sZWFuIj4KICBMb2FkaW5nIHN0YXRlIGluZGljYXRvcgo8L1Jlc3BvbnNlRmllbGQ+Cgo8UmVzcG9uc2VGaWVsZCBuYW1lPSJnZXRPcmRlckFuZFRyYW5zYWN0aW9uc0Vycm9yIiB0eXBlPSJFcnJvciB8IG51bGwiPgogIEVycm9yIG9iamVjdCBpZiBmZXRjaCBmYWlsZWQKPC9SZXNwb25zZUZpZWxkPgoKIyMjIyBPcmRlcldpdGhUcmFuc2FjdGlvbnMgSW50ZXJmYWNlCgpgYGB0eXBlc2NyaXB0IHRpdGxlPSJUeXBlIERlZmluaXRpb24iIGljb249ImRhdGFiYXNlIgppbnRlcmZhY2UgT3JkZXJXaXRoVHJhbnNhY3Rpb25zIHsKICBkYXRhOiB7CiAgICBvcmRlcjogT3JkZXI7ICAgICAgICAgICAgICAgLy8gT3JkZXIgZGV0YWlscyBhbmQgc3RhdHVzCiAgICBkZXBvc2l0VHhzOiBUcmFuc2FjdGlvbltdOyAgLy8gVXNlciBkZXBvc2l0IHRyYW5zYWN0aW9ucwogICAgcmVsYXlUeD86IFRyYW5zYWN0aW9uOyAgICAgIC8vIENyb3NzLWNoYWluIHJlbGF5IHRyYW5zYWN0aW9uCiAgICBleGVjdXRlVHg/OiBUcmFuc2FjdGlvbjsgICAgLy8gRmluYWwgZXhlY3V0aW9uIHRyYW5zYWN0aW9uCiAgICByZWZ1bmRUeHM6IFRyYW5zYWN0aW9uW107ICAgLy8gUmVmdW5kIHRyYW5zYWN0aW9ucyAoaWYgYW55KQogIH07Cn0KYGBgCgojIyMjIFVzYWdlIEV4YW1wbGUKCmBgYHRzeCB0aXRsZT0iT3JkZXIgVHJhY2tlciIgaWNvbj0iZXllIiBsaW5lcwpmdW5jdGlvbiBPcmRlclRyYWNrZXIoeyBvcmRlcklkIH06IHsgb3JkZXJJZDogc3RyaW5nIH0pIHsKICBjb25zdCB7IG9yZGVyQW5kVHJhbnNhY3Rpb25zLCBpc0xvYWRpbmdPcmRlckFuZFRyYW5zYWN0aW9ucyB9ID0KICAgIHVzZUFueXNwZW5kT3JkZXJBbmRUcmFuc2FjdGlvbnMob3JkZXJJZCk7CgogIGlmIChpc0xvYWRpbmdPcmRlckFuZFRyYW5zYWN0aW9ucykgewogICAgcmV0dXJuIDxkaXY+TG9hZGluZyBvcmRlciBzdGF0dXMuLi48L2Rpdj47CiAgfQoKICBpZiAoIW9yZGVyQW5kVHJhbnNhY3Rpb25zKSB7CiAgICByZXR1cm4gPGRpdj5PcmRlciBub3QgZm91bmQ8L2Rpdj47CiAgfQoKICBjb25zdCB7IG9yZGVyLCBkZXBvc2l0VHhzLCBleGVjdXRlVHgsIHJlZnVuZFR4cyB9ID0gb3JkZXJBbmRUcmFuc2FjdGlvbnMuZGF0YTsKCiAgY29uc3QgZ2V0U3RhdHVzTWVzc2FnZSA9IChzdGF0dXM6IHN0cmluZykgPT4gewogICAgc3dpdGNoIChzdGF0dXMpIHsKICAgICAgY2FzZSAic2Nhbm5pbmdfZGVwb3NpdF90cmFuc2FjdGlvbiI6CiAgICAgICAgcmV0dXJuICLij7MgV2FpdGluZyBmb3IgcGF5bWVudCBjb25maXJtYXRpb24uLi4iOwogICAgICBjYXNlICJyZWxheSI6CiAgICAgICAgcmV0dXJuICLwn5SEIFByb2Nlc3NpbmcgY3Jvc3MtY2hhaW4gdHJhbnNhY3Rpb24uLi4iOwogICAgICBjYXNlICJleGVjdXRlZCI6CiAgICAgICAgcmV0dXJuICLinIUgVHJhbnNhY3Rpb24gY29tcGxldGVkIHN1Y2Nlc3NmdWxseSEiOwogICAgICBjYXNlICJyZWZ1bmRlZCI6CiAgICAgICAgcmV0dXJuICLihqnvuI8gUmVmdW5kIHByb2Nlc3NlZCI7CiAgICAgIGRlZmF1bHQ6CiAgICAgICAgcmV0dXJuICLwn5SEIFByb2Nlc3NpbmcuLi4iOwogICAgfQogIH07CgogIHJldHVybiAoCiAgICA8ZGl2IGNsYXNzTmFtZT0ib3JkZXItc3RhdHVzIj4KICAgICAgPGgyPk9yZGVyICN7b3JkZXJJZC5zbGljZSgwLCA4KX08L2gyPgogICAgICA8cD57Z2V0U3RhdHVzTWVzc2FnZShvcmRlci5zdGF0dXMpfTwvcD4KCiAgICAgIHtkZXBvc2l0VHhzLmxlbmd0aCA+IDAgJiYgKAogICAgICAgIDxkaXY+CiAgICAgICAgICA8aDM+UGF5bWVudCBUcmFuc2FjdGlvbjwvaDM+CiAgICAgICAgICA8YQogICAgICAgICAgICBocmVmPXtgaHR0cHM6Ly9ldGhlcnNjYW4uaW8vdHgvJHtkZXBvc2l0VHhzWzBdLnR4SGFzaH1gfQogICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKICAgICAgICAgICAgcmVsPSJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgPgogICAgICAgICAgICBWaWV3IG9uIEV0aGVyc2NhbgogICAgICAgICAgPC9hPgogICAgICAgIDwvZGl2PgogICAgICApfQoKICAgICAge2V4ZWN1dGVUeCAmJiAoCiAgICAgICAgPGRpdj4KICAgICAgICAgIDxoMz5FeGVjdXRpb24gVHJhbnNhY3Rpb248L2gzPgogICAgICAgICAgPGEKICAgICAgICAgICAgaHJlZj17YGh0dHBzOi8vZXhwbG9yZXIuYjMuZnVuL3R4LyR7ZXhlY3V0ZVR4LnR4SGFzaH1gfQogICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKICAgICAgICAgICAgcmVsPSJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgPgogICAgICAgICAgICBWaWV3IG9uIEIzIEV4cGxvcmVyCiAgICAgICAgICA8L2E+CiAgICAgICAgPC9kaXY+CiAgICAgICl9CgogICAgICB7b3JkZXIuZXJyb3JEZXRhaWxzICYmICgKICAgICAgICA8ZGl2IGNsYXNzTmFtZT0iZXJyb3IiPgogICAgICAgICAgPHN0cm9uZz5FcnJvcjo8L3N0cm9uZz4ge29yZGVyLmVycm9yRGV0YWlsc30KICAgICAgICA8L2Rpdj4KICAgICAgKX0KICAgIDwvZGl2PgogICk7Cn0KYGBgCgotLS0KCiMjIyBgdXNlQW55c3BlbmRPcmRlckhpc3RvcnlgCgpSZXRyaWV2ZSBwYWdpbmF0ZWQgb3JkZXIgaGlzdG9yeSBmb3IgYSB1c2VyIGFkZHJlc3MuCgpgYGB0c3ggdGl0bGU9IkJhc2ljIFVzYWdlIiBpY29uPSJoaXN0b3J5IgppbXBvcnQgeyB1c2VBbnlzcGVuZE9yZGVySGlzdG9yeSB9IGZyb20gIkBiM2RvdGZ1bi9zZGsvYW55c3BlbmQiOwoKY29uc3QgewogIG9yZGVySGlzdG9yeSwKICBpc0xvYWRpbmdPcmRlckhpc3RvcnksCiAgZ2V0T3JkZXJIaXN0b3J5RXJyb3IKfSA9IHVzZUFueXNwZW5kT3JkZXJIaXN0b3J5KGNyZWF0b3JBZGRyZXNzLCBsaW1pdCwgb2Zmc2V0KTsKYGBgCgojIyMjIFBhcmFtZXRlcnMKCjxQYXJhbUZpZWxkIHBhdGg9ImNyZWF0b3JBZGRyZXNzIiB0eXBlPSJzdHJpbmciIHJlcXVpcmVkPgogIFVzZXIgd2FsbGV0IGFkZHJlc3MKPC9QYXJhbUZpZWxkPgoKPFBhcmFtRmllbGQgcGF0aD0ibGltaXQiIHR5cGU9Im51bWJlciIgcmVxdWlyZWQ+CiAgTnVtYmVyIG9mIG9yZGVycyB0byBmZXRjaCAobWF4IDEwMCkKPC9QYXJhbUZpZWxkPgoKPFBhcmFtRmllbGQgcGF0aD0ib2Zmc2V0IiB0eXBlPSJudW1iZXIiIHJlcXVpcmVkPgogIFBhZ2luYXRpb24gb2Zmc2V0CjwvUGFyYW1GaWVsZD4KCiMjIyMgVXNhZ2UgRXhhbXBsZQoKYGBgdHN4IHRpdGxlPSJPcmRlciBIaXN0b3J5IENvbXBvbmVudCIgaWNvbj0ibGlzdCIgbGluZXMKZnVuY3Rpb24gT3JkZXJIaXN0b3J5KHsgdXNlckFkZHJlc3MgfTogeyB1c2VyQWRkcmVzczogc3RyaW5nIH0pIHsKICBjb25zdCBbcGFnZSwgc2V0UGFnZV0gPSB1c2VTdGF0ZSgwKTsKICBjb25zdCBwYWdlU2l6ZSA9IDEwOwoKICBjb25zdCB7IG9yZGVySGlzdG9yeSwgaXNMb2FkaW5nT3JkZXJIaXN0b3J5IH0gPSB1c2VBbnlzcGVuZE9yZGVySGlzdG9yeSgKICAgIHVzZXJBZGRyZXNzLAogICAgcGFnZVNpemUsCiAgICBwYWdlICogcGFnZVNpemUKICApOwoKICBpZiAoaXNMb2FkaW5nT3JkZXJIaXN0b3J5KSB7CiAgICByZXR1cm4gPGRpdj5Mb2FkaW5nIG9yZGVyIGhpc3RvcnkuLi48L2Rpdj47CiAgfQoKICByZXR1cm4gKAogICAgPGRpdj4KICAgICAgPGgyPllvdXIgT3JkZXJzPC9oMj4KICAgICAge29yZGVySGlzdG9yeT8uZGF0YS5tYXAoKG9yZGVyKSA9PiAoCiAgICAgICAgPGRpdiBrZXk9e29yZGVyLmlkfSBjbGFzc05hbWU9Im9yZGVyLWl0ZW0iPgogICAgICAgICAgPHA+VHlwZToge29yZGVyLnR5cGV9PC9wPgogICAgICAgICAgPHA+U3RhdHVzOiB7b3JkZXIuc3RhdHVzfTwvcD4KICAgICAgICAgIDxwPkFtb3VudDoge29yZGVyLnNyY0Ftb3VudH0ge29yZGVyLnNyY1Rva2VuLnN5bWJvbH08L3A+CiAgICAgICAgICA8cD5EYXRlOiB7bmV3IERhdGUob3JkZXIuY3JlYXRlZEF0KS50b0xvY2FsZURhdGVTdHJpbmcoKX08L3A+CiAgICAgICAgPC9kaXY+CiAgICAgICkpfQoKICAgICAgPGJ1dHRvbgogICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFBhZ2UocGFnZSAtIDEpfQogICAgICAgIGRpc2FibGVkPXtwYWdlID09PSAwfQogICAgICA+CiAgICAgICAgUHJldmlvdXMKICAgICAgPC9idXR0b24+CiAgICAgIDxidXR0b24KICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRQYWdlKHBhZ2UgKyAxKX0KICAgICAgICBkaXNhYmxlZD17IW9yZGVySGlzdG9yeT8uZGF0YSB8fCBvcmRlckhpc3RvcnkuZGF0YS5sZW5ndGggPCBwYWdlU2l6ZX0KICAgICAgPgogICAgICAgIE5leHQKICAgICAgPC9idXR0b24+CiAgICA8L2Rpdj4KICApOwp9CmBgYAoKIyMgQWRkaXRpb25hbCBIb29rcwoKIyMjIGB1c2VBbnlzcGVuZFRva2Vuc2AKCkdldCBhdmFpbGFibGUgdG9rZW5zIGZvciBhIHNwZWNpZmljIGNoYWluLgoKYGBgdHN4IHRpdGxlPSJUb2tlbiBMaXN0IiBpY29uPSJjb2lucyIKY29uc3QgeyB0b2tlbnMsIGlzTG9hZGluZ1Rva2VucyB9ID0gdXNlQW55c3BlbmRUb2tlbnMoMSwgIlVTREMiKTsKYGBgCgojIyMgYHVzZUNvaW5iYXNlT25yYW1wT3B0aW9uc2AKCkdldCBDb2luYmFzZSBvbnJhbXAgY29uZmlndXJhdGlvbiBmb3IgZmlhdCBwYXltZW50cy4KCmBgYHRzeCB0aXRsZT0iQ29pbmJhc2UgT25yYW1wIiBpY29uPSJjcmVkaXQtY2FyZCIKY29uc3QgeyBjb2luYmFzZU9wdGlvbnMsIGlzTG9hZGluZ0NvaW5iYXNlT3B0aW9ucyB9ID0gdXNlQ29pbmJhc2VPbnJhbXBPcHRpb25zKCk7CmBgYAoKIyMjIGB1c2VTdHJpcGVDbGllbnRTZWNyZXRgCgpHZXQgU3RyaXBlIHBheW1lbnQgaW50ZW50IGZvciBjcmVkaXQgY2FyZCBwYXltZW50cy4KCmBgYHRzeCB0aXRsZT0iU3RyaXBlIEludGVncmF0aW9uIiBpY29uPSJzdHJpcGUiCmNvbnN0IHsgY2xpZW50U2VjcmV0LCBpc0xvYWRpbmdDbGllbnRTZWNyZXQgfSA9IHVzZVN0cmlwZUNsaWVudFNlY3JldChvcmRlckRhdGEpOwpgYGAKCiMjIEhvb2sgUGF0dGVybnMKCiMjIyBFcnJvciBIYW5kbGluZyBQYXR0ZXJuCgpgYGB0c3ggdGl0bGU9IkVycm9yIEhhbmRsaW5nIiBpY29uPSJzaGllbGQtZXhjbGFtYXRpb24iIGxpbmVzCmZ1bmN0aW9uIFBheW1lbnRDb21wb25lbnQoKSB7CiAgY29uc3QgeyBjcmVhdGVPcmRlciwgaXNDcmVhdGluZ09yZGVyIH0gPSB1c2VBbnlzcGVuZENyZWF0ZU9yZGVyKHsKICAgIG9uRXJyb3I6IChlcnJvcikgPT4gewogICAgICAvLyBMb2cgZXJyb3IgZm9yIGRlYnVnZ2luZwogICAgICBjb25zb2xlLmVycm9yKCJQYXltZW50IGZhaWxlZDoiLCBlcnJvcik7CgogICAgICAvLyBTaG93IHVzZXItZnJpZW5kbHkgbWVzc2FnZQogICAgICBzd2l0Y2ggKGVycm9yLm1lc3NhZ2UpIHsKICAgICAgICBjYXNlICJJTlNVRkZJQ0lFTlRfQkFMQU5DRSI6CiAgICAgICAgICB0b2FzdC5lcnJvcigiSW5zdWZmaWNpZW50IGJhbGFuY2UuIFBsZWFzZSBhZGQgZnVuZHMuIik7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJTTElQUEFHRSI6CiAgICAgICAgICB0b2FzdC5lcnJvcigiUHJpY2UgbW92ZWQgdW5mYXZvcmFibHkuIFBsZWFzZSB0cnkgYWdhaW4uIik7CiAgICAgICAgICBicmVhazsKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgdG9hc3QuZXJyb3IoIlBheW1lbnQgZmFpbGVkLiBQbGVhc2UgdHJ5IGFnYWluLiIpOwogICAgICB9CiAgICB9LAogIH0pOwoKICAvLyBDb21wb25lbnQgaW1wbGVtZW50YXRpb24uLi4KfQpgYGAKCiMjIyBMb2FkaW5nIFN0YXRlIFBhdHRlcm4KCmBgYHRzeCB0aXRsZT0iTG9hZGluZyBTdGF0ZXMiIGljb249InNwaW5uZXIiIGxpbmVzCmZ1bmN0aW9uIFN3YXBJbnRlcmZhY2UoKSB7CiAgY29uc3QgeyBhbnlzcGVuZFF1b3RlLCBpc0xvYWRpbmdBbnlzcGVuZFF1b3RlIH0gPSB1c2VBbnlzcGVuZFF1b3RlKHF1b3RlUmVxdWVzdCk7CiAgY29uc3QgeyBjcmVhdGVPcmRlciwgaXNDcmVhdGluZ09yZGVyIH0gPSB1c2VBbnlzcGVuZENyZWF0ZU9yZGVyKCk7CgogIGNvbnN0IGlzTG9hZGluZyA9IGlzTG9hZGluZ0FueXNwZW5kUXVvdGUgfHwgaXNDcmVhdGluZ09yZGVyOwoKICByZXR1cm4gKAogICAgPGRpdj4KICAgICAge2lzTG9hZGluZyAmJiA8TG9hZGluZ1NwaW5uZXIgLz59CiAgICAgIHsvKiBSZXN0IG9mIGNvbXBvbmVudCAqL30KICAgIDwvZGl2PgogICk7Cn0KYGBgCgojIyMgUmVhbC10aW1lIFVwZGF0ZXMgUGF0dGVybgoKYGBgdHN4IHRpdGxlPSJSZWFsLXRpbWUgVXBkYXRlcyIgaWNvbj0ic3luYy1hbHQiIGxpbmVzCmZ1bmN0aW9uIE9yZGVyU3RhdHVzKHsgb3JkZXJJZCB9OiB7IG9yZGVySWQ6IHN0cmluZyB9KSB7CiAgY29uc3QgeyBvcmRlckFuZFRyYW5zYWN0aW9ucyB9ID0gdXNlQW55c3BlbmRPcmRlckFuZFRyYW5zYWN0aW9ucyhvcmRlcklkKTsKCiAgLy8gQXV0by1yZWZyZXNoIGV2ZXJ5IDUgc2Vjb25kcyBmb3IgcGVuZGluZyBvcmRlcnMKICB1c2VFZmZlY3QoKCkgPT4gewogICAgaWYgKG9yZGVyQW5kVHJhbnNhY3Rpb25zPy5kYXRhLm9yZGVyLnN0YXR1cyA9PT0gInJlbGF5IikgewogICAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHsKICAgICAgICAvLyBSZWZldGNoIGlzIGhhbmRsZWQgYXV0b21hdGljYWxseSBieSB0aGUgaG9vawogICAgICB9LCA1MDAwKTsKCiAgICAgIHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKGludGVydmFsKTsKICAgIH0KICB9LCBbb3JkZXJBbmRUcmFuc2FjdGlvbnM/LmRhdGEub3JkZXIuc3RhdHVzXSk7CgogIC8vIENvbXBvbmVudCBpbXBsZW1lbnRhdGlvbi4uLgp9CmBgYAoKIyMgTmV4dCBTdGVwcwoKPENhcmRHcm91cCBjb2xzPXszfT4KPENhcmQgdGl0bGU9IlNlZSBFeGFtcGxlcyIgaWNvbj0iY29kZSIgaHJlZj0iL2FueXNwZW5kL2V4YW1wbGVzIj4KICBCcm93c2UgcmVhbC13b3JsZCBpbXBsZW1lbnRhdGlvbiBleGFtcGxlcwo8L0NhcmQ+Cgo8Q2FyZCB0aXRsZT0iRXJyb3IgSGFuZGxpbmciIGljb249ImJ1ZyIgaHJlZj0iL2FueXNwZW5kL2Vycm9yLWhhbmRsaW5nIj4KICBMZWFybiBjb21wcmVoZW5zaXZlIGVycm9yIGhhbmRsaW5nIHN0cmF0ZWdpZXMKPC9DYXJkPgoKPENhcmQgdGl0bGU9IkNvbXBvbmVudHMgUmVmZXJlbmNlIiBpY29uPSJwdXp6bGUtcGllY2UiIGhyZWY9Ii9hbnlzcGVuZC9jb21wb25lbnRzIj4KICBFeHBsb3JlIHByZS1idWlsdCBjb21wb25lbnRzCjwvQ2FyZD4KPC9DYXJkR3JvdXA+Cg==",
    "lastUpdated": "2025-09-03T03:14:57.627Z"
  },
  {
    "sourceFile": "anyspend/examples.mdx",
    "sourceHash": "CiMgRXhhbXBsZXMgJiBVc2UgQ2FzZXMKClJlYWwtd29ybGQgaW1wbGVtZW50YXRpb24gZXhhbXBsZXMgZm9yIGNvbW1vbiBBbnlTcGVuZCBpbnRlZ3JhdGlvbiBwYXR0ZXJucywgZnJvbSBzaW1wbGUgc3dhcHMgdG8gY29tcGxleCBEZUZpIGFuZCBnYW1pbmcgYXBwbGljYXRpb25zLgoKIyMg8J+UhCBDcm9zcy1DaGFpbiBUb2tlbiBTd2FwcwoKIyMjIEJhc2ljIFN3YXAgSW50ZXJmYWNlCgpQZXJmZWN0IGZvciBEZUZpIGFwcGxpY2F0aW9ucywgcG9ydGZvbGlvIG1hbmFnZXJzLCBvciBhbnkgYXBwIHRoYXQgbmVlZHMgdG9rZW4gZXhjaGFuZ2UgZnVuY3Rpb25hbGl0eS4KCmBgYHRzeCB0aXRsZT0iU2ltcGxlIFN3YXAgUGFnZSIgaWNvbj0iZXhjaGFuZ2UtYWx0IgppbXBvcnQgeyBBbnlTcGVuZCB9IGZyb20gIkBiM2RvdGZ1bi9zZGsvYW55c3BlbmQvcmVhY3QiOwoKZnVuY3Rpb24gVG9rZW5Td2FwUGFnZSgpIHsKICBjb25zdCBbdXNlckFkZHJlc3NdID0gdXNlV2FsbGV0KCk7IC8vIFlvdXIgd2FsbGV0IGhvb2sKCiAgcmV0dXJuICgKICAgIDxkaXYgY2xhc3NOYW1lPSJzd2FwLWNvbnRhaW5lciI+CiAgICAgIDxoMT5Td2FwIFRva2VuczwvaDE+CiAgICAgIDxBbnlTcGVuZAogICAgICAgIG1vZGU9InBhZ2UiCiAgICAgICAgcmVjaXBpZW50QWRkcmVzcz17dXNlckFkZHJlc3N9CiAgICAgICAgb25TdWNjZXNzPXsodHhIYXNoKSA9PiB7CiAgICAgICAgICAvLyBVcGRhdGUgdXNlcidzIHBvcnRmb2xpbwogICAgICAgICAgdG9hc3Quc3VjY2VzcygiU3dhcCBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5ISIpOwoKICAgICAgICAgIC8vIE9wdGlvbmFsOiBUcmFjayBhbmFseXRpY3MKICAgICAgICAgIGFuYWx5dGljcy50cmFjaygic3dhcF9jb21wbGV0ZWQiLCB7CiAgICAgICAgICAgIHR4SGFzaCwKICAgICAgICAgICAgdXNlckFkZHJlc3MsCiAgICAgICAgICB9KTsKCiAgICAgICAgICAvLyBSZWZyZXNoIHVzZXIgYmFsYW5jZXMKICAgICAgICAgIHF1ZXJ5Q2xpZW50LmludmFsaWRhdGVRdWVyaWVzKFsndXNlci1iYWxhbmNlcycsIHVzZXJBZGRyZXNzXSk7CiAgICAgICAgfX0KICAgICAgLz4KICAgIDwvZGl2PgogICk7Cn0KYGBgCgojIyMgQWR2YW5jZWQgU3dhcCB3aXRoIFF1b3RlIFByZXZpZXcKCmBgYHRzeCB0aXRsZT0iQWR2YW5jZWQgU3dhcCBJbnRlcmZhY2UiIGljb249ImNoYXJ0LWxpbmUiIGxpbmVzCmltcG9ydCB7IHVzZUFueXNwZW5kUXVvdGUsIEFueVNwZW5kIH0gZnJvbSAiQGIzZG90ZnVuL3Nkay9hbnlzcGVuZC9yZWFjdCI7CgpmdW5jdGlvbiBBZHZhbmNlZFN3YXBJbnRlcmZhY2UoKSB7CiAgY29uc3QgW2Zyb21Ub2tlbiwgc2V0RnJvbVRva2VuXSA9IHVzZVN0YXRlKFVTRENfRVRIRVJFVU0pOwogIGNvbnN0IFt0b1Rva2VuLCBzZXRUb1Rva2VuXSA9IHVzZVN0YXRlKEVUSF9CMyk7CiAgY29uc3QgW2Ftb3VudCwgc2V0QW1vdW50XSA9IHVzZVN0YXRlKCIxMDAiKTsKICBjb25zdCBbaXNTd2FwT3Blbiwgc2V0SXNTd2FwT3Blbl0gPSB1c2VTdGF0ZShmYWxzZSk7CgogIGNvbnN0IHF1b3RlUmVxdWVzdCA9IHVzZU1lbW8oKCkgPT4gKHsKICAgIHNyY0NoYWluOiBmcm9tVG9rZW4uY2hhaW5JZCwKICAgIGRzdENoYWluOiB0b1Rva2VuLmNoYWluSWQsCiAgICBzcmNUb2tlbkFkZHJlc3M6IGZyb21Ub2tlbi5hZGRyZXNzLAogICAgZHN0VG9rZW5BZGRyZXNzOiB0b1Rva2VuLmFkZHJlc3MsCiAgICB0eXBlOiAic3dhcCIgYXMgY29uc3QsCiAgICB0cmFkZVR5cGU6ICJFWEFDVF9JTlBVVCIgYXMgY29uc3QsCiAgICBhbW91bnQ6IHBhcnNlVW5pdHMoYW1vdW50IHx8ICIwIiwgZnJvbVRva2VuLmRlY2ltYWxzKS50b1N0cmluZygpLAogIH0pLCBbZnJvbVRva2VuLCB0b1Rva2VuLCBhbW91bnRdKTsKCiAgY29uc3QgeyBhbnlzcGVuZFF1b3RlLCBpc0xvYWRpbmdBbnlzcGVuZFF1b3RlIH0gPSB1c2VBbnlzcGVuZFF1b3RlKHF1b3RlUmVxdWVzdCk7CgogIHJldHVybiAoCiAgICA8ZGl2IGNsYXNzTmFtZT0iYWR2YW5jZWQtc3dhcCI+CiAgICAgIDxkaXYgY2xhc3NOYW1lPSJzd2FwLWZvcm0iPgogICAgICAgIDxUb2tlbklucHV0CiAgICAgICAgICBsYWJlbD0iRnJvbSIKICAgICAgICAgIHRva2VuPXtmcm9tVG9rZW59CiAgICAgICAgICBhbW91bnQ9e2Ftb3VudH0KICAgICAgICAgIG9uVG9rZW5DaGFuZ2U9e3NldEZyb21Ub2tlbn0KICAgICAgICAgIG9uQW1vdW50Q2hhbmdlPXtzZXRBbW91bnR9CiAgICAgICAgLz4KCiAgICAgICAgPFN3YXBBcnJvd0J1dHRvbiBvbkNsaWNrPXsoKSA9PiB7CiAgICAgICAgICBzZXRGcm9tVG9rZW4odG9Ub2tlbik7CiAgICAgICAgICBzZXRUb1Rva2VuKGZyb21Ub2tlbik7CiAgICAgICAgfX0gLz4KCiAgICAgICAgPFRva2VuSW5wdXQKICAgICAgICAgIGxhYmVsPSJUbyIKICAgICAgICAgIHRva2VuPXt0b1Rva2VufQogICAgICAgICAgYW1vdW50PXthbnlzcGVuZFF1b3RlPy5leHBlY3RlZE91dHB1dCB8fCAiMCJ9CiAgICAgICAgICBvblRva2VuQ2hhbmdlPXtzZXRUb1Rva2VufQogICAgICAgICAgcmVhZE9ubHkKICAgICAgICAvPgoKICAgICAgICB7YW55c3BlbmRRdW90ZSAmJiAoCiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0icXVvdGUtZGV0YWlscyI+CiAgICAgICAgICAgIDxkaXY+UmF0ZTogMSB7ZnJvbVRva2VuLnN5bWJvbH0gPSB7YW55c3BlbmRRdW90ZS5yYXRlfSB7dG9Ub2tlbi5zeW1ib2x9PC9kaXY+CiAgICAgICAgICAgIDxkaXY+TmV0d29yayBGZWU6ICR7YW55c3BlbmRRdW90ZS5uZXR3b3JrRmVlVXNkfTwvZGl2PgogICAgICAgICAgICA8ZGl2PlNlcnZpY2UgRmVlOiAke2FueXNwZW5kUXVvdGUuc2VydmljZUZlZVVzZH08L2Rpdj4KICAgICAgICAgICAgPGRpdj5Ub3RhbDogJHthbnlzcGVuZFF1b3RlLnRvdGFsVXNkQ29zdH08L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICl9CgogICAgICAgIDxidXR0b24KICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldElzU3dhcE9wZW4odHJ1ZSl9CiAgICAgICAgICBkaXNhYmxlZD17aXNMb2FkaW5nQW55c3BlbmRRdW90ZSB8fCAhYW55c3BlbmRRdW90ZX0KICAgICAgICAgIGNsYXNzTmFtZT0ic3dhcC1idXR0b24iCiAgICAgICAgPgogICAgICAgICAge2lzTG9hZGluZ0FueXNwZW5kUXVvdGUgPyAiR2V0dGluZyBRdW90ZS4uLiIgOiAiU3dhcCBUb2tlbnMifQogICAgICAgIDwvYnV0dG9uPgogICAgICA8L2Rpdj4KCiAgICAgIHtpc1N3YXBPcGVuICYmICgKICAgICAgICA8QW55U3BlbmQKICAgICAgICAgIG1vZGU9Im1vZGFsIgogICAgICAgICAgcmVjaXBpZW50QWRkcmVzcz17dXNlckFkZHJlc3N9CiAgICAgICAgICBkZXN0aW5hdGlvblRva2VuQWRkcmVzcz17dG9Ub2tlbi5hZGRyZXNzfQogICAgICAgICAgZGVzdGluYXRpb25Ub2tlbkNoYWluSWQ9e3RvVG9rZW4uY2hhaW5JZH0KICAgICAgICAgIG9uU3VjY2Vzcz17KCkgPT4gewogICAgICAgICAgICBzZXRJc1N3YXBPcGVuKGZhbHNlKTsKICAgICAgICAgICAgdG9hc3Quc3VjY2VzcygiU3dhcCBjb21wbGV0ZWQhIik7CiAgICAgICAgICB9fQogICAgICAgIC8+CiAgICAgICl9CiAgICA8L2Rpdj4KICApOwp9CmBgYAoKIyMg8J+WvO+4jyBORlQgTWFya2V0cGxhY2UgSW50ZWdyYXRpb24KCiMjIyBTaW1wbGUgTkZUIFB1cmNoYXNlCgpgYGB0c3ggdGl0bGU9Ik5GVCBDYXJkIENvbXBvbmVudCIgaWNvbj0iaW1hZ2UiIGxpbmVzCmltcG9ydCB7IEFueVNwZW5kTkZUQnV0dG9uIH0gZnJvbSAiQGIzZG90ZnVuL3Nkay9hbnlzcGVuZC9yZWFjdCI7CgpmdW5jdGlvbiBORlRDYXJkKHsgbmZ0IH06IHsgbmZ0OiBORlRMaXN0aW5nIH0pIHsKICBjb25zdCBbdXNlckFkZHJlc3NdID0gdXNlV2FsbGV0KCk7CiAgY29uc3QgW2lzT3duZWQsIHNldElzT3duZWRdID0gdXNlU3RhdGUoZmFsc2UpOwoKICBjb25zdCBuZnRDb250cmFjdCA9IHsKICAgIGNoYWluSWQ6IG5mdC5jaGFpbklkLAogICAgY29udHJhY3RBZGRyZXNzOiBuZnQuY29udHJhY3RBZGRyZXNzLAogICAgcHJpY2U6IG5mdC5wcmljZVdlaSwKICAgIHByaWNlRm9ybWF0dGVkOiBuZnQucHJpY2VGb3JtYXR0ZWQsCiAgICBjdXJyZW5jeTogbmZ0LmN1cnJlbmN5LAogICAgbmFtZTogbmZ0Lm5hbWUsCiAgICBkZXNjcmlwdGlvbjogbmZ0LmRlc2NyaXB0aW9uLAogICAgaW1hZ2VVcmw6IG5mdC5pbWFnZVVybCwKICB9OwoKICByZXR1cm4gKAogICAgPGRpdiBjbGFzc05hbWU9Im5mdC1jYXJkIj4KICAgICAgPGltZyBzcmM9e25mdC5pbWFnZVVybH0gYWx0PXtuZnQubmFtZX0gLz4KICAgICAgPGRpdiBjbGFzc05hbWU9Im5mdC1kZXRhaWxzIj4KICAgICAgICA8aDM+e25mdC5uYW1lfTwvaDM+CiAgICAgICAgPHA+e25mdC5kZXNjcmlwdGlvbn08L3A+CiAgICAgICAgPGRpdiBjbGFzc05hbWU9InByaWNlIj4KICAgICAgICAgIHtuZnQucHJpY2VGb3JtYXR0ZWR9IHtuZnQuY3VycmVuY3kuc3ltYm9sfQogICAgICAgIDwvZGl2PgoKICAgICAgICB7aXNPd25lZCA/ICgKICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSJvd25lZC1iYWRnZSI+4pyFIE93bmVkPC9kaXY+CiAgICAgICAgKSA6ICgKICAgICAgICAgIDxBbnlTcGVuZE5GVEJ1dHRvbgogICAgICAgICAgICBuZnRDb250cmFjdD17bmZ0Q29udHJhY3R9CiAgICAgICAgICAgIHJlY2lwaWVudEFkZHJlc3M9e3VzZXJBZGRyZXNzfQogICAgICAgICAgICBvblN1Y2Nlc3M9eyh0eEhhc2gpID0+IHsKICAgICAgICAgICAgICBzZXRJc093bmVkKHRydWUpOwoKICAgICAgICAgICAgICAvLyBVcGRhdGUgdXNlcidzIE5GVCBjb2xsZWN0aW9uCiAgICAgICAgICAgICAgcXVlcnlDbGllbnQuaW52YWxpZGF0ZVF1ZXJpZXMoWyd1c2VyLW5mdHMnLCB1c2VyQWRkcmVzc10pOwoKICAgICAgICAgICAgICAvLyBTaG93IHN1Y2Nlc3MgbWVzc2FnZSB3aXRoIGV4cGxvcmVyIGxpbmsKICAgICAgICAgICAgICB0b2FzdC5zdWNjZXNzKAogICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgTkZUIHB1cmNoYXNlZCBzdWNjZXNzZnVsbHkhCiAgICAgICAgICAgICAgICAgIDxhIGhyZWY9e2BodHRwczovL2V4cGxvcmVyLmIzLmZ1bi90eC8ke3R4SGFzaH1gfSB0YXJnZXQ9Il9ibGFuayI+CiAgICAgICAgICAgICAgICAgICAgVmlldyBUcmFuc2FjdGlvbgogICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICApOwogICAgICAgICAgICB9fQogICAgICAgICAgLz4KICAgICAgICApfQogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICk7Cn0KYGBgCgojIyMgTkZUIE1hcmtldHBsYWNlIHdpdGggQnVsayBQdXJjaGFzZQoKYGBgdHN4IHRpdGxlPSJCdWxrIE5GVCBQdXJjaGFzZSIgaWNvbj0ic2hvcHBpbmctY2FydCIgbGluZXMKZnVuY3Rpb24gTkZUTWFya2V0cGxhY2UoKSB7CiAgY29uc3QgW3NlbGVjdGVkTkZUcywgc2V0U2VsZWN0ZWRORlRzXSA9IHVzZVN0YXRlPE5GVExpc3RpbmdbXT4oW10pOwogIGNvbnN0IFt1c2VyQWRkcmVzc10gPSB1c2VXYWxsZXQoKTsKCiAgY29uc3QgaGFuZGxlQnVsa1B1cmNoYXNlID0gKCkgPT4gewogICAgLy8gRm9yIGJ1bGsgcHVyY2hhc2VzLCBjcmVhdGUgbXVsdGlwbGUgb3JkZXJzIG9yIHVzZSBiYXRjaCBjb250cmFjdAogICAgc2VsZWN0ZWRORlRzLmZvckVhY2goKG5mdCwgaW5kZXgpID0+IHsKICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgLy8gU3RhZ2dlciBwdXJjaGFzZXMgdG8gYXZvaWQgcmF0ZSBsaW1pdGluZwogICAgICAgIGNyZWF0ZVNpbmdsZU5GVFB1cmNoYXNlKG5mdCk7CiAgICAgIH0sIGluZGV4ICogMTAwMCk7CiAgICB9KTsKICB9OwoKICByZXR1cm4gKAogICAgPGRpdiBjbGFzc05hbWU9Im1hcmtldHBsYWNlIj4KICAgICAgPGRpdiBjbGFzc05hbWU9Im5mdC1ncmlkIj4KICAgICAgICB7bmZ0cy5tYXAoKG5mdCkgPT4gKAogICAgICAgICAgPE5GVENhcmQKICAgICAgICAgICAga2V5PXtuZnQuaWR9CiAgICAgICAgICAgIG5mdD17bmZ0fQogICAgICAgICAgICBvblNlbGVjdD17KHNlbGVjdGVkKSA9PiB7CiAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkKSB7CiAgICAgICAgICAgICAgICBzZXRTZWxlY3RlZE5GVHMoWy4uLnNlbGVjdGVkTkZUcywgbmZ0XSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHNldFNlbGVjdGVkTkZUcyhzZWxlY3RlZE5GVHMuZmlsdGVyKG4gPT4gbi5pZCAhPT0gbmZ0LmlkKSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9fQogICAgICAgICAgLz4KICAgICAgICApKX0KICAgICAgPC9kaXY+CgogICAgICB7c2VsZWN0ZWRORlRzLmxlbmd0aCA+IDAgJiYgKAogICAgICAgIDxkaXYgY2xhc3NOYW1lPSJidWxrLXB1cmNoYXNlIj4KICAgICAgICAgIDxwPlNlbGVjdGVkOiB7c2VsZWN0ZWRORlRzLmxlbmd0aH0gTkZUczwvcD4KICAgICAgICAgIDxwPlRvdGFsOiB7Y2FsY3VsYXRlVG90YWwoc2VsZWN0ZWRORlRzKX0gRVRIPC9wPgogICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtoYW5kbGVCdWxrUHVyY2hhc2V9PgogICAgICAgICAgICBQdXJjaGFzZSBTZWxlY3RlZCBORlRzCiAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICA8L2Rpdj4KICAgICAgKX0KICAgIDwvZGl2PgogICk7Cn0KYGBgCgojIyDwn46uIEdhbWluZyAmIERlRmkgQXBwbGljYXRpb25zCgojIyMgU3Rha2luZyBJbnRlcmZhY2UKCmBgYHRzeCB0aXRsZT0iU3Rha2luZyBQb29sIENvbXBvbmVudCIgaWNvbj0iY29pbnMiIGxpbmVzCmltcG9ydCB7IEFueVNwZW5kQ3VzdG9tIH0gZnJvbSAiQGIzZG90ZnVuL3Nkay9hbnlzcGVuZC9yZWFjdCI7CmltcG9ydCB7IGVuY29kZUZ1bmN0aW9uRGF0YSB9IGZyb20gInZpZW0iOwoKZnVuY3Rpb24gU3Rha2luZ1Bvb2woeyBwb29sIH06IHsgcG9vbDogU3Rha2luZ1Bvb2wgfSkgewogIGNvbnN0IFtzdGFrZUFtb3VudCwgc2V0U3Rha2VBbW91bnRdID0gdXNlU3RhdGUoIiIpOwogIGNvbnN0IFtzdGFraW5nRHVyYXRpb24sIHNldFN0YWtpbmdEdXJhdGlvbl0gPSB1c2VTdGF0ZSgzMCk7CiAgY29uc3QgW3VzZXJBZGRyZXNzXSA9IHVzZVdhbGxldCgpOwoKICBjb25zdCBzdGFraW5nQ2FsbGRhdGEgPSB1c2VNZW1vKCgpID0+IHsKICAgIGlmICghc3Rha2VBbW91bnQpIHJldHVybiAiMHgiOwoKICAgIGNvbnN0IGFtb3VudFdlaSA9IHBhcnNlVW5pdHMoc3Rha2VBbW91bnQsIHBvb2wudG9rZW4uZGVjaW1hbHMpOwoKICAgIHJldHVybiBlbmNvZGVGdW5jdGlvbkRhdGEoewogICAgICBhYmk6IHN0YWtpbmdQb29sQUJJLAogICAgICBmdW5jdGlvbk5hbWU6ICJzdGFrZSIsCiAgICAgIGFyZ3M6IFthbW91bnRXZWksIHN0YWtpbmdEdXJhdGlvbiAqIDI0ICogNjAgKiA2MF0sIC8vIGR1cmF0aW9uIGluIHNlY29uZHMKICAgIH0pOwogIH0sIFtzdGFrZUFtb3VudCwgc3Rha2luZ0R1cmF0aW9uXSk7CgogIGNvbnN0IGV4cGVjdGVkUmV3YXJkcyA9IHVzZU1lbW8oKCkgPT4gewogICAgaWYgKCFzdGFrZUFtb3VudCkgcmV0dXJuICIwIjsKICAgIGNvbnN0IGFtb3VudCA9IHBhcnNlRmxvYXQoc3Rha2VBbW91bnQpOwogICAgY29uc3QgYXB5ID0gcG9vbC5hcHkgLyAxMDA7CiAgICBjb25zdCBkdXJhdGlvbkluWWVhcnMgPSBzdGFraW5nRHVyYXRpb24gLyAzNjU7CiAgICByZXR1cm4gKGFtb3VudCAqIGFweSAqIGR1cmF0aW9uSW5ZZWFycykudG9GaXhlZCg0KTsKICB9LCBbc3Rha2VBbW91bnQsIHN0YWtpbmdEdXJhdGlvbiwgcG9vbC5hcHldKTsKCiAgcmV0dXJuICgKICAgIDxkaXYgY2xhc3NOYW1lPSJzdGFraW5nLXBvb2wiPgogICAgICA8ZGl2IGNsYXNzTmFtZT0icG9vbC1pbmZvIj4KICAgICAgICA8aDI+e3Bvb2wubmFtZX08L2gyPgogICAgICAgIDxwPkFQWToge3Bvb2wuYXB5fSU8L3A+CiAgICAgICAgPHA+VFZMOiAke3Bvb2wudG90YWxWYWx1ZUxvY2tlZC50b0xvY2FsZVN0cmluZygpfTwvcD4KICAgICAgPC9kaXY+CgogICAgICA8ZGl2IGNsYXNzTmFtZT0ic3Rha2UtZm9ybSI+CiAgICAgICAgPGRpdiBjbGFzc05hbWU9ImlucHV0LWdyb3VwIj4KICAgICAgICAgIDxsYWJlbD5BbW91bnQgdG8gc3Rha2U8L2xhYmVsPgogICAgICAgICAgPGlucHV0CiAgICAgICAgICAgIHR5cGU9Im51bWJlciIKICAgICAgICAgICAgdmFsdWU9e3N0YWtlQW1vdW50fQogICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldFN0YWtlQW1vdW50KGUudGFyZ2V0LnZhbHVlKX0KICAgICAgICAgICAgcGxhY2Vob2xkZXI9IjAuMCIKICAgICAgICAgIC8+CiAgICAgICAgICA8c3Bhbj57cG9vbC50b2tlbi5zeW1ib2x9PC9zcGFuPgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzTmFtZT0iaW5wdXQtZ3JvdXAiPgogICAgICAgICAgPGxhYmVsPlN0YWtpbmcgRHVyYXRpb248L2xhYmVsPgogICAgICAgICAgPHNlbGVjdAogICAgICAgICAgICB2YWx1ZT17c3Rha2luZ0R1cmF0aW9ufQogICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldFN0YWtpbmdEdXJhdGlvbihOdW1iZXIoZS50YXJnZXQudmFsdWUpKX0KICAgICAgICAgID4KICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT17N30+NyBkYXlzICgyJSBBUFkpPC9vcHRpb24+CiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ezMwfT4zMCBkYXlzICg1JSBBUFkpPC9vcHRpb24+CiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ezkwfT45MCBkYXlzICg4JSBBUFkpPC9vcHRpb24+CiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ezM2NX0+MSB5ZWFyICgxMiUgQVBZKTwvb3B0aW9uPgogICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3NOYW1lPSJyZXdhcmRzLXByZXZpZXciPgogICAgICAgICAgPHA+RXhwZWN0ZWQgcmV3YXJkczoge2V4cGVjdGVkUmV3YXJkc30ge3Bvb2wudG9rZW4uc3ltYm9sfTwvcD4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPEFueVNwZW5kQ3VzdG9tCiAgICAgICAgICBvcmRlclR5cGU9ImN1c3RvbSIKICAgICAgICAgIGRzdENoYWluSWQ9e3Bvb2wuY2hhaW5JZH0KICAgICAgICAgIGRzdFRva2VuPXtwb29sLnRva2VufQogICAgICAgICAgZHN0QW1vdW50PXtwYXJzZVVuaXRzKHN0YWtlQW1vdW50IHx8ICIwIiwgcG9vbC50b2tlbi5kZWNpbWFscykudG9TdHJpbmcoKX0KICAgICAgICAgIGNvbnRyYWN0QWRkcmVzcz17cG9vbC5jb250cmFjdEFkZHJlc3N9CiAgICAgICAgICBlbmNvZGVkRGF0YT17c3Rha2luZ0NhbGxkYXRhfQogICAgICAgICAgbWV0YWRhdGE9e3sKICAgICAgICAgICAgYWN0aW9uOiAic3Rha2UiLAogICAgICAgICAgICBwb29sSWQ6IHBvb2wuaWQsCiAgICAgICAgICAgIGR1cmF0aW9uOiBzdGFraW5nRHVyYXRpb24sCiAgICAgICAgICAgIGV4cGVjdGVkUmV3YXJkcywKICAgICAgICAgIH19CiAgICAgICAgICBoZWFkZXI9eyh7IGFueXNwZW5kUHJpY2UsIGlzTG9hZGluZ0FueXNwZW5kUHJpY2UgfSkgPT4gKAogICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ic3Rha2luZy1oZWFkZXIiPgogICAgICAgICAgICAgIDxoMz5TdGFrZSB7cG9vbC50b2tlbi5zeW1ib2x9PC9oMz4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ic3Rha2Utc3VtbWFyeSI+CiAgICAgICAgICAgICAgICA8ZGl2PkFtb3VudDoge3N0YWtlQW1vdW50fSB7cG9vbC50b2tlbi5zeW1ib2x9PC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2PkR1cmF0aW9uOiB7c3Rha2luZ0R1cmF0aW9ufSBkYXlzPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2PkV4cGVjdGVkIHJld2FyZHM6IHtleHBlY3RlZFJld2FyZHN9IHtwb29sLnRva2VuLnN5bWJvbH08L2Rpdj4KICAgICAgICAgICAgICAgIHthbnlzcGVuZFByaWNlICYmICgKICAgICAgICAgICAgICAgICAgPGRpdj5Ub3RhbCBjb3N0OiAke2FueXNwZW5kUHJpY2UudG90YWxVc2RDb3N0fTwvZGl2PgogICAgICAgICAgICAgICAgKX0KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICApfQogICAgICAgICAgb25TdWNjZXNzPXsodHhIYXNoKSA9PiB7CiAgICAgICAgICAgIHRvYXN0LnN1Y2Nlc3MoIlN0YWtpbmcgc3VjY2Vzc2Z1bCEiKTsKCiAgICAgICAgICAgIC8vIFVwZGF0ZSB1c2VyJ3Mgc3Rha2luZyBwb3NpdGlvbnMKICAgICAgICAgICAgcXVlcnlDbGllbnQuaW52YWxpZGF0ZVF1ZXJpZXMoWydzdGFraW5nLXBvc2l0aW9ucycsIHVzZXJBZGRyZXNzXSk7CgogICAgICAgICAgICAvLyBSZXNldCBmb3JtCiAgICAgICAgICAgIHNldFN0YWtlQW1vdW50KCIiKTsKICAgICAgICAgIH19CiAgICAgICAgLz4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICApOwp9CmBgYAoKIyMjIEdhbWluZyBTcGluIFdoZWVsCgpgYGB0c3ggdGl0bGU9IlNwaW4gV2hlZWwgR2FtZSIgaWNvbj0iZ2FtZXBhZCIgbGluZXMKaW1wb3J0IHsgQW55U3BlbmRCdXlTcGluIH0gZnJvbSAiQGIzZG90ZnVuL3Nkay9hbnlzcGVuZC9yZWFjdCI7CgpmdW5jdGlvbiBTcGluV2hlZWwoeyBnYW1lIH06IHsgZ2FtZTogR2FtZUNvbmZpZyB9KSB7CiAgY29uc3QgW3VzZXJBZGRyZXNzXSA9IHVzZVdhbGxldCgpOwogIGNvbnN0IFtzcGluSGlzdG9yeSwgc2V0U3Bpbkhpc3RvcnldID0gdXNlU3RhdGU8U3BpblJlc3VsdFtdPihbXSk7CgogIHJldHVybiAoCiAgICA8ZGl2IGNsYXNzTmFtZT0ic3Bpbi1nYW1lIj4KICAgICAgPGRpdiBjbGFzc05hbWU9IndoZWVsLWNvbnRhaW5lciI+CiAgICAgICAgPFNwaW5XaGVlbFZpc3VhbCBwcml6ZXM9e2dhbWUucHJpemVzfSAvPgogICAgICA8L2Rpdj4KCiAgICAgIDxkaXYgY2xhc3NOYW1lPSJnYW1lLWluZm8iPgogICAgICAgIDxoMj57Z2FtZS5uYW1lfTwvaDI+CiAgICAgICAgPHA+Q29zdCBwZXIgc3Bpbjoge2dhbWUuc3BpbkNvc3R9IHtnYW1lLmN1cnJlbmN5LnN5bWJvbH08L3A+CiAgICAgICAgPGRpdiBjbGFzc05hbWU9InByaXplcyI+CiAgICAgICAgICA8aDM+UG9zc2libGUgUHJpemVzOjwvaDM+CiAgICAgICAgICB7Z2FtZS5wcml6ZXMubWFwKChwcml6ZSwgaW5kZXgpID0+ICgKICAgICAgICAgICAgPGRpdiBrZXk9e2luZGV4fSBjbGFzc05hbWU9InByaXplIj4KICAgICAgICAgICAgICA8c3Bhbj57cHJpemUubmFtZX08L3NwYW4+CiAgICAgICAgICAgICAgPHNwYW4+e3ByaXplLnByb2JhYmlsaXR5fSUgY2hhbmNlPC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICkpfQogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KCiAgICAgIDxBbnlTcGVuZEJ1eVNwaW4KICAgICAgICBnYW1lQ29udHJhY3Q9e2dhbWUuY29udHJhY3RBZGRyZXNzfQogICAgICAgIHNwaW5QcmljZT17Z2FtZS5zcGluQ29zdFdlaX0KICAgICAgICByZWNpcGllbnRBZGRyZXNzPXt1c2VyQWRkcmVzc30KICAgICAgICBvblN1Y2Nlc3M9eyh0eEhhc2gpID0+IHsKICAgICAgICAgIC8vIEhhbmRsZSBzcGluIHJlc3VsdAogICAgICAgICAgZmV0Y2hTcGluUmVzdWx0KHR4SGFzaCkudGhlbigocmVzdWx0KSA9PiB7CiAgICAgICAgICAgIHNldFNwaW5IaXN0b3J5KFtyZXN1bHQsIC4uLnNwaW5IaXN0b3J5XSk7CgogICAgICAgICAgICBpZiAocmVzdWx0LmlzV2lubmVyKSB7CiAgICAgICAgICAgICAgdG9hc3Quc3VjY2VzcyhgWW91IHdvbiAke3Jlc3VsdC5wcml6ZX0hIPCfjolgKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0b2FzdC5pbmZvKCJCZXR0ZXIgbHVjayBuZXh0IHRpbWUhIik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH19CiAgICAgIC8+CgogICAgICA8ZGl2IGNsYXNzTmFtZT0ic3Bpbi1oaXN0b3J5Ij4KICAgICAgICA8aDM+UmVjZW50IFNwaW5zPC9oMz4KICAgICAgICB7c3Bpbkhpc3RvcnkubWFwKChzcGluLCBpbmRleCkgPT4gKAogICAgICAgICAgPGRpdiBrZXk9e2luZGV4fSBjbGFzc05hbWU9e2BzcGluLXJlc3VsdCAke3NwaW4uaXNXaW5uZXIgPyAnd2lubmVyJyA6ICcnfWB9PgogICAgICAgICAgICA8c3Bhbj57c3Bpbi5wcml6ZSB8fCAiTm8gcHJpemUifTwvc3Bhbj4KICAgICAgICAgICAgPHNwYW4+e25ldyBEYXRlKHNwaW4udGltZXN0YW1wKS50b0xvY2FsZVRpbWVTdHJpbmcoKX08L3NwYW4+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICApKX0KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICApOwp9CmBgYAoKIyMjIFRvdXJuYW1lbnQgRW50cnkKCmBgYHRzeCB0aXRsZT0iVG91cm5hbWVudCBFbnRyeSIgaWNvbj0idHJvcGh5IiBsaW5lcwppbXBvcnQgeyBBbnlTcGVuZFRvdXJuYW1lbnQgfSBmcm9tICJAYjNkb3RmdW4vc2RrL2FueXNwZW5kL3JlYWN0IjsKCmZ1bmN0aW9uIFRvdXJuYW1lbnRFbnRyeSh7IHRvdXJuYW1lbnQgfTogeyB0b3VybmFtZW50OiBUb3VybmFtZW50IH0pIHsKICBjb25zdCBbdXNlckFkZHJlc3NdID0gdXNlV2FsbGV0KCk7CiAgY29uc3QgW2lzUmVnaXN0ZXJlZCwgc2V0SXNSZWdpc3RlcmVkXSA9IHVzZVN0YXRlKGZhbHNlKTsKCiAgcmV0dXJuICgKICAgIDxkaXYgY2xhc3NOYW1lPSJ0b3VybmFtZW50LWVudHJ5Ij4KICAgICAgPGRpdiBjbGFzc05hbWU9InRvdXJuYW1lbnQtaW5mbyI+CiAgICAgICAgPGgyPnt0b3VybmFtZW50Lm5hbWV9PC9oMj4KICAgICAgICA8cD5Qcml6ZSBQb29sOiAke3RvdXJuYW1lbnQucHJpemVQb29sLnRvTG9jYWxlU3RyaW5nKCl9PC9wPgogICAgICAgIDxwPkVudHJ5IEZlZToge3RvdXJuYW1lbnQuZW50cnlGZWV9IHt0b3VybmFtZW50LmN1cnJlbmN5LnN5bWJvbH08L3A+CiAgICAgICAgPHA+UGxheWVyczoge3RvdXJuYW1lbnQuY3VycmVudFBsYXllcnN9L3t0b3VybmFtZW50Lm1heFBsYXllcnN9PC9wPgogICAgICAgIDxwPlN0YXJ0czoge25ldyBEYXRlKHRvdXJuYW1lbnQuc3RhcnRUaW1lKS50b0xvY2FsZVN0cmluZygpfTwvcD4KICAgICAgPC9kaXY+CgogICAgICB7aXNSZWdpc3RlcmVkID8gKAogICAgICAgIDxkaXYgY2xhc3NOYW1lPSJyZWdpc3RlcmVkIj4KICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0iY2hlY2staWNvbiI+4pyFPC9zcGFuPgogICAgICAgICAgPHNwYW4+WW91J3JlIHJlZ2lzdGVyZWQhPC9zcGFuPgogICAgICAgICAgPHA+VG91cm5hbWVudCBzdGFydHMge2Zvcm1hdFRpbWVVbnRpbCh0b3VybmFtZW50LnN0YXJ0VGltZSl9PC9wPgogICAgICAgIDwvZGl2PgogICAgICApIDogKAogICAgICAgIDxBbnlTcGVuZFRvdXJuYW1lbnQKICAgICAgICAgIHRvdXJuYW1lbnRJZD17dG91cm5hbWVudC5pZH0KICAgICAgICAgIGVudHJ5RmVlPXt0b3VybmFtZW50LmVudHJ5RmVlV2VpfQogICAgICAgICAgcmVjaXBpZW50QWRkcmVzcz17dXNlckFkZHJlc3N9CiAgICAgICAgICBvblN1Y2Nlc3M9eyh0eEhhc2gpID0+IHsKICAgICAgICAgICAgc2V0SXNSZWdpc3RlcmVkKHRydWUpOwoKICAgICAgICAgICAgLy8gVXBkYXRlIHRvdXJuYW1lbnQgcGxheWVyIGNvdW50CiAgICAgICAgICAgIHF1ZXJ5Q2xpZW50LmludmFsaWRhdGVRdWVyaWVzKFsndG91cm5hbWVudCcsIHRvdXJuYW1lbnQuaWRdKTsKCiAgICAgICAgICAgIHRvYXN0LnN1Y2Nlc3MoIlN1Y2Nlc3NmdWxseSByZWdpc3RlcmVkIGZvciB0b3VybmFtZW50ISIpOwogICAgICAgICAgfX0KICAgICAgICAvPgogICAgICApfQoKICAgICAgPGRpdiBjbGFzc05hbWU9InRvdXJuYW1lbnQtcnVsZXMiPgogICAgICAgIDxoMz5SdWxlczwvaDM+CiAgICAgICAgPHVsPgogICAgICAgICAge3RvdXJuYW1lbnQucnVsZXMubWFwKChydWxlLCBpbmRleCkgPT4gKAogICAgICAgICAgICA8bGkga2V5PXtpbmRleH0+e3J1bGV9PC9saT4KICAgICAgICAgICkpfQogICAgICAgIDwvdWw+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgKTsKfQpgYGAKCiMjIPCfkrAgRmlhdC10by1DcnlwdG8gT25yYW1wCgojIyMgU2ltcGxlIE9uYm9hcmRpbmcgRmxvdwoKYGBgdHN4IHRpdGxlPSJVc2VyIE9uYm9hcmRpbmciIGljb249ImNyZWRpdC1jYXJkIiBsaW5lcwpmdW5jdGlvbiBVc2VyT25ib2FyZGluZygpIHsKICBjb25zdCBbc3RlcCwgc2V0U3RlcF0gPSB1c2VTdGF0ZSgxKTsKICBjb25zdCBbdXNlckFkZHJlc3NdID0gdXNlV2FsbGV0KCk7CgogIHJldHVybiAoCiAgICA8ZGl2IGNsYXNzTmFtZT0ib25ib2FyZGluZyI+CiAgICAgIDxkaXYgY2xhc3NOYW1lPSJwcm9ncmVzcy1iYXIiPgogICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgc3RlcCAke3N0ZXAgPj0gMSA/ICdhY3RpdmUnIDogJyd9YH0+MS4gQ29ubmVjdCBXYWxsZXQ8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YHN0ZXAgJHtzdGVwID49IDIgPyAnYWN0aXZlJyA6ICcnfWB9PjIuIEJ1eSBDcnlwdG88L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YHN0ZXAgJHtzdGVwID49IDMgPyAnYWN0aXZlJyA6ICcnfWB9PjMuIFN0YXJ0IFVzaW5nPC9kaXY+CiAgICAgIDwvZGl2PgoKICAgICAge3N0ZXAgPT09IDEgJiYgKAogICAgICAgIDxkaXYgY2xhc3NOYW1lPSJzdGVwLWNvbnRlbnQiPgogICAgICAgICAgPGgyPldlbGNvbWUhIExldCdzIGdldCB5b3Ugc3RhcnRlZDwvaDI+CiAgICAgICAgICA8cD5GaXJzdCwgY29ubmVjdCB5b3VyIHdhbGxldCB0byBjb250aW51ZS48L3A+CiAgICAgICAgICA8V2FsbGV0Q29ubmVjdEJ1dHRvbiBvbkNvbm5lY3Q9eygpID0+IHNldFN0ZXAoMil9IC8+CiAgICAgICAgPC9kaXY+CiAgICAgICl9CgogICAgICB7c3RlcCA9PT0gMiAmJiAoCiAgICAgICAgPGRpdiBjbGFzc05hbWU9InN0ZXAtY29udGVudCI+CiAgICAgICAgICA8aDI+QnV5IHlvdXIgZmlyc3QgY3J5cHRvPC9oMj4KICAgICAgICAgIDxwPlB1cmNoYXNlIHRva2VucyB3aXRoIHlvdXIgY3JlZGl0IGNhcmQgdG8gZ2V0IHN0YXJ0ZWQuPC9wPgoKICAgICAgICAgIDxBbnlTcGVuZAogICAgICAgICAgICBtb2RlPSJwYWdlIgogICAgICAgICAgICBkZWZhdWx0QWN0aXZlVGFiPSJmaWF0IgogICAgICAgICAgICBkZXN0aW5hdGlvblRva2VuQWRkcmVzcz0iMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwIiAvLyBFVEgKICAgICAgICAgICAgZGVzdGluYXRpb25Ub2tlbkNoYWluSWQ9ezgzMzN9IC8vIEIzCiAgICAgICAgICAgIHJlY2lwaWVudEFkZHJlc3M9e3VzZXJBZGRyZXNzfQogICAgICAgICAgICBvblN1Y2Nlc3M9eygpID0+IHsKICAgICAgICAgICAgICBzZXRTdGVwKDMpOwogICAgICAgICAgICAgIHRvYXN0LnN1Y2Nlc3MoIlB1cmNoYXNlIHN1Y2Nlc3NmdWwhIFdlbGNvbWUgdG8gdGhlIGVjb3N5c3RlbSEiKTsKICAgICAgICAgICAgfX0KICAgICAgICAgIC8+CiAgICAgICAgPC9kaXY+CiAgICAgICl9CgogICAgICB7c3RlcCA9PT0gMyAmJiAoCiAgICAgICAgPGRpdiBjbGFzc05hbWU9InN0ZXAtY29udGVudCI+CiAgICAgICAgICA8aDI+WW91J3JlIGFsbCBzZXQhIPCfjok8L2gyPgogICAgICAgICAgPHA+WW91ciBjcnlwdG8gcHVyY2hhc2UgaXMgY29tcGxldGUuIEhlcmUncyB3aGF0IHlvdSBjYW4gZG8gbmV4dDo8L3A+CgogICAgICAgICAgPGRpdiBjbGFzc05hbWU9Im5leHQtYWN0aW9ucyI+CiAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gcm91dGVyLnB1c2goJy9leHBsb3JlJyl9PgogICAgICAgICAgICAgIEV4cGxvcmUgdGhlIFBsYXRmb3JtCiAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHJvdXRlci5wdXNoKCcvcG9ydGZvbGlvJyl9PgogICAgICAgICAgICAgIFZpZXcgWW91ciBQb3J0Zm9saW8KICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgKX0KICAgIDwvZGl2PgogICk7Cn0KYGBgCgojIyDwn5uSIEUtY29tbWVyY2UgSW50ZWdyYXRpb24KCiMjIyBDcnlwdG8gQ2hlY2tvdXQKCmBgYHRzeCB0aXRsZT0iQ2hlY2tvdXQgUHJvY2VzcyIgaWNvbj0ic2hvcHBpbmctY2FydCIgbGluZXMKZnVuY3Rpb24gQ3J5cHRvQ2hlY2tvdXQoeyBjYXJ0IH06IHsgY2FydDogQ2FydEl0ZW1bXSB9KSB7CiAgY29uc3QgW3BheW1lbnRNZXRob2QsIHNldFBheW1lbnRNZXRob2RdID0gdXNlU3RhdGU8J2NyeXB0bycgfCAnZmlhdCc+KCdjcnlwdG8nKTsKICBjb25zdCBbdXNlckFkZHJlc3NdID0gdXNlV2FsbGV0KCk7CgogIGNvbnN0IHRvdGFsID0gY2FydC5yZWR1Y2UoKHN1bSwgaXRlbSkgPT4gc3VtICsgaXRlbS5wcmljZSwgMCk7CgogIHJldHVybiAoCiAgICA8ZGl2IGNsYXNzTmFtZT0iY2hlY2tvdXQiPgogICAgICA8ZGl2IGNsYXNzTmFtZT0ib3JkZXItc3VtbWFyeSI+CiAgICAgICAgPGgyPk9yZGVyIFN1bW1hcnk8L2gyPgogICAgICAgIHtjYXJ0Lm1hcCgoaXRlbSkgPT4gKAogICAgICAgICAgPGRpdiBrZXk9e2l0ZW0uaWR9IGNsYXNzTmFtZT0iY2FydC1pdGVtIj4KICAgICAgICAgICAgPHNwYW4+e2l0ZW0ubmFtZX08L3NwYW4+CiAgICAgICAgICAgIDxzcGFuPiR7aXRlbS5wcmljZX08L3NwYW4+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICApKX0KICAgICAgICA8ZGl2IGNsYXNzTmFtZT0idG90YWwiPgogICAgICAgICAgPHN0cm9uZz5Ub3RhbDogJHt0b3RhbH08L3N0cm9uZz4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CgogICAgICA8ZGl2IGNsYXNzTmFtZT0icGF5bWVudC1zZWN0aW9uIj4KICAgICAgICA8aDI+UGF5bWVudCBNZXRob2Q8L2gyPgoKICAgICAgICA8ZGl2IGNsYXNzTmFtZT0icGF5bWVudC1vcHRpb25zIj4KICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgY2xhc3NOYW1lPXtwYXltZW50TWV0aG9kID09PSAnY3J5cHRvJyA/ICdhY3RpdmUnIDogJyd9CiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFBheW1lbnRNZXRob2QoJ2NyeXB0bycpfQogICAgICAgICAgPgogICAgICAgICAgICBQYXkgd2l0aCBDcnlwdG8KICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICBjbGFzc05hbWU9e3BheW1lbnRNZXRob2QgPT09ICdmaWF0JyA/ICdhY3RpdmUnIDogJyd9CiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFBheW1lbnRNZXRob2QoJ2ZpYXQnKX0KICAgICAgICAgID4KICAgICAgICAgICAgUGF5IHdpdGggQ2FyZAogICAgICAgICAgPC9idXR0b24+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxBbnlTcGVuZAogICAgICAgICAgbW9kZT0icGFnZSIKICAgICAgICAgIGRlZmF1bHRBY3RpdmVUYWI9e3BheW1lbnRNZXRob2R9CiAgICAgICAgICBkZXN0aW5hdGlvblRva2VuQWRkcmVzcz0iMHhBMGI4NmEzM0U2RmI2RGQ5YTlCM2Q4QjVGRWIyYjNDOGU3RDlGZjFFIiAvLyBVU0RDCiAgICAgICAgICBkZXN0aW5hdGlvblRva2VuQ2hhaW5JZD17ODMzM30KICAgICAgICAgIHJlY2lwaWVudEFkZHJlc3M9e01FUkNIQU5UX0FERFJFU1N9CiAgICAgICAgICBvblN1Y2Nlc3M9eyh0eEhhc2gpID0+IHsKICAgICAgICAgICAgLy8gQ3JlYXRlIG9yZGVyIHJlY29yZAogICAgICAgICAgICBjcmVhdGVPcmRlcih7CiAgICAgICAgICAgICAgaXRlbXM6IGNhcnQsCiAgICAgICAgICAgICAgdG90YWwsCiAgICAgICAgICAgICAgcGF5bWVudFR4SGFzaDogdHhIYXNoLAogICAgICAgICAgICAgIGN1c3RvbWVyQWRkcmVzczogdXNlckFkZHJlc3MsCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgLy8gQ2xlYXIgY2FydCBhbmQgcmVkaXJlY3QKICAgICAgICAgICAgY2xlYXJDYXJ0KCk7CiAgICAgICAgICAgIHJvdXRlci5wdXNoKGAvb3JkZXItY29uZmlybWF0aW9uP3R4PSR7dHhIYXNofWApOwogICAgICAgICAgfX0KICAgICAgICAvPgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICk7Cn0KYGBgCgojIyDwn46vIEFkdmFuY2VkIFBhdHRlcm5zCgojIyMgTXVsdGktQ2hhaW4gUG9ydGZvbGlvIFJlYmFsYW5jaW5nCgpgYGB0c3ggdGl0bGU9IlBvcnRmb2xpbyBSZWJhbGFuY2luZyIgaWNvbj0iYmFsYW5jZS1zY2FsZSIgbGluZXMKZnVuY3Rpb24gUG9ydGZvbGlvUmViYWxhbmNlcigpIHsKICBjb25zdCBbdXNlckFkZHJlc3NdID0gdXNlV2FsbGV0KCk7CiAgY29uc3QgW3RhcmdldEFsbG9jYXRpb25zLCBzZXRUYXJnZXRBbGxvY2F0aW9uc10gPSB1c2VTdGF0ZSh7CiAgICBFVEg6IDQwLAogICAgVVNEQzogMzAsCiAgICBCVEM6IDIwLAogICAgT1RIRVI6IDEwLAogIH0pOwoKICBjb25zdCB7IGRhdGE6IHBvcnRmb2xpbyB9ID0gdXNlUG9ydGZvbGlvRGF0YSh1c2VyQWRkcmVzcyk7CiAgY29uc3QgcmViYWxhbmNpbmdQbGFuID0gY2FsY3VsYXRlUmViYWxhbmNpbmcocG9ydGZvbGlvLCB0YXJnZXRBbGxvY2F0aW9ucyk7CgogIHJldHVybiAoCiAgICA8ZGl2IGNsYXNzTmFtZT0icG9ydGZvbGlvLXJlYmFsYW5jZXIiPgogICAgICA8aDI+UG9ydGZvbGlvIFJlYmFsYW5jaW5nPC9oMj4KCiAgICAgIDxkaXYgY2xhc3NOYW1lPSJjdXJyZW50LWFsbG9jYXRpb24iPgogICAgICAgIDxoMz5DdXJyZW50IEFsbG9jYXRpb248L2gzPgogICAgICAgIDxQaWVDaGFydCBkYXRhPXtwb3J0Zm9saW8/LmN1cnJlbnRBbGxvY2F0aW9ufSAvPgogICAgICA8L2Rpdj4KCiAgICAgIDxkaXYgY2xhc3NOYW1lPSJ0YXJnZXQtYWxsb2NhdGlvbiI+CiAgICAgICAgPGgzPlRhcmdldCBBbGxvY2F0aW9uPC9oMz4KICAgICAgICA8QWxsb2NhdGlvblNsaWRlcnMKICAgICAgICAgIGFsbG9jYXRpb25zPXt0YXJnZXRBbGxvY2F0aW9uc30KICAgICAgICAgIG9uQ2hhbmdlPXtzZXRUYXJnZXRBbGxvY2F0aW9uc30KICAgICAgICAvPgogICAgICA8L2Rpdj4KCiAgICAgIDxkaXYgY2xhc3NOYW1lPSJyZWJhbGFuY2luZy1wbGFuIj4KICAgICAgICA8aDM+UmViYWxhbmNpbmcgUGxhbjwvaDM+CiAgICAgICAge3JlYmFsYW5jaW5nUGxhbi5tYXAoKGFjdGlvbiwgaW5kZXgpID0+ICgKICAgICAgICAgIDxkaXYga2V5PXtpbmRleH0gY2xhc3NOYW1lPSJyZWJhbGFuY2luZy1hY3Rpb24iPgogICAgICAgICAgICA8c3Bhbj57YWN0aW9uLnR5cGV9PC9zcGFuPgogICAgICAgICAgICA8c3Bhbj57YWN0aW9uLmFtb3VudH0ge2FjdGlvbi5mcm9tVG9rZW59PC9zcGFuPgogICAgICAgICAgICA8c3Bhbj7ihpI8L3NwYW4+CiAgICAgICAgICAgIDxzcGFuPnthY3Rpb24uZXhwZWN0ZWRPdXRwdXR9IHthY3Rpb24udG9Ub2tlbn08L3NwYW4+CgogICAgICAgICAgICA8QW55U3BlbmQKICAgICAgICAgICAgICBtb2RlPSJtb2RhbCIKICAgICAgICAgICAgICBkZXN0aW5hdGlvblRva2VuQWRkcmVzcz17YWN0aW9uLnRvVG9rZW5BZGRyZXNzfQogICAgICAgICAgICAgIGRlc3RpbmF0aW9uVG9rZW5DaGFpbklkPXthY3Rpb24udG9DaGFpbklkfQogICAgICAgICAgICAgIHJlY2lwaWVudEFkZHJlc3M9e3VzZXJBZGRyZXNzfQogICAgICAgICAgICAgIG9uU3VjY2Vzcz17KCkgPT4gewogICAgICAgICAgICAgICAgcXVlcnlDbGllbnQuaW52YWxpZGF0ZVF1ZXJpZXMoWydwb3J0Zm9saW8nLCB1c2VyQWRkcmVzc10pOwogICAgICAgICAgICAgICAgdG9hc3Quc3VjY2VzcyhgUmViYWxhbmNlZCAke2FjdGlvbi5mcm9tVG9rZW59IHRvICR7YWN0aW9uLnRvVG9rZW59YCk7CiAgICAgICAgICAgICAgfX0KICAgICAgICAgICAgLz4KICAgICAgICAgIDwvZGl2PgogICAgICAgICkpfQogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICk7Cn0KYGBgCgojIyBHZXR0aW5nIEhlbHAKCjxDYXJkR3JvdXAgY29scz17Mn0+CjxDYXJkIHRpdGxlPSJFcnJvciBIYW5kbGluZyBHdWlkZSIgaWNvbj0ic2hpZWxkLWV4Y2xhbWF0aW9uIiBocmVmPSIvYW55c3BlbmQvZXJyb3ItaGFuZGxpbmciPgogIExlYXJuIGhvdyB0byBoYW5kbGUgZXJyb3JzIGdyYWNlZnVsbHkgYW5kIHByb3ZpZGUgZ3JlYXQgVVgKPC9DYXJkPgoKPENhcmQgdGl0bGU9IkRpc2NvcmQgQ29tbXVuaXR5IiBpY29uPSJkaXNjb3JkIiBocmVmPSJodHRwczovL2Rpc2NvcmQuZ2cvYjNkb3RmdW4iPgogIEdldCBoZWxwIGZyb20gb3VyIGNvbW11bml0eSBhbmQgdGVhbSBtZW1iZXJzCjwvQ2FyZD4KPC9DYXJkR3JvdXA+CgpUaGVzZSBleGFtcGxlcyBzaG93Y2FzZSB0aGUgZmxleGliaWxpdHkgYW5kIHBvd2VyIG9mIEFueVNwZW5kIGZvciBidWlsZGluZyBzZWFtbGVzcyBwYXltZW50IGV4cGVyaWVuY2VzIGFjcm9zcyBkaWZmZXJlbnQgdHlwZXMgb2YgYXBwbGljYXRpb25zLiBFYWNoIGV4YW1wbGUgY2FuIGJlIGN1c3RvbWl6ZWQgdG8gZml0IHlvdXIgc3BlY2lmaWMgdXNlIGNhc2UgYW5kIGRlc2lnbiByZXF1aXJlbWVudHMuCg==",
    "lastUpdated": "2025-09-03T03:16:44.063Z"
  },
  {
    "sourceFile": "anyspend/error-handling.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-09-03T03:18:20.530Z"
  },
  {
    "sourceFile": "anyspend/components.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-09-03T03:19:29.899Z"
  },
  {
    "sourceFile": "arenakit/introduction.mdx",
    "sourceHash": "CiMjIFdoYXQgaXMgQXJlbmFLaXQ/CgpNb3JlIGRvY3VtZW50YXRpb24gaXMgY29taW5nIHNvb24uCg==",
    "lastUpdated": "2025-09-03T03:12:15.243Z"
  },
  {
    "sourceFile": "sdk/global-account/permissions.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-09-03T03:20:25.716Z"
  },
  {
    "sourceFile": "sdk/global-account/introduction.mdx",
    "sourceHash": "CiMjIFdoYXQgYXJlIEIzIEdsb2JhbCBBY2NvdW50cz8KCkIzIEdsb2JhbCBBY2NvdW50cyBhcmUgYSB1bmlmaWVkIGF1dGhlbnRpY2F0aW9uIHN5c3RlbSB0aGF0IHByb3ZpZGVzIHVzZXJzIHdpdGggYSBzaW5nbGUgaWRlbnRpdHkgYWNyb3NzIHRoZSBlbnRpcmUgQjMgZWNvc3lzdGVtLiBVc2VycyBjYW4gYXV0aGVudGljYXRlIG9uY2UgYW5kIGFjY2VzcyBhbGwgQjMgYXBwbGljYXRpb25zLCBnYW1lcywgYW5kIHNlcnZpY2VzIHNlYW1sZXNzbHkuCgojIyBLZXkgRmVhdHVyZXMKCjxDYXJkR3JvdXAgY29scz17Mn0+Cgo8Q2FyZCB0aXRsZT0iU29jaWFsIExvZ2luIiBpY29uPSJ1c2VycyI+CiAgU3VwcG9ydCBmb3IgR29vZ2xlLCBEaXNjb3JkLCBhbmQgb3RoZXIgc29jaWFsIGF1dGhlbnRpY2F0aW9uIHByb3ZpZGVycy4KPC9DYXJkPgoKPENhcmQgdGl0bGU9IlNlc3Npb24gTWFuYWdlbWVudCIgaWNvbj0ia2V5Ij4KICBTZWN1cmUgc2Vzc2lvbiBrZXkgYXV0aGVudGljYXRpb24gd2l0aCBjdXN0b21pemFibGUgcGVybWlzc2lvbnMuCjwvQ2FyZD4KCjxDYXJkIHRpdGxlPSJDcm9zcy1QbGF0Zm9ybSIgaWNvbj0ibW9iaWxlIj4KICBXb3JrcyBhY3Jvc3Mgd2ViLCBtb2JpbGUsIGFuZCBkZXNrdG9wIGFwcGxpY2F0aW9ucy4KPC9DYXJkPgoKPENhcmQgdGl0bGU9IkRldmVsb3BlciBGcmllbmRseSIgaWNvbj0iY29kZSI+CiAgU2ltcGxlIFJlYWN0IGNvbXBvbmVudHMgYW5kIGhlYWRsZXNzIFR5cGVTY3JpcHQgc2VydmljZXMuCjwvQ2FyZD4KCjwvQ2FyZEdyb3VwPgoKIyMgQXJjaGl0ZWN0dXJlCgpUaGUgR2xvYmFsIEFjY291bnRzIHN5c3RlbSBjb25zaXN0cyBvZiBzZXZlcmFsIGtleSBjb21wb25lbnRzOgoKIyMjIEF1dGhlbnRpY2F0aW9uIEZsb3cKMS4gKipTb2NpYWwgTG9naW4qKjogVXNlcnMgYXV0aGVudGljYXRlIHdpdGggdGhlaXIgcHJlZmVycmVkIHNvY2lhbCBwcm92aWRlcgoyLiAqKkFjY291bnQgQ3JlYXRpb24qKjogQSBCMyBHbG9iYWwgQWNjb3VudCBpcyBjcmVhdGVkIG9yIGxpbmtlZAozLiAqKlNlc3Npb24gS2V5cyoqOiBPcHRpb25hbCBzZXNzaW9uIGtleXMgZm9yIGVuaGFuY2VkIHNlY3VyaXR5CjQuICoqUGVybWlzc2lvbnMqKjogR3JhbnVsYXIgcGVybWlzc2lvbnMgZm9yIGRpZmZlcmVudCBhY3Rpb25zCgojIyMgUmVhY3QgQ29tcG9uZW50cwotIGBCM1Byb3ZpZGVyYDogQ29udGV4dCBwcm92aWRlciBmb3IgR2xvYmFsIEFjY291bnRzCi0gYFNpZ25JbldpdGhCM2A6IENvbXBsZXRlIGF1dGhlbnRpY2F0aW9uIGZsb3cKLSBgUmVxdWVzdFBlcm1pc3Npb25zQnV0dG9uYDogUGVybWlzc2lvbiBtYW5hZ2VtZW50Ci0gYEFjY291bnRBc3NldHNgOiBEaXNwbGF5IHVzZXIgYXNzZXRzCgojIyMgSGVhZGxlc3MgU2VydmljZXMKLSBBdXRoZW50aWNhdGlvbiBzZXJ2aWNlIGZvciBjdXN0b20gaW1wbGVtZW50YXRpb25zCi0gU2Vzc2lvbiBtYW5hZ2VtZW50IHV0aWxpdGllcwotIFBlcm1pc3Npb24gdmFsaWRhdGlvbiBoZWxwZXJzCgojIyBRdWljayBTdGFydAoKIyMjIEJhc2ljIEF1dGhlbnRpY2F0aW9uCgpgYGB0c3gKaW1wb3J0IHsgQjNQcm92aWRlciwgU2lnbkluV2l0aEIzIH0gZnJvbSAiQGIzZG90ZnVuL3Nkay9nbG9iYWwtYWNjb3VudC9yZWFjdCI7CgpmdW5jdGlvbiBBcHAoKSB7CiAgcmV0dXJuICgKICAgIDxCM1Byb3ZpZGVyIGVudmlyb25tZW50PSJwcm9kdWN0aW9uIiBwYXJ0bmVySWQ9InlvdXItYXdlc29tZS1wYXJ0bmVyLWlkIj4KICAgICAgPFNpZ25JbldpdGhCMwogICAgICAgIHByb3ZpZGVyPXt7IHN0cmF0ZWd5OiAiZ29vZ2xlIiB9fQogICAgICAgIHBhcnRuZXJJZD0ieW91ci1wYXJ0bmVyLWlkIgogICAgICAgIG9uTG9naW5TdWNjZXNzPXsoZ2xvYmFsQWNjb3VudCkgPT4gewogICAgICAgICAgY29uc29sZS5sb2coIlVzZXIgYXV0aGVudGljYXRlZDoiLCBnbG9iYWxBY2NvdW50KTsKICAgICAgICB9fQogICAgICAvPgogICAgPC9CM1Byb3ZpZGVyPgogICk7Cn0KYGBgCgojIyMgQ2hlY2sgQXV0aGVudGljYXRpb24gU3RhdHVzCgpgYGB0c3gKaW1wb3J0IHsgdXNlQjMgfSBmcm9tICJAYjNkb3RmdW4vc2RrL2dsb2JhbC1hY2NvdW50L3JlYWN0IjsKCmZ1bmN0aW9uIFVzZXJQcm9maWxlKCkgewogIGNvbnN0IHsgYWNjb3VudCwgaXNBdXRoZW50aWNhdGVkIH0gPSB1c2VCMygpOwoKICByZXR1cm4gKAogICAgPGRpdj4KICAgICAge2lzQXV0aGVudGljYXRlZCA/ICgKICAgICAgICA8cD5XZWxjb21lLCB7YWNjb3VudD8uZGlzcGxheU5hbWV9ITwvcD4KICAgICAgKSA6ICgKICAgICAgICA8cD5QbGVhc2Ugc2lnbiBpbjwvcD4KICAgICAgKX0KICAgIDwvZGl2PgogICk7Cn0KYGBgCgojIyBFbnZpcm9ubWVudCBDb25maWd1cmF0aW9uCgpTZXQgdXAgeW91ciBlbnZpcm9ubWVudCB2YXJpYWJsZXM6CgpgYGBiYXNoCiMgUHJvZHVjdGlvbgpORVhUX1BVQkxJQ19CM19BUEk9aHR0cHM6Ly9hcGkuYjMuZnVuCk5FWFRfUFVCTElDX0JTTU5UX0FQST1odHRwczovL2FwaS5iYXNlbWVudC5mdW4KCiMgRGV2ZWxvcG1lbnQgIApORVhUX1BVQkxJQ19CM19BUEk9aHR0cHM6Ly9kZXYtYXBpLmIzLmZ1bgpORVhUX1BVQkxJQ19CU01OVF9BUEk9aHR0cHM6Ly9kZXYtYXBpLmJhc2VtZW50LmZ1bgpgYGAKCiMjIE5leHQgU3RlcHMKCjxDYXJkR3JvdXAgY29scz17Mn0+Cgo8Q2FyZCB0aXRsZT0iQXV0aGVudGljYXRpb24gR3VpZGUiIGljb249InNoaWVsZCIgaHJlZj0iL3Nkay9nbG9iYWwtYWNjb3VudC9hdXRoZW50aWNhdGlvbiI+CiAgTGVhcm4gYWJvdXQgZGlmZmVyZW50IGF1dGhlbnRpY2F0aW9uIHN0cmF0ZWdpZXMgYW5kIGltcGxlbWVudGF0aW9uLgo8L0NhcmQ+Cgo8Q2FyZCB0aXRsZT0iUGVybWlzc2lvbnMgU3lzdGVtIiBpY29uPSJsb2NrIiBocmVmPSIvc2RrL2dsb2JhbC1hY2NvdW50L3Blcm1pc3Npb25zIj4KICBVbmRlcnN0YW5kIHNlc3Npb24ga2V5cyBhbmQgcGVybWlzc2lvbiBtYW5hZ2VtZW50Lgo8L0NhcmQ+Cgo8Q2FyZCB0aXRsZT0iUmVhY3QgSG9va3MiIGljb249InJlYWN0IiBocmVmPSIvc2RrL2dsb2JhbC1hY2NvdW50L2hvb2tzIj4KICBFeHBsb3JlIGF2YWlsYWJsZSBob29rcyBmb3IgR2xvYmFsIEFjY291bnRzIGludGVncmF0aW9uLgo8L0NhcmQ+Cgo8Q2FyZCB0aXRsZT0iRXhhbXBsZXMiIGljb249ImNvZGUiIGhyZWY9Ii9zZGsvZ2xvYmFsLWFjY291bnQvZXhhbXBsZXMiPgogIFNlZSBjb21wbGV0ZSBleGFtcGxlcyBhbmQgaW50ZWdyYXRpb24gcGF0dGVybnMuCjwvQ2FyZD4KCjwvQ2FyZEdyb3VwPgo=",
    "lastUpdated": "2025-10-31T02:44:53.722Z"
  },
  {
    "sourceFile": "sdk/global-account/hooks.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-09-03T03:21:47.455Z"
  },
  {
    "sourceFile": "sdk/global-account/examples.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-10-31T02:46:52.905Z"
  },
  {
    "sourceFile": "sdk/global-account/authentication.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-10-31T02:48:06.706Z"
  },
  {
    "sourceFile": "learn/troubleshooting/transactions-and-wallet-issues.mdx",
    "sourceHash": "CiMjIEZyZXF1ZW50bHkgQXNrZWQgUXVlc3Rpb25zCgo8QWNjb3JkaW9uR3JvdXA+CiAgPEFjY29yZGlvbiB0aXRsZT0iTXkgZGVwb3NpdCBpc24ndCBzaG93aW5nIHVwLiBXaGF0IGRvIEkgZG8/Ij4KICAgIENvbmZpcm0gdGhlIHRyYW5zYWN0aW9uIHdhcyBzZW50IHRvIHRoZSByaWdodCBhZGRyZXNzIGFuZCBjaGFpbi4gSWYgaXQncyBjb3JyZWN0LCBpdCBtYXkganVzdCBiZSBwcm9jZXNzaW5nLiBZb3UgY2FuIGNoZWNrIHRoZSBkZXRhaWxzIG9mIHlvdXIgdHJhbnNhY3Rpb24gdXNpbmcgdGhlICoqQjMgQmxvY2sgRXhwbG9yZXIqKjogWyoqZXhwbG9yZXIuYjMuZnVuKipdKGh0dHBzOi8vZXhwbG9yZXIuYjMuZnVuLykuIElmIHlvdSByZXF1aXJlIGZ1cnRoZXIgYXNzaXN0YW5jZSwgcmVhY2ggb3V0IHRvIG91ciBzdXBwb3J0IHRlYW0uCiAgPC9BY2NvcmRpb24+CiAgPEFjY29yZGlvbiB0aXRsZT0iSG93IGxvbmcgZG8gd2l0aGRyYXdhbHMgYW5kIGRlcG9zaXRzIHRha2U/Ij4KICAgIFdpdGhkcmF3YWxzIGFuZCBkZXBvc2l0cyB0eXBpY2FsbHkgY29tcGxldGUgd2l0aGluIGEgZmV3IG1pbnV0ZXMgYnV0IG1heSB2YXJ5IGRlcGVuZGluZyBvbiBuZXR3b3JrIGNvbmdlc3Rpb24uCiAgPC9BY2NvcmRpb24+CiAgPEFjY29yZGlvbiB0aXRsZT0iSSBzZW50IHRva2VucyB0byB0aGUgd3JvbmcgbmV0d29yay4gQ2FuIEkgcmVjb3ZlciB0aGVtPyI+CiAgICBVbmZvcnR1bmF0ZWx5LCB0b2tlbnMgc2VudCB0byB1bnN1cHBvcnRlZCBjaGFpbnMgbWF5IG5vdCBiZSByZWNvdmVyYWJsZS4gQ29udGFjdCBzdXBwb3J0IHdpdGggZnVsbCBkZXRhaWxzLgogIDwvQWNjb3JkaW9uPgogIDxBY2NvcmRpb24gdGl0bGU9IldoeSBkaWQgbXkgdHJhbnNhY3Rpb24gZmFpbD8iPgogICAgTW9zdCBmYWlsZWQgdHJhbnNhY3Rpb25zIGFyZSBkdWUgdG8gbmV0d29yayBpc3N1ZXMsIGxvdyBnYXMsIG9yIHdhbGxldCBkaXNjb25uZWN0cy4gVHJ5IGFnYWluIG9yIHJlZnJlc2guCiAgPC9BY2NvcmRpb24+CiAgPEFjY29yZGlvbiB0aXRsZT0iTXkgc3dhcHBlZCB0b2tlbnMgZGlkIG5vdCBhcnJpdmUgdG8gbXkgd2FsbGV0LiBXaGF0IGRvIEkgZG8/Ij4KICAgIFN3YXBzIHVzdWFsbHkgdGFrZSBqdXN0IGEgZmV3IG1pbnV0ZXMgdG8gY29tcGxldGUuIEhvd2V2ZXIsIG5ldHdvcmsgY29uZ2VzdGlvbiBjYW4gc29tZXRpbWVzIGRlbGF5IHByb2Nlc3NpbmcuIEluIHJhcmUgY2FzZXMsIHRyYW5zYWN0aW9ucyBtYXkgZ2V0IHN0dWNrLiBJZiB5b3VyIHN3YXAgaGFzbid0IGFycml2ZWQgYWZ0ZXIgYSByZWFzb25hYmxlIHdhaXQsIHBsZWFzZSByZWFjaCBvdXQgdG8gb3VyIHN1cHBvcnQgdGVhbSB3aXRoIHRoZSB0cmFuc2FjdGlvbiBoYXNoIGFuZCB3YWxsZXQgYWRkcmVzcyBzbyB3ZSBjYW4gYXNzaXN0IHlvdS4KICA8L0FjY29yZGlvbj4KICA8QWNjb3JkaW9uIHRpdGxlPSJXaGF0IGNoYWlucyBkb2VzIEFueXNwZW5kIHN1cHBvcnQ/Ij4KICAgIEFueXNwZW5kIGFsbG93cyB1c2VycyB0byBzd2FwIHRva2VucyBhY3Jvc3Mgc3VwcG9ydGVkIGNoYWlucyBhbmQgZXZlbiBwdXJjaGFzZSB0b2tlbnMgdXNpbmcgZmlhdC4gQmVsb3cgaXMgYSBsaXN0IG9mIGN1cnJlbnRseSBzdXBwb3J0ZWQgY2hhaW5zOgoKICAgIC0gQmFzZQogICAgLSBFdGhlcmV1bQogICAgLSBTb2xhbmEKICAgIC0gQXJiaXRydW0KICAgIC0gQXZhbGFuY2hlCiAgICAtIEIzCiAgICAtIEJOTgogICAgLSBPcHRpbWlzbQogICAgLSBQb2x5Z29uCgogICAgV2XigJlyZSBjb250aW51b3VzbHkgd29ya2luZyB0byBleHBhbmQgc3VwcG9ydCwgc28gY2hlY2sgYmFjayBmb3IgdXBkYXRlcyBhcyBuZXcgY2hhaW5zIGFyZSBhZGRlZC4KICA8L0FjY29yZGlvbj4KPC9BY2NvcmRpb25Hcm91cD4KCjxUaXA+CiAgQWx3YXlzIGRvdWJsZS1jaGVjayB3YWxsZXQgYWRkcmVzc2VzIGFuZCBuZXR3b3JrIHNlbGVjdGlvbnMgYmVmb3JlIGNvbmZpcm1pbmcgdHJhbnNhY3Rpb25zIHRvIGF2b2lkIHNlbmRpbmcgdG9rZW5zIHRvIHRoZSB3cm9uZyBkZXN0aW5hdGlvbi4KPC9UaXA+Cgo8SW5mbz4KICBGb3IgdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uLCB0aGUgQjMgQmxvY2sgRXhwbG9yZXIgYXQgW2V4cGxvcmVyLmIzLmZ1bl0oaHR0cHM6Ly9leHBsb3Jlci5iMy5mdW4pIGlzIHlvdXIgYmVzdCByZXNvdXJjZSBmb3IgY2hlY2tpbmcgdHJhbnNhY3Rpb24gc3RhdHVzIGFuZCBkZXRhaWxzLgo8L0luZm8+",
    "lastUpdated": "2025-10-31T02:48:27.022Z"
  },
  {
    "sourceFile": "learn/troubleshooting/staking-and-rewards-faq.mdx",
    "sourceHash": "CiMjIEZyZXF1ZW50bHkgQXNrZWQgUXVlc3Rpb25zCgo8QWNjb3JkaW9uR3JvdXA+CjxBY2NvcmRpb24gdGl0bGU9IkhvdyBkb2VzIHN0YWtpbmcgd29yaz8iPgpTdGFraW5nIHlvdXIgQjMgdG9rZW5zIGdpdmVzIHlvdSBwYXNzaXZlIHJld2FyZHMgYW5kIGFjY2VzcyB0byBTdGFrZSB0byBXaW4gZ2FtZXMuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBwbGVhc2UgcmVhZCBvdXIgKipXaGF0IGlzIFN0YWtpbmcgYW5kIEhvdyBEb2VzIGl0IFdvcmsqKiBhcnRpY2xlLgo8L0FjY29yZGlvbj4KCjxBY2NvcmRpb24gdGl0bGU9IldoYXQgaXMgdGhlIGNvb2xkb3duIHBlcmlvZCB3aGVuIEkgdW5zdGFrZT8iPgpBZnRlciB5b3UgdW5zdGFrZSwgdGhlcmUgaXMgYSA0NS1kYXkgY29vbGRvd24gYmVmb3JlIHlvdSBjYW4gd2l0aGRyYXcgeW91ciB0b2tlbnMuCjwvQWNjb3JkaW9uPgoKPEFjY29yZGlvbiB0aXRsZT0iSSBzdGFrZWQgYnV0IGRvbid0IHNlZSByZXdhcmRzLiBXaGF0IHNob3VsZCBJIGRvPyI+CldhaXQgYSBmZXcgbWludXRlcyBhbmQgcmVmcmVzaC4gSWYgaXQgc3RpbGwgZG9lc24ndCBzaG93LCBjb25maXJtIHlvdXIgdHJhbnNhY3Rpb24gc3VjY2VlZGVkIG9uIHRoZSBibG9ja2NoYWluLiBJZiB5b3VyIHRyYW5zYWN0aW9uIHN1Y2NlZWRlZCwgYnV0IHlvdSBhcmUgc3RpbGwgbm90IGFjY3VtdWxhdGluZyB0b2tlbnMsIGNvbnRhY3Qgc3VwcG9ydC4KPC9BY2NvcmRpb24+Cgo8QWNjb3JkaW9uIHRpdGxlPSJJIHVuc3Rha2VkIG15IHRva2VucyBidXQgSSBkb24ndCBzZWUgdGhlbSBpbiBteSB3YWxsZXQuIFdoZXJlIGlzIG15IG1vbmV5PyI+ClVuc3Rha2luZyB0cmlnZ2VycyBhIDQ1LWRheSBjb29sZG93biBwZXJpb2QuIER1cmluZyB0aGlzIHRpbWUsIHlvdXIgdG9rZW5zIGFyZSBzdGlsbCBoZWxkIGluIHRoZSBzdGFraW5nIHBvb2wgYW5kIG5vdCB5ZXQgYXZhaWxhYmxlIGluIHlvdXIgd2FsbGV0LiBPbmNlIHRoZSBjb29sZG93biBlbmRzLCB5b3UnbGwgbmVlZCB0byByZXR1cm4gdG8gdGhlIHN0YWtpbmcgcGFnZSBhbmQgY2xpY2sgKipXaXRoZHJhdyoqIHRvIG1vdmUgeW91ciB0b2tlbnMgYmFjayBpbnRvIHlvdXIgd2FsbGV0Lgo8L0FjY29yZGlvbj4KCjxBY2NvcmRpb24gdGl0bGU9IkhvdyBkbyBJIGNsYWltIG15IHN0YWtpbmcgcmV3YXJkcz8iPgpTdGFraW5nIHJld2FyZHMgYXJlIGN1cnJlbnRseSBpbiBhbiBhY2N1bXVsYXRpb24gcGhhc2UgYW5kIGFyZSBub3QgeWV0IGNsYWltYWJsZS4gV2hlbiBjbGFpbWluZyBiZWNvbWVzIGF2YWlsYWJsZSwgd2UnbGwgbm90aWZ5IGFsbCBzdGFrZXJzIGFuZCB1cGRhdGUgdGhpcyBwYWdlIHdpdGggdGhlIHN0ZXBzIHRvIGNsYWltLgo8L0FjY29yZGlvbj4KCjxBY2NvcmRpb24gdGl0bGU9IklzIHRoZXJlIGEgc3Rha2luZyBtaW5pbXVtPyI+Clllcy4gVGhlIG1pbmltdW0gYW1vdW50IHlvdSBjYW4gc3Rha2UgaXMgNTAgQjMuCjwvQWNjb3JkaW9uPgo8L0FjY29yZGlvbkdyb3VwPgoKPFdhcm5pbmc+ClJlbWVtYmVyIHRoYXQgdGhlIDQ1LWRheSBjb29sZG93biBwZXJpb2QgaXMgbWFuZGF0b3J5IGZvciBhbGwgdW5zdGFraW5nIG9wZXJhdGlvbnMuIFBsYW4gYWNjb3JkaW5nbHkgaWYgeW91IG5lZWQgYWNjZXNzIHRvIHlvdXIgdG9rZW5zIGJ5IGEgc3BlY2lmaWMgZGF0ZS4KPC9XYXJuaW5nPgo=",
    "lastUpdated": "2025-09-03T03:24:46.298Z"
  },
  {
    "sourceFile": "learn/troubleshooting/stake-to-win-games-faq.mdx",
    "sourceHash": "CiMjIEZyZXF1ZW50bHkgQXNrZWQgUXVlc3Rpb25zCgo8QWNjb3JkaW9uR3JvdXA+CjxBY2NvcmRpb24gdGl0bGU9IkhvdyBkb2VzIHRoZSBXZWVrbHkgUHJpemUgUG9vbCB3b3JrPyI+CllvdSBtdXN0IG1hbnVhbGx5IGVudGVyIGVhY2ggd2VlayBiZXR3ZWVuIE1vbmRheSBhbmQgRnJpZGF5IGJlZm9yZSB0aGUgMTowMCBQTSBVVEMgY3V0b2ZmLiBUaHJlZSB3aW5uZXJzIHBlciB0aWVyLgo8L0FjY29yZGlvbj4KCjxBY2NvcmRpb24gdGl0bGU9IldoYXQgaXMgdGhlIE1vbnRobHkgTWVnYSBQcml6ZT8iPgpPbmUgc3Rha2VyIGlzIHJhbmRvbWx5IHNlbGVjdGVkIGVhY2ggbW9udGggdG8gd2luIGEgc3VycHJpc2UgcmV3YXJkIGxpa2UgdG9rZW5zIG9yIE5GVHMuCjwvQWNjb3JkaW9uPgoKPEFjY29yZGlvbiB0aXRsZT0iRG8gSSBuZWVkIHRvIGNsYWltIFNwaW4gdGhlIFdoZWVsIG9yIFNsb3RzIHJld2FyZHM/Ij4KTm8uIEFsbCByZXdhcmRzIGFyZSBzZW50IGRpcmVjdGx5IHRvIHlvdXIgd2FsbGV0IGFmdGVyIGVhY2ggZ2FtZS4KPC9BY2NvcmRpb24+Cgo8QWNjb3JkaW9uIHRpdGxlPSJDYW4gSSBwbGF5IG1vcmUgdGhhbiBvbmNlIHBlciBkYXk/Ij4KTm8uIFNwaW4gdGhlIFdoZWVsIGFuZCBTbG90cyBhcmUgbGltaXRlZCB0byBvbmUgcGxheSBwZXIgZGF5IHBlciB3YWxsZXQuCjwvQWNjb3JkaW9uPgoKPEFjY29yZGlvbiB0aXRsZT0iVGhlIHdoZWVsIG9yIHNsb3QgbWFjaGluZSB3b24ndCBzdG9wIHNwaW5uaW5nLiBXaGF0J3MgZ29pbmcgb24/Ij4KVGhpcyBpcyBhIGtub3duIHZpc3VhbCBidWcuIFNvbWV0aW1lcyB0aGUgc3BpbiBhbmltYXRpb24gZG9lc24ndCBzdG9wLCBidXQgdGhlIHJld2FyZCBpcyBzdGlsbCBwcm9jZXNzZWQuIFRyeSByZWZyZXNoaW5nIHRoZSBwYWdlLiBZb3VyIHByaXplIHNob3VsZCBhcHBlYXIgaW1tZWRpYXRlbHksIGFuZCB5b3UgY2FuIGFsc28gY2hlY2sgeW91ciBCMyBiYWxhbmNlIGZvciBjaGFuZ2VzLiBUbyBjb25maXJtIHlvdXIgcmV3YXJkIG9uLWNoYWluLCB5b3UgY2FuIGxvb2sgdXAgdGhlIHRyYW5zYWN0aW9uIG9uIHRoZSAqKkIzIEV4cGxvcmVyKio6IFsqKmV4cGxvcmVyLmIzLmZ1bioqXShodHRwczovL2V4cGxvcmVyLmIzLmZ1bi8pLiBJZiB5b3UncmUgc3RpbGwgdW5zdXJlLCBmZWVsIGZyZWUgdG8gcmVhY2ggb3V0IHRvIHN1cHBvcnQuCjwvQWNjb3JkaW9uPgoKPEFjY29yZGlvbiB0aXRsZT0iSSBkaWRuJ3QgZ2V0IG15IHJld2FyZCBmb3Igc3Bpbm5pbmcgdGhlIHdoZWVsIG9yIHBsYXlpbmcgdGhlIHNsb3QgbWFjaGluZS4gV2hhdCBzaG91bGQgSSBkbz8iPgpNb3N0IGxpa2VseSwgeW91ciByZXdhcmQgd2FzIHByb2Nlc3NlZCwgYnV0IGR1ZSB0byBhIHZpc3VhbCBidWcsIHlvdSBtYXkgbm90IGhhdmUgc2VlbiBpdCBoYXBwZW4uIEZpcnN0LCByZWZyZXNoIHRoZSBwYWdlIGFuZCBjaGVjayBpZiB5b3VyIEIzIGJhbGFuY2UgaGFzIGNoYW5nZWQuIFlvdSBjYW4gYWxzbyBjb25maXJtIHRoZSB0cmFuc2FjdGlvbiB1c2luZyB0aGUgW0IzIEV4cGxvcmVyXShodHRwczovL2V4cGxvcmVyLmIzLmZ1bi8pIGJ5IGVudGVyaW5nIHlvdXIgd2FsbGV0IGFkZHJlc3MuIElmIHlvdSdyZSBzdGlsbCB1bnN1cmUgb3IgbmVlZCBoZWxwLCBmZWVsIGZyZWUgdG8gcmVhY2ggb3V0IHRvIHN1cHBvcnQgYW5kIHdlJ2xsIGhlbHAgY29uZmlybSB5b3VyIHJld2FyZC4KPC9BY2NvcmRpb24+Cgo8QWNjb3JkaW9uIHRpdGxlPSJXaGF0IGFyZSB0aGUgU3Rha2UgdG8gV2luIHRpZXJzPyI+ClRpZXJzIGFyZSBiYXNlZCBvbiBob3cgbXVjaCBCMyB5b3UndmUgc3Rha2VkOiAqKlJvb2tpZSoqICgxS+KAkzNLKSwgKipHcmluZGVyKiogKDNL4oCTMTAwSyksICoqV2hhbGUqKiAoMTAwSyspLgo8L0FjY29yZGlvbj4KCjxBY2NvcmRpb24gdGl0bGU9IldoeSBjYW4ndCBJIGFjY2VzcyBTdGFrZSB0byBXaW4gZ2FtZXM/Ij4KWW91IG5lZWQgYXQgbGVhc3QgMSwwMDAgQjMgc3Rha2VkIHRvIHVubG9jayBhY2Nlc3MuCjwvQWNjb3JkaW9uPgo8L0FjY29yZGlvbkdyb3VwPgoKPFdhcm5pbmc+CklmIHlvdSBleHBlcmllbmNlIHZpc3VhbCBidWdzIHdpdGggdGhlIHNwaW5uaW5nIGFuaW1hdGlvbnMsIGRvbid0IHdvcnJ5IC0geW91ciByZXdhcmRzIGFyZSBzdGlsbCBiZWluZyBwcm9jZXNzZWQuIEFsd2F5cyBjaGVjayB5b3VyIHdhbGxldCBiYWxhbmNlIGFuZCB0aGUgYmxvY2tjaGFpbiBleHBsb3JlciB0byBjb25maXJtIHRyYW5zYWN0aW9ucy4KPC9XYXJuaW5nPgo=",
    "lastUpdated": "2025-09-03T03:25:11.823Z"
  },
  {
    "sourceFile": "learn/troubleshooting/login-and-account-access.mdx",
    "sourceHash": "CiMjIEZyZXF1ZW50bHkgQXNrZWQgUXVlc3Rpb25zCgo8QWNjb3JkaW9uR3JvdXA+CiAgPEFjY29yZGlvbiB0aXRsZT0iV2h5IGNhbid0IEkgbG9nIGluIHRvIG15IGFjY291bnQ/Ij4KICAgIE1ha2Ugc3VyZSB5b3UncmUgdXNpbmcgdGhlIGNvcnJlY3QgbG9naW4gbWV0aG9kIGFuZCB0aGF0IHlvdXIgd2FsbGV0IG9yIHNvY2lhbCBhY2NvdW50IGlzIGNvbm5lY3RlZCBwcm9wZXJseS4KICA8L0FjY29yZGlvbj4KICA8QWNjb3JkaW9uIHRpdGxlPSJJIGRpZG4ndCByZWNlaXZlIG15IHZlcmlmaWNhdGlvbiBlbWFpbC4gV2hhdCBzaG91bGQgSSBkbz8iPgogICAgQ2hlY2sgc3BhbSBvciB0cnkgcmVzZW5kaW5nIGl0LiBJZiBpdCBzdGlsbCBkb2Vzbid0IGFycml2ZSwgdHJ5IHVzaW5nIGEgZGlmZmVyZW50IGxvZ2luIG1ldGhvZCBsaWtlIHdhbGxldCBvciBEaXNjb3JkLCBvciBjb250YWN0IHVzIHRocm91Z2ggb3VyIHN1cHBvcnQgcG9ydGFsIGZvciBhZGRpdGlvbmFsIGFzc2lzdGFuY2UuCiAgPC9BY2NvcmRpb24+CiAgPEFjY29yZGlvbiB0aXRsZT0iV2hhdCBsb2dpbiBtZXRob2RzIGFyZSBzdXBwb3J0ZWQ/Ij4KICAgIFlvdSBjYW4gbG9nIGluIHVzaW5nIGVtYWlsLCBEaXNjb3JkLCBUZWxlZ3JhbSwgd2FsbGV0LCBvciBzb2NpYWwgYWNjb3VudHMgbGlrZSBHb29nbGUgYW5kIEFwcGxlLgogIDwvQWNjb3JkaW9uPgogIDxBY2NvcmRpb24gdGl0bGU9IkNhbiBJIGxpbmsgbXVsdGlwbGUgYWNjb3VudHMgdG8gb25lIHByb2ZpbGU/Ij4KICAgIFllcy4gWW91IGNhbiBjb25uZWN0IHlvdXIgd2FsbGV0LCBEaXNjb3JkLCBhbmQgb3RoZXIgYWNjb3VudHMgaW4geW91ciBwcm9maWxlIHNldHRpbmdzIG9uIFsqKmJhc2VtZW50LmZ1bioqXShodHRwczovL2Jhc2VtZW50LmZ1bi8pLgogIDwvQWNjb3JkaW9uPgogIDxBY2NvcmRpb24gdGl0bGU9IldoeSBoYXMgbXkgYWNjb3VudCBiZWVuIHJlc3RyaWN0ZWQ/Ij4KICAgIEFjY291bnQgcmVzdHJpY3Rpb25zIGNhbiBvY2N1ciBpZiB0aGVyZSBpcyBhIHZpb2xhdGlvbiBvZiBvdXIgVGVybXMgb2YgU2VydmljZS4gSWYgeW91ciBhY2NvdW50IGhhcyBiZWVuIHJlc3RyaWN0ZWQgYW5kIHlvdeKAmXJlIHVuc3VyZSB3aHksIHBsZWFzZSByZWFjaCBvdXQgdG8gb3VyIHN1cHBvcnQgdGVhbSB3aXRoIHlvdXIgYWNjb3VudCBkZXRhaWxzLiBXZeKAmWxsIHJldmlldyB5b3VyIGNhc2UgYW5kIHByb3ZpZGUgbW9yZSBpbmZvcm1hdGlvbiBzcGVjaWZpYyB0byB5b3VyIHNpdHVhdGlvbi4KICA8L0FjY29yZGlvbj4KPC9BY2NvcmRpb25Hcm91cD4KCjxJbmZvPgogIElmIHlvdSBjb250aW51ZSBoYXZpbmcgbG9naW4gaXNzdWVzLCBtYWtlIHN1cmUgeW91J3JlIHVzaW5nIHRoZSBzYW1lIGxvZ2luIG1ldGhvZCB5b3Ugb3JpZ2luYWxseSB1c2VkIHRvIGNyZWF0ZSB5b3VyIGFjY291bnQuCjwvSW5mbz4=",
    "lastUpdated": "2025-10-31T02:48:45.885Z"
  },
  {
    "sourceFile": "learn/troubleshooting/games-and-competition-faq.mdx",
    "sourceHash": "CiMjIEZyZXF1ZW50bHkgQXNrZWQgUXVlc3Rpb25zCgo8QWNjb3JkaW9uR3JvdXA+CjxBY2NvcmRpb24gdGl0bGU9IkhvdyBkbyBJIGpvaW4gYSB0b3VybmFtZW50PyI+CkdvIHRvIHRoZSAqKkNvbXBldGUqKiB0YWIgb24gWyoqYmFzZW1lbnQuZnVuKipdKGh0dHBzOi8vYmFzZW1lbnQuZnVuLyksIHNlbGVjdCBhIGxpdmUgdG91cm5hbWVudCwgYW5kIGNsaWNrICoqSm9pbioqLiBDb25maXJtIHRoZSB0cmFuc2FjdGlvbiB0byByZWdpc3Rlci4KPC9BY2NvcmRpb24+Cgo8QWNjb3JkaW9uIHRpdGxlPSJIb3cgZG8gd2FnZXJzIHdvcms/Ij4KWW91IGNhbiBjaGFsbGVuZ2UgZnJpZW5kcyBvciBvcGVuIHB1YmxpYyB3YWdlcnMgYnkgZnVuZGluZyBhIGJldCBvbiBbYmFzZW1lbnQuZnVuXShodHRwczovL2Jhc2VtZW50LmZ1bi8pLiBTZWxlY3QgYW55IGdhbWUsIGFuZCB0aGVuIGNsaWNrIHRoZSBzd29yZCBpY29uIHRvIGNyZWF0ZSBhIHdhZ2VyIGNoYWxsZW5nZS4KPC9BY2NvcmRpb24+Cgo8QWNjb3JkaW9uIHRpdGxlPSJXaGF0IGhhcHBlbnMgaWYgSSBkaXNjb25uZWN0IGR1cmluZyBhIG1hdGNoPyI+CkRpc2Nvbm5lY3RpbmcgbWF5IHJlc3VsdCBpbiBhIGxvc3MuCjwvQWNjb3JkaW9uPgoKPEFjY29yZGlvbiB0aXRsZT0iV2h5IHdvbid0IHRoZSBnYW1lIGxvYWQgb24gdGhlIHNpdGU/Ij4KRmlyc3QsIG1ha2Ugc3VyZSB5b3VyIGludGVybmV0IGNvbm5lY3Rpb24gaXMgc3RhYmxlLiBJZiB0aGUgaXNzdWUgY29udGludWVzLCB0cnkgdXNpbmcgYSBkaWZmZXJlbnQgYnJvd3NlciBvciBjbGVhcmluZyB5b3VyIGNhY2hlLiBJZiB0aGF0IGRvZXNuJ3QgaGVscCwgY29udGFjdCBzdXBwb3J0IGZvciBmdXJ0aGVyIGFzc2lzdGFuY2UuCjwvQWNjb3JkaW9uPgoKPEFjY29yZGlvbiB0aXRsZT0iQ2FuIEkgcGxheSBvbiBtb2JpbGUgYnJvd3Nlcj8iPgpTb21lIGdhbWVzIHN1cHBvcnQgbW9iaWxlIGJyb3dzZXJzLCBidXQgc29tZSBnYW1lcyBhcmUgb25seSBhdmFpbGFibGUgb24gZGVza3RvcC4gWW91IGNhbiBjaGVjayBmb3IgbW9iaWxlIHN1cHBvcnQgb24gdGhlIGdhbWUncyBkZXRhaWwgcGFnZS4KPC9BY2NvcmRpb24+Cgo8QWNjb3JkaW9uIHRpdGxlPSJJcyB0aGVyZSBhIG1vYmlsZSBhcHA/Ij4KWWVzLiBZb3UgY2FuIGRvd25sb2FkIHRoZSBCU01OVCBhcHAgb24gQW5kcm9pZCBhbmQgQXBwbGUuCjwvQWNjb3JkaW9uPgo8L0FjY29yZGlvbkdyb3VwPgoKPFRpcD4KRm9yIHRoZSBiZXN0IGdhbWluZyBleHBlcmllbmNlLCBlbnN1cmUgeW91IGhhdmUgYSBzdGFibGUgaW50ZXJuZXQgY29ubmVjdGlvbiBhbmQgdXNlIGFuIHVwZGF0ZWQgYnJvd3Nlci4gQ2hyb21lIGFuZCBGaXJlZm94IGdlbmVyYWxseSBwcm92aWRlIHRoZSBiZXN0IGNvbXBhdGliaWxpdHkuCjwvVGlwPgoKPEluZm8+ClRoZSBtb2JpbGUgYXBwIHByb3ZpZGVzIHRoZSBtb3N0IG9wdGltaXplZCBleHBlcmllbmNlIGZvciBtb2JpbGUgZ2FtaW5nLCBzbyBkb3dubG9hZCBpdCBmcm9tIHlvdXIgZGV2aWNlJ3MgYXBwIHN0b3JlIGZvciB0aGUgYmVzdCBwZXJmb3JtYW5jZS4KPC9JbmZvPgo=",
    "lastUpdated": "2025-09-03T03:25:46.274Z"
  },
  {
    "sourceFile": "learn/troubleshooting/feedback-and-reporting-issues.mdx",
    "sourceHash": "CiMjIEZyZXF1ZW50bHkgQXNrZWQgUXVlc3Rpb25zCgo8QWNjb3JkaW9uR3JvdXA+CjxBY2NvcmRpb24gdGl0bGU9IkhvdyBjYW4gSSByZXBvcnQgYSBidWc/Ij4KWW91IGNhbiByZXBvcnQgYnVncyB1c2luZyB0aGUgY2hhdCBidXR0b24gb24gdGhpcyBzaXRlLiBCZSBzdXJlIHRvIGluY2x1ZGUgYW55IGhlbHBmdWwgc2NyZWVuc2hvdHMgYW5kIGEgY2xlYXIgZGVzY3JpcHRpb24gb2YgdGhlIGlzc3VlIHNvIHdlIGNhbiBpbnZlc3RpZ2F0ZSBxdWlja2x5Lgo8L0FjY29yZGlvbj4KCjxBY2NvcmRpb24gdGl0bGU9IldoZXJlIGNhbiBJIGdpdmUgZmVlZGJhY2sgb3Igc3VnZ2VzdGlvbnM/Ij4KV2UgbG92ZSBoZWFyaW5nIGZyb20gdGhlIGNvbW11bml0eS4gWW91IGNhbiBzaGFyZSB5b3VyIGlkZWFzIHRocm91Z2ggdGhlIGNoYXQgYnV0dG9uIGhlcmUgb3IgcmVhY2ggb3V0IHRvIHVzIG9uIERpc2NvcmQgb3IgWC4KCioqRGlzY29yZCoqIC0gW2Rpc2NvcmQuZ2cvYjNkb3RmdW5dKGh0dHBzOi8vZGlzY29yZC5nZy9iM2RvdGZ1bikKCioqWCoqIC0gW3guY29tL2IzZG90ZnVuXShodHRwczovL3guY29tL2IzZG90ZnVuKQo8L0FjY29yZGlvbj4KCjxBY2NvcmRpb24gdGl0bGU9IkNhbiBJIGNvbnRhY3QgYSByZWFsIHBlcnNvbj8iPgpZZXMuIElmIHlvdSBjYW4ndCBmaW5kIHRoZSBhbnN3ZXIgaGVyZSwgb3VyIHN1cHBvcnQgdGVhbSBpcyBhdmFpbGFibGUgdmlhIGNoYXQuCjwvQWNjb3JkaW9uPgo8L0FjY29yZGlvbkdyb3VwPgoKIyMgQmVzdCBQcmFjdGljZXMgZm9yIFJlcG9ydGluZyBJc3N1ZXMKCldoZW4gcmVwb3J0aW5nIGJ1Z3Mgb3IgaXNzdWVzLCBpbmNsdWRlOgoKLSAqKkNsZWFyIGRlc2NyaXB0aW9uKiogb2Ygd2hhdCB5b3Ugd2VyZSB0cnlpbmcgdG8gZG8KLSAqKlN0ZXBzIHRvIHJlcHJvZHVjZSoqIHRoZSBwcm9ibGVtCi0gKipTY3JlZW5zaG90cyBvciBzY3JlZW4gcmVjb3JkaW5ncyoqIGlmIGFwcGxpY2FibGUKLSAqKkJyb3dzZXIgYW5kIGRldmljZSBpbmZvcm1hdGlvbioqCi0gKipXYWxsZXQgYWRkcmVzcyoqIChpZiB0aGUgaXNzdWUgaXMgdHJhbnNhY3Rpb24tcmVsYXRlZCkKLSAqKlRyYW5zYWN0aW9uIGhhc2gqKiAoZm9yIGZhaWxlZCB0cmFuc2FjdGlvbnMpCgo8SW5mbz4KVGhlIG1vcmUgZGV0YWlsZWQgaW5mb3JtYXRpb24geW91IHByb3ZpZGUsIHRoZSBmYXN0ZXIgb3VyIHRlYW0gY2FuIGludmVzdGlnYXRlIGFuZCByZXNvbHZlIHlvdXIgaXNzdWUuCjwvSW5mbz4KCiMjIENvbW11bml0eSBDaGFubmVscwoKU3RheSBjb25uZWN0ZWQgd2l0aCB0aGUgQjMgY29tbXVuaXR5OgoKLSAqKkRpc2NvcmQqKjogW2Rpc2NvcmQuZ2cvYjNkb3RmdW5dKGh0dHBzOi8vZGlzY29yZC5nZy9iM2RvdGZ1bikgLSBSZWFsLXRpbWUgY29tbXVuaXR5IGNoYXQgYW5kIHN1cHBvcnQKLSAqKlggKFR3aXR0ZXIpKio6IFt4LmNvbS9iM2RvdGZ1bl0oaHR0cHM6Ly94LmNvbS9iM2RvdGZ1bikgLSBMYXRlc3QgdXBkYXRlcyBhbmQgYW5ub3VuY2VtZW50cyAgCi0gKipTdXBwb3J0IENoYXQqKjogQXZhaWxhYmxlIG9uIHRoaXMgZG9jdW1lbnRhdGlvbiBzaXRlCgo8VGlwPgpPdXIgY29tbXVuaXR5IGlzIHZlcnkgYWN0aXZlIGFuZCBoZWxwZnVsIC0gZG9uJ3QgaGVzaXRhdGUgdG8gYXNrIHF1ZXN0aW9ucyBpbiBEaXNjb3JkIHdoZXJlIG90aGVyIHVzZXJzIGFuZCB0ZWFtIG1lbWJlcnMgY2FuIGFzc2lzdCB5b3UgcXVpY2tseS4KPC9UaXA+Cg==",
    "lastUpdated": "2025-09-03T03:26:04.012Z"
  },
  {
    "sourceFile": "learn/staking-rewards/what-is-staking-and-how-does-it-work.mdx",
    "sourceHash": "CjxGcmFtZT4KPGltZyBzcmM9Imh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9oZWxwc2NvdXQubmV0L2RvY3MvYXNzZXRzLzY4NTMwNmI3MmUwNTUwMjc3YWE5MjUwZS9pbWFnZXMvNjg3ZjkyY2M5NjVkODI2NmZlYmExZjFiL2ZpbGUtVjhzTnhORVdBZS5wbmciIGFsdD0iU3Rha2luZyBvdmVydmlldyBiYW5uZXIgc2hvd2luZyByZXdhcmRzIGFuZCBiZW5lZml0cyIgLz4KPC9GcmFtZT4KClN0YWtpbmcgaXMgdGhlIHByb2Nlc3Mgb2YgbG9ja2luZyB1cCB5b3VyIEIzIHRva2VucyBvbiB0aGUgcGxhdGZvcm0gaW4gZXhjaGFuZ2UgZm9yIHJld2FyZHMuIFJhdGhlciB0aGFuIGxlYXZpbmcgeW91ciB0b2tlbnMgaWRsZSBpbiB5b3VyIHdhbGxldCwgc3Rha2luZyBnaXZlcyB5b3UgYWNjZXNzIHRvIGJvbnVzIHJld2FyZHMgYW5kIGV4Y2x1c2l2ZSBmZWF0dXJlcyB3aXRoaW4gdGhlIGVjb3N5c3RlbS4gWW91ciB0b2tlbnMgcmVtYWluIHlvdXJzIC0geW91J3JlIHNpbXBseSBjb21taXR0aW5nIHRoZW0gZm9yIGEgcGVyaW9kIG9mIHRpbWUgdG8gdW5sb2NrIGFkZGVkIHZhbHVlIGxpa2UgZGFpbHkgc3BpbnMsIHByaXplIHBvb2xzLCBhbmQgbW9yZS4KCiMjIEhvdyBTdGFraW5nIFdvcmtzIG9uIEIzCgpXaGVuIHlvdSBzdGFrZSB5b3VyIEIzIHRva2VucywgeW91J3JlIGVsaWdpYmxlIGZvciB0d28gdHlwZXMgb2YgcmV3YXJkczoKCjEuICoqUGFzc2l2ZSBTdGFraW5nIFJld2FyZHMqKgoyLiAqKlN0YWtlIHRvIFdpbioqIChvdXIgdW5pcXVlLCBuby1sb3NzIHByaXplIHN5c3RlbSkKCiMjIyBQYXNzaXZlIFN0YWtpbmcKClBhc3NpdmUgc3Rha2luZyByZXdhcmRzIGFyZSBhdXRvbWF0aWNhbGx5IGVhcm5lZCBvdmVyIHRpbWUuIE9uY2UgeW91ciB0b2tlbnMgYXJlIHN0YWtlZCwgdGhleSBiZWdpbiBhY2N1bXVsYXRpbmcgcmV3YXJkcyB3aXRob3V0IGFueSBmdXJ0aGVyIGFjdGlvbiByZXF1aXJlZCBmcm9tIHlvdS4KCi0gTm8gbmVlZCB0byBjaGVjayBpbiBkYWlseQotIFlvdSBjYW4gdW5zdGFrZSBhdCBhbnkgdGltZSAoc3ViamVjdCB0byBhIDQ1LWRheSBjb29sLWRvd24pCgpUaGlzIGlzIGlkZWFsIGZvciBhbnlvbmUgd2hvIHdhbnRzIGEgaGFuZHMtb2ZmLCBjb25zaXN0ZW50IHdheSB0byBlYXJuIGZyb20gdGhlaXIgdG9rZW5zLgoKIyMjIFN0YWtlIHRvIFdpbgoKU3Rha2UgdG8gV2luIGlzIG91ciBpbnRlcmFjdGl2ZSwgbm8tbG9zcyBwcml6ZSBzeXN0ZW0gZGVzaWduZWQgdG8gbWFrZSBzdGFraW5nIG1vcmUgZnVuIGFuZCBlbmdhZ2luZy4gSW4gYWRkaXRpb24gdG8gcGFzc2l2ZSByZXdhcmRzLCBzdGFrZXJzIGdldCBhY2Nlc3MgdG8gZGFpbHkgYW5kIHdlZWtseSBnYW1lcyB3aGVyZSB5b3UgY2FuIHdpbiBleHRyYSBwcml6ZXMsIHdpdGhvdXQgcmlza2luZyB5b3VyIHRva2Vucy4KCkhlcmUncyB3aGF0IHlvdSBnZXQ6CgotIPCfjrAgKipEYWlseSBTbG90cyoqIOKAkyBTcGluIG9uY2UgcGVyIGRheSBmb3IgYSBjaGFuY2UgdG8gd2luIGJvbnVzIHJld2FyZHMKLSDwn46hICoqU3BpbiB0aGUgV2hlZWwqKiDigJMgQW5vdGhlciBjaGFuY2UgdG8gd2luLCBhdmFpbGFibGUgZGFpbHkgIAotIPCfj4YgKipXZWVrbHkgUHJpemUgUG9vbCoqIOKAkyBFbnRlciBvbmNlIHBlciB3ZWVrLCB3aXRoIHdpbm5lcnMgZHJhd24gYXQgdGhlIGVuZCBvZiB0aGUgd2VlawoKPENoZWNrPgpUaGVyZSdzIG5vIGRvd25zaWRlLiBZb3VyIHRva2VucyBzdGF5IHN0YWtlZCwgYW5kIHlvdSBnZXQgbXVsdGlwbGUgY2hhbmNlcyB0byB3aW4gZXZlcnkgd2Vlay4gSXQncyBhbGwgdXBzaWRlIQo8L0NoZWNrPgoKPEluZm8+ClN0YWtpbmcgY29tYmluZXMgdGhlIHNlY3VyaXR5IG9mIHBhc3NpdmUgaW5jb21lIHdpdGggdGhlIGV4Y2l0ZW1lbnQgb2YgcHJpemUgZ2FtZXMsIGNyZWF0aW5nIGEgdW5pcXVlIGFuZCByZXdhcmRpbmcgZXhwZXJpZW5jZSBmb3IgQjMgdG9rZW4gaG9sZGVycy4KPC9JbmZvPgo=",
    "lastUpdated": "2025-09-03T03:26:25.115Z"
  },
  {
    "sourceFile": "learn/staking-rewards/stake-to-win.mdx",
    "sourceHash": "ClN0YWtlIHRvIFdpbiBpcyBCMydzIG5vLWxvc3MgcHJpemUgc3lzdGVtIHRoYXQgcmV3YXJkcyB5b3UganVzdCBmb3Igc3Rha2luZyB5b3VyIHRva2Vucy4gT25jZSB5b3UncmUgaW4sIHlvdSB1bmxvY2sgYWNjZXNzIHRvIGEgZ3Jvd2luZyBsaXN0IG9mIGRhaWx5IGFuZCB3ZWVrbHkgZ2FtZXMsIHBsdXMgYSBzdXJwcmlzZSBtb250aGx5IG1lZ2EgcHJpemUhIE5vIGFkZGl0aW9uYWwgc3BlbmQgYW5kIG5vIGZlZXMgLSBqdXN0IHJld2FyZHMgZm9yIHN0YXlpbmcgc3Rha2VkLgoKIyMgVGllci1CYXNlZCBSZXdhcmRzCgpZb3VyIHJld2FyZCB0aWVyIGlzIGJhc2VkIG9uIGhvdyBtdWNoIEIzIHlvdSBoYXZlIHN0YWtlZC4gVGhlIGhpZ2hlciB5b3VyIHRpZXIsIHRoZSBiaWdnZXIgdGhlIHByaXplIHBvb2xzIHlvdSdyZSBlbGlnaWJsZSBmb3IuCgojIyMgV2hhbGUgVGllcgotICoqMTAwLDAwMCsgQjMgc3Rha2VkKioKLSBBY2Nlc3MgdG8gdGhlIGxhcmdlc3QgcHJpemUgcG9vbHMgYW5kIGhpZ2hlc3QtdGllciByZXdhcmRzCgojIyMgR3JpbmRlciBUaWVyCi0gKiozLDAwMCDigJMgOTksOTk5IEIzIHN0YWtlZCoqCi0gQmFsYW5jZWQgcmV3YXJkcyBmb3IgcmVndWxhciBzdGFrZXJzCgojIyMgUm9va2llIFRpZXIKLSAqKjEsMDAwIOKAkyAyLDk5OSBCMyBzdGFrZWQqKgotIEdyZWF0IGZvciBuZXcgcGxheWVycyBnZXR0aW5nIHN0YXJ0ZWQKCjxOb3RlPgpZb3UgY2FuIHBhcnRpY2lwYXRlIGluIGFsbCBnYW1lcyBhcyBsb25nIGFzIHlvdSBoYXZlIGF0IGxlYXN0ICoqMSwwMDAgQjMgc3Rha2VkKiouCjwvTm90ZT4KCiMjIEN1cnJlbnQgR2FtZXMKCiMjIyBEYWlseSBTbG90cwotIFNwaW4gb25jZSBwZXIgZGF5IGZvciBhIGNoYW5jZSBhdCBpbnN0YW50IEIzIHJld2FyZHMKCiMjIyBEYWlseSBTcGluIHRoZSBXaGVlbAotIFNwaW4gdGhlIHdoZWVsIGRhaWx5IGFuZCBzZWUgd2hhdCBsdWNrIGJyaW5ncyB5b3UKCiMjIyBXZWVrbHkgUHJpemUgUG9vbAotIEVudGVyIHdlZWtseSwgYmV0d2VlbiBNb25kYXkgYW5kIEZyaWRheSBmb3IgYSBjaGFuY2UgdG8gd2luCi0gVGhyZWUgd2lubmVycyBwZXIgdGllciBlYWNoIHdlZWsKCjxDaGVjaz4KQWxsIGdhbWVzIGFyZSBjb21wbGV0ZWx5IGZyZWUgdG8gcGxheSBvbmNlIHlvdSdyZSBzdGFraW5nLiBUaGVyZSBhcmUgbm8gYWRkaXRpb25hbCBjb3N0cyBvciBmZWVzLgo8L0NoZWNrPgoKPFRpcD4KVGhlIGJlYXV0eSBvZiBTdGFrZSB0byBXaW4gaXMgdGhhdCBpdCdzIHRydWx5IG5vLWxvc3MgLSB5b3VyIHN0YWtlZCB0b2tlbnMgcmVtYWluIHNlY3VyZSB3aGlsZSB5b3UgZ2V0IG11bHRpcGxlIGNoYW5jZXMgdG8gd2luIGFkZGl0aW9uYWwgcmV3YXJkcyBldmVyeSB3ZWVrLgo8L1RpcD4K",
    "lastUpdated": "2025-09-03T03:26:46.741Z"
  },
  {
    "sourceFile": "learn/staking-rewards/how-to-unstake-your-tokens.mdx",
    "sourceHash": "ClVuc3Rha2luZyBsZXRzIHlvdSBiZWdpbiB0aGUgcHJvY2VzcyBvZiBtb3ZpbmcgeW91ciBCMyB0b2tlbnMgb3V0IG9mIHN0YWtpbmcgYW5kIGJhY2sgaW50byB5b3VyIHdhbGxldC4gVGhpcyBpcyBhIDItcGFydCBwcm9jZXNzLCByZXF1aXJpbmcgYSA0NS1kYXkgY29vbGRvd24gYmVmb3JlIHlvdSBhcmUgYWJsZSB0byBjb21wbGV0ZSB0aGUgdW5zdGFraW5nIHByb2Nlc3MuIEZvbGxvdyB0aGlzIHF1aWNrIGd1aWRlIGZvciBhIHN0ZXAtYnktc3RlcCBvbiBob3cgdG8gdW5zdGFrZSB5b3VyIHRva2Vucy4KCiMjIFN0ZXBzIHRvIFVuc3Rha2UgLSBQYXJ0IDEKCjxpZnJhbWUKICBjbGFzc05hbWU9InctZnVsbCBhc3BlY3QtdmlkZW8gcm91bmRlZC14bCIKICBzcmM9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkL1lqYUk4d09URlU4IgogIHRpdGxlPSJIb3cgdG8gc3RhcnQgdGhlIHVuc3Rha2luZyBwcm9jZXNzIC0gUGFydCAxIgogIGZyYW1lQm9yZGVyPSIwIgogIGFsbG93PSJhY2NlbGVyb21ldGVyOyBhdXRvcGxheTsgY2xpcGJvYXJkLXdyaXRlOyBlbmNyeXB0ZWQtbWVkaWE7IGd5cm9zY29wZTsgcGljdHVyZS1pbi1waWN0dXJlIgogIGFsbG93RnVsbFNjcmVlbgo+PC9pZnJhbWU+Cgo8U3RlcHM+CjxTdGVwIHRpdGxlPSJOYXZpZ2F0ZSB0byBzdGFraW5nIHBsYXRmb3JtIj4KICBHbyB0byBbc3Rha2UuYjMuZnVuXShodHRwczovL3N0YWtlLmIzLmZ1bi8pIGFuZCBsb2cgaW4gdXNpbmcgeW91ciBwcmVmZXJyZWQgbG9naW4gbWV0aG9kLgo8L1N0ZXA+Cgo8U3RlcCB0aXRsZT0iU3RhcnQgdW5zdGFraW5nIj4KICBDbGljayAqKlVuc3Rha2UqKi4KICAKICA8RnJhbWU+CiAgICA8aW1nIHNyYz0iaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2hlbHBzY291dC5uZXQvZG9jcy9hc3NldHMvNjg1MzA2YjcyZTA1NTAyNzdhYTkyNTBlL2ltYWdlcy82ODgwY2FhNzQwMWU1ZjIyNDEyZDZmMDcvZmlsZS1SUFV5TVpMR1F3LnBuZyIgYWx0PSJVbnN0YWtlIGJ1dHRvbiBvbiB0aGUgc3Rha2luZyBkYXNoYm9hcmQiIC8+CiAgPC9GcmFtZT4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IkNvbmZpcm0gdW5zdGFraW5nIj4KICBDbGljayAqKlVuc3Rha2UqKiBhZ2FpbiBvbiB0aGUgbmV4dCBzY3JlZW4uCiAgCiAgPEZyYW1lPgogICAgPGltZyBzcmM9Imh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9oZWxwc2NvdXQubmV0L2RvY3MvYXNzZXRzLzY4NTMwNmI3MmUwNTUwMjc3YWE5MjUwZS9pbWFnZXMvNjg4MGQ1OGVjMTFlN2QxNDU0NzE5MTQzL2ZpbGUtY2JwdzI4YnhzNy5wbmciIGFsdD0iVW5zdGFrZSBjb25maXJtYXRpb24gZGlhbG9nIiAvPgogIDwvRnJhbWU+CjwvU3RlcD4KCjxTdGVwIHRpdGxlPSJDb25maWd1cmUgdW5zdGFraW5nIj4KICBFbnRlciB0aGUgYW1vdW50IHlvdSB3YW50IHRvIHVuc3Rha2UsIHdoZXJlIHlvdSB3YW50IHRvIHVuc3Rha2UgZnJvbSAoYm9udXMgb3IgcmVndWxhciBzdGFrZWQgdG9rZW5zKSwgYW5kIHRoZW4gY2xpY2sgKipSZWRlZW0qKi4KICAKICA8RnJhbWU+CiAgICA8aW1nIHNyYz0iaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2hlbHBzY291dC5uZXQvZG9jcy9hc3NldHMvNjg1MzA2YjcyZTA1NTAyNzdhYTkyNTBlL2ltYWdlcy82ODgwZDViNmEzMDk0OTU0ODZkMTUyMjIvZmlsZS1DQjIyNlFsOGl1LnBuZyIgYWx0PSJVbnN0YWtpbmcgY29uZmlndXJhdGlvbiB3aXRoIGFtb3VudCBhbmQgc291cmNlIHNlbGVjdGlvbiIgLz4KICA8L0ZyYW1lPgo8L1N0ZXA+Cgo8U3RlcCB0aXRsZT0iQ29uZmlybSB0cmFuc2FjdGlvbiI+CiAgQ29uZmlybSB0aGUgdHJhbnNhY3Rpb24gaW4geW91ciB3YWxsZXQgdG8gY29tcGxldGUgdGhlIGZpcnN0IGhhbGYgb2YgdGhlIHVuc3Rha2luZyBwcm9jZXNzLiBPbmNlIGNvbXBsZXRlLCB5b3VyIHRva2VucyB3aWxsIGVudGVyIGEgNDUtZGF5IGNvb2wtZG93biBwZXJpb2QuIER1cmluZyB0aGlzIHRpbWUsIHlvdSBtdXN0IHdhaXQgNDUgZGF5cyBiZWZvcmUgeW91IGNhbiB3aXRoZHJhdyB5b3VyIHRva2VucyBmcm9tIHRoZSBwb29sLgogIAogIDxGcmFtZT4KICAgIDxpbWcgc3JjPSJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vaGVscHNjb3V0Lm5ldC9kb2NzL2Fzc2V0cy82ODUzMDZiNzJlMDU1MDI3N2FhOTI1MGUvaW1hZ2VzLzY4ODBkNmE4YzExZTdkMTQ1NDcxOTE0Yi9maWxlLTIzd2NOOUdJVjQucG5nIiBhbHQ9IlRyYW5zYWN0aW9uIGNvbmZpcm1hdGlvbiBhbmQgY29vbGRvd24gbm90aWZpY2F0aW9uIiAvPgogIDwvRnJhbWU+CiAgCiAgPFdhcm5pbmc+CiAgICBZb3VyIHRva2VucyBhcmUgbm93IGluIGEgNDUtZGF5IGNvb2xkb3duIHBlcmlvZC4gWW91IGNhbm5vdCBhY2Nlc3MgdGhlbSB1bnRpbCB0aGlzIHBlcmlvZCBlbmRzLgogIDwvV2FybmluZz4KPC9TdGVwPgo8L1N0ZXBzPgoKIyMgU3RlcHMgdG8gVW5zdGFrZSAtIFBhcnQgMgoKPGlmcmFtZQogIGNsYXNzTmFtZT0idy1mdWxsIGFzcGVjdC12aWRlbyByb3VuZGVkLXhsIgogIHNyYz0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvY1dGNjBHYTYzemMiCiAgdGl0bGU9IkhvdyB0byBjb21wbGV0ZSB0aGUgdW5zdGFraW5nIHByb2Nlc3MgLSBQYXJ0IDIiCiAgZnJhbWVCb3JkZXI9IjAiCiAgYWxsb3c9ImFjY2VsZXJvbWV0ZXI7IGF1dG9wbGF5OyBjbGlwYm9hcmQtd3JpdGU7IGVuY3J5cHRlZC1tZWRpYTsgZ3lyb3Njb3BlOyBwaWN0dXJlLWluLXBpY3R1cmUiCiAgYWxsb3dGdWxsU2NyZWVuCj48L2lmcmFtZT4KCjxTdGVwcz4KPFN0ZXAgdGl0bGU9IlJldHVybiBhZnRlciBjb29sZG93biI+CiAgR28gdG8gW3N0YWtlLmIzLmZ1bl0oaHR0cHM6Ly9zdGFrZS5iMy5mdW4vKSBhbmQgbG9nIGluIHVzaW5nIHlvdXIgcHJlZmVycmVkIGxvZ2luIG1ldGhvZC4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IkFjY2VzcyB1bnN0YWtpbmciPgogIENsaWNrICoqVW5zdGFrZSoqIGZyb20gdGhlIG1haW4gcGFnZS4KICAKICA8RnJhbWU+CiAgICA8aW1nIHNyYz0iaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2hlbHBzY291dC5uZXQvZG9jcy9hc3NldHMvNjg1MzA2YjcyZTA1NTAyNzdhYTkyNTBlL2ltYWdlcy82ODgwY2FhNzQwMWU1ZjIyNDEyZDZmMDcvZmlsZS1SUFV5TVpMR1F3LnBuZyIgYWx0PSJVbnN0YWtlIGJ1dHRvbiBmb3IgYWNjZXNzaW5nIHdpdGhkcmF3YWwgb3B0aW9ucyIgLz4KICA8L0ZyYW1lPgo8L1N0ZXA+Cgo8U3RlcCB0aXRsZT0iRmluZCB5b3VyIHBlbmRpbmcgd2l0aGRyYXdhbCI+CiAgTG9jYXRlIHRoZSB0cmFuc2FjdGlvbiB3aXRoIHlvdXIgcHJldmlvdXNseSB3aXRoZHJhd24gdG9rZW4uIElmIDQ1IGRheXMgaGF2ZSBwYXNzZWQgc2luY2UgeW91IGluaXRpYXRlZCB0aGUgcmVkZWVtIHJlcXVlc3QsIHlvdSBzaG91bGQgbm93IHNlZSB0aGUgb3B0aW9uIHRvIHdpdGhkcmF3IHlvdXIgdG9rZW5zLiBDbGljayAqKldpdGhkcmF3KiouCiAgCiAgPEZyYW1lPgogICAgPGltZyBzcmM9Imh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9oZWxwc2NvdXQubmV0L2RvY3MvYXNzZXRzLzY4NTMwNmI3MmUwNTUwMjc3YWE5MjUwZS9pbWFnZXMvNjg4MGQ5MTBhMzA5NDk1NDg2ZDE1MjQ0L2ZpbGUtaFY0NGlLY2ZlQS5wbmciIGFsdD0iV2l0aGRyYXcgYnV0dG9uIGF2YWlsYWJsZSBhZnRlciBjb29sZG93biBwZXJpb2QiIC8+CiAgPC9GcmFtZT4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IkNvbXBsZXRlIHdpdGhkcmF3YWwiPgogIFlvdSdsbCBiZSBwcm9tcHRlZCB0byBjb25maXJtIHlvdXIgd2l0aGRyYXdhbC4gQ2xpY2sgKipDb25maXJtKiogYW5kIHRoZW4gY29uZmlybSB0aGUgdHJhbnNhY3Rpb24gYWdhaW4gaW4geW91ciB3YWxsZXQgdG8gY29tcGxldGUgdGhlIHdpdGhkcmF3YWwgcHJvY2Vzcy4KICAKICA8RnJhbWU+CiAgICA8aW1nIHNyYz0iaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2hlbHBzY291dC5uZXQvZG9jcy9hc3NldHMvNjg1MzA2YjcyZTA1NTAyNzdhYTkyNTBlL2ltYWdlcy82ODgwZDk3Y2IyOGVjZjE2NjM5YzhiYTIvZmlsZS00eEFVN294azcxLnBuZyIgYWx0PSJGaW5hbCB3aXRoZHJhd2FsIGNvbmZpcm1hdGlvbiBkaWFsb2ciIC8+CiAgPC9GcmFtZT4KICAKICA8Q2hlY2s+CiAgICBPbmNlIGNvbmZpcm1lZCwgeW91ciB0b2tlbnMgd2lsbCBiZSBhdmFpbGFibGUgaW4geW91ciB3YWxsZXQgZm9yIHVzZS4KICA8L0NoZWNrPgo8L1N0ZXA+CjwvU3RlcHM+Cgo8SW5mbz4KVGhlIDQ1LWRheSBjb29sZG93biBwZXJpb2QgaXMgZGVzaWduZWQgdG8gZW5zdXJlIHRoZSBzdGFiaWxpdHkgb2YgdGhlIHN0YWtpbmcgcG9vbC4gRHVyaW5nIHRoaXMgdGltZSwgeW91ciB0b2tlbnMgYXJlIG5vdCBlYXJuaW5nIHJld2FyZHMgYnV0IGFyZSBhbHNvIG5vdCBhdmFpbGFibGUgZm9yIHVzZS4KPC9JbmZvPgo=",
    "lastUpdated": "2025-09-03T03:27:24.942Z"
  },
  {
    "sourceFile": "learn/staking-rewards/how-to-stake-b3.mdx",
    "sourceHash": "ClN0YWtpbmcgeW91ciBCMyB0b2tlbnMgaXMgcXVpY2sgYW5kIGVhc3ksIGFuZCB1bmxvY2tzIGJvdGggcGFzc2l2ZSByZXdhcmRzIGFuZCBhY2Nlc3MgdG8gb3VyIFN0YWtlIHRvIFdpbiBwcml6ZSBzeXN0ZW0uIEluIHRoaXMgZ3VpZGUsIHdlJ2xsIHdhbGsgeW91IHRocm91Z2ggdGhlIHNpbXBsZSBzdGVwcyB0byBzdGFydCBzdGFraW5nIGRpcmVjdGx5IG9uIHRoZSBwbGF0Zm9ybS4KCiMjIE9wdGlvbiAxOiBTdGFrZSB3aXRoIEIzIFlvdSBBbHJlYWR5IE93bgoKPGlmcmFtZQogIGNsYXNzTmFtZT0idy1mdWxsIGFzcGVjdC12aWRlbyByb3VuZGVkLXhsIgogIHNyYz0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvWnU1VG5wVUJMNmsiCiAgdGl0bGU9IkhvdyB0byBzdGFrZSBCMyB0b2tlbnMgeW91IGFscmVhZHkgb3duIgogIGZyYW1lQm9yZGVyPSIwIgogIGFsbG93PSJhY2NlbGVyb21ldGVyOyBhdXRvcGxheTsgY2xpcGJvYXJkLXdyaXRlOyBlbmNyeXB0ZWQtbWVkaWE7IGd5cm9zY29wZTsgcGljdHVyZS1pbi1waWN0dXJlIgogIGFsbG93RnVsbFNjcmVlbgo+PC9pZnJhbWU+Cgo8U3RlcHM+CjxTdGVwIHRpdGxlPSJOYXZpZ2F0ZSB0byBzdGFraW5nIHBsYXRmb3JtIj4KICBHbyB0byBbc3Rha2UuYjMuZnVuXShodHRwczovL3N0YWtlLmIzLmZ1bi8pIGFuZCBzaWduIGludG8geW91ciBhY2NvdW50IHVzaW5nIHlvdXIgY2hvc2VuIGxvZ2luIG1ldGhvZC4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IlN0YXJ0IHN0YWtpbmcgcHJvY2VzcyI+CiAgQ2xpY2sgKipTdGFrZSBtb3JlIEIzKyoqLgogIAogIDxGcmFtZT4KICAgIDxpbWcgc3JjPSJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vaGVscHNjb3V0Lm5ldC9kb2NzL2Fzc2V0cy82ODUzMDZiNzJlMDU1MDI3N2FhOTI1MGUvaW1hZ2VzLzY4N2Y5N2NiNmE0ZjY0MDEyNTE3MzBiYi9maWxlLTdsRGhUWHIyR1UucG5nIiBhbHQ9IlN0YWtlIG1vcmUgQjMrIGJ1dHRvbiBvbiB0aGUgc3Rha2luZyBkYXNoYm9hcmQiIC8+CiAgPC9GcmFtZT4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IkVudGVyIHN0YWtlIGFtb3VudCI+CiAgRW50ZXIgdGhlIGFtb3VudCB5b3Ugd2lzaCB0byBzdGFrZSBhbmQgdGhlbiBjbGljayAqKlN0YWtlIGFuZCBFYXJuKiouCiAgCiAgPEZyYW1lPgogICAgPGltZyBzcmM9Imh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9oZWxwc2NvdXQubmV0L2RvY3MvYXNzZXRzLzY4NTMwNmI3MmUwNTUwMjc3YWE5MjUwZS9pbWFnZXMvNjg3Zjk3ZWE4NTE4ZDI1MTZkMWE0NWUxL2ZpbGUtcnpzUkRCTm9heS5wbmciIGFsdD0iQW1vdW50IGlucHV0IGZpZWxkIHdpdGggU3Rha2UgYW5kIEVhcm4gYnV0dG9uIiAvPgogIDwvRnJhbWU+CjwvU3RlcD4KCjxTdGVwIHRpdGxlPSJDb25maXJtIHRyYW5zYWN0aW9uIj4KICBDb25maXJtIHRoZSB0cmFuc2FjdGlvbiBpbiB5b3VyIHdhbGxldCB0byBjb21wbGV0ZSB0aGUgcHJvY2VzcyBvZiBzdGFraW5nIHlvdXIgQjMuCiAgCiAgPEZyYW1lPgogICAgPGltZyBzcmM9Imh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9oZWxwc2NvdXQubmV0L2RvY3MvYXNzZXRzLzY4NTMwNmI3MmUwNTUwMjc3YWE5MjUwZS9pbWFnZXMvNjg3ZjlhNTAxODVjMTMzYjJjMGE0OGFhL2ZpbGUtRzZ0NzZHQ2gxei5wbmciIGFsdD0iV2FsbGV0IGNvbmZpcm1hdGlvbiBkaWFsb2cgZm9yIHN0YWtpbmcgdHJhbnNhY3Rpb24iIC8+CiAgPC9GcmFtZT4KICAKICA8Q2hlY2s+CiAgICBZb3VyIHRva2VucyBhcmUgbm93IHN0YWtlZCBhbmQgZWFybmluZyByZXdhcmRzIQogIDwvQ2hlY2s+CjwvU3RlcD4KPC9TdGVwcz4KCiMjIE9wdGlvbiAyOiBTd2FwICYgU3Rha2UgZnJvbSBPdGhlciBUb2tlbnMKCjxpZnJhbWUKICBjbGFzc05hbWU9InctZnVsbCBhc3BlY3QtdmlkZW8gcm91bmRlZC14bCIKICBzcmM9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLzR0aVppbUpJdl9NIgogIHRpdGxlPSJIb3cgdG8gc3dhcCBhbmQgc3Rha2UgZnJvbSBvdGhlciB0b2tlbnMiCiAgZnJhbWVCb3JkZXI9IjAiCiAgYWxsb3c9ImFjY2VsZXJvbWV0ZXI7IGF1dG9wbGF5OyBjbGlwYm9hcmQtd3JpdGU7IGVuY3J5cHRlZC1tZWRpYTsgZ3lyb3Njb3BlOyBwaWN0dXJlLWluLXBpY3R1cmUiCiAgYWxsb3dGdWxsU2NyZWVuCj48L2lmcmFtZT4KCjxTdGVwcz4KPFN0ZXAgdGl0bGU9Ik5hdmlnYXRlIHRvIHN0YWtpbmcgcGxhdGZvcm0iPgogIEdvIHRvIFtzdGFrZS5iMy5mdW5dKGh0dHBzOi8vc3Rha2UuYjMuZnVuLykgYW5kIHNpZ24gaW50byB5b3VyIGFjY291bnQgdXNpbmcgeW91ciBjaG9zZW4gbG9naW4gbWV0aG9kLgo8L1N0ZXA+Cgo8U3RlcCB0aXRsZT0iU3RhcnQgc3Rha2luZyBwcm9jZXNzIj4KICBDbGljayAqKlN0YWtlIG1vcmUgQjMrKiouCiAgCiAgPEZyYW1lPgogICAgPGltZyBzcmM9Imh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9oZWxwc2NvdXQubmV0L2RvY3MvYXNzZXRzLzY4NTMwNmI3MmUwNTUwMjc3YWE5MjUwZS9pbWFnZXMvNjg3Zjk3Y2I2YTRmNjQwMTI1MTczMGJiL2ZpbGUtN2xEaFRYcjJHVS5wbmciIGFsdD0iU3Rha2UgbW9yZSBCMysgYnV0dG9uIGhpZ2hsaWdodGVkIiAvPgogIDwvRnJhbWU+CjwvU3RlcD4KCjxTdGVwIHRpdGxlPSJDaG9vc2Ugc3dhcCBvcHRpb24iPgogIFRoZW4gY2xpY2sgKipTd2FwICYgc3Rha2UqKiBmcm9tIGFueSBjcnlwdG8uCiAgCiAgPEZyYW1lPgogICAgPGltZyBzcmM9Imh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9oZWxwc2NvdXQubmV0L2RvY3MvYXNzZXRzLzY4NTMwNmI3MmUwNTUwMjc3YWE5MjUwZS9pbWFnZXMvNjg3ZjlmY2NiMjhlY2YxNjYzOWM4NjNiL2ZpbGUtUUtTQVRkZUZFdC5wbmciIGFsdD0iU3dhcCAmIHN0YWtlIG9wdGlvbiBmb3IgY29udmVydGluZyBvdGhlciB0b2tlbnMiIC8+CiAgPC9GcmFtZT4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IlNldCBhbW91bnQiPgogIEVudGVyIHRoZSBhbW91bnQgeW91IHdpc2ggdG8gc3Rha2UsIGFuZCB0aGVuIGNsaWNrICoqQ29udGludWUqKi4KICAKICA8RnJhbWU+CiAgICA8aW1nIHNyYz0iaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2hlbHBzY291dC5uZXQvZG9jcy9hc3NldHMvNjg1MzA2YjcyZTA1NTAyNzdhYTkyNTBlL2ltYWdlcy82ODdmYTI4ZjE4NWMxMzNiMmMwYTQ5MDEvZmlsZS13NGI4Ukw4VGc0LnBuZyIgYWx0PSJBbW91bnQgaW5wdXQgd2l0aCBDb250aW51ZSBidXR0b24iIC8+CiAgPC9GcmFtZT4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IlNlbGVjdCBzb3VyY2UgdG9rZW4iPgogIFlvdSdsbCB0aGVuIGJlIGFibGUgdG8gc2VsZWN0IHRoZSB0b2tlbiBhbmQgY2hhaW4geW91IHdhbnQgdG8gc3dhcCBmcm9tLgogIAogIDxGcmFtZT4KICAgIDxpbWcgc3JjPSJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vaGVscHNjb3V0Lm5ldC9kb2NzL2Fzc2V0cy82ODUzMDZiNzJlMDU1MDI3N2FhOTI1MGUvaW1hZ2VzLzY4N2ZhMjJiOTY1ZDgyNjZmZWJhMWZhMC9maWxlLVMwMkQ3S2I4WU4ucG5nIiBhbHQ9IlRva2VuIGFuZCBjaGFpbiBzZWxlY3Rpb24gaW50ZXJmYWNlIiAvPgogIDwvRnJhbWU+CjwvU3RlcD4KCjxTdGVwIHRpdGxlPSJSZXZpZXcgYW5kIGNoZWNrb3V0Ij4KICBPbmNlIHlvdSd2ZSBtYWRlIHlvdXIgc2VsZWN0aW9uLCBjbGljayAqKkNoZWNrb3V0KiouCiAgCiAgPEZyYW1lPgogICAgPGltZyBzcmM9Imh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9oZWxwc2NvdXQubmV0L2RvY3MvYXNzZXRzLzY4NTMwNmI3MmUwNTUwMjc3YWE5MjUwZS9pbWFnZXMvNjg3ZmEzMzRiMjhlY2YxNjYzOWM4NjUxL2ZpbGUtTVMyRFFRQUFpUy5wbmciIGFsdD0iQ2hlY2tvdXQgYnV0dG9uIGZvciBzd2FwIGFuZCBzdGFrZSB0cmFuc2FjdGlvbiIgLz4KICA8L0ZyYW1lPgo8L1N0ZXA+Cgo8U3RlcCB0aXRsZT0iQ29tcGxldGUgcGF5bWVudCI+CiAgTmV4dCwgY2xpY2sgKipQYXkgZnJvbSBDb25uZWN0ZWQgV2FsbGV0KiogKG9yIHlvdSBjYW4gY2hvb3NlIHRvIHBheSBmcm9tIGEgZGlmZmVyZW50IHdhbGxldCksIGFuZCB0aGVuIGNvbmZpcm0gdGhlIHRyYW5zYWN0aW9uIGluIHlvdXIgd2FsbGV0IHRvIGNvbXBsZXRlIHlvdXIgc3dhcCtzdGFrZS4KICAKICA8RnJhbWU+CiAgICA8aW1nIHNyYz0iaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2hlbHBzY291dC5uZXQvZG9jcy9hc3NldHMvNjg1MzA2YjcyZTA1NTAyNzdhYTkyNTBlL2ltYWdlcy82ODdmYTM2NTZhNGY2NDAxMjUxNzMxMjEvZmlsZS1jeVduUDBCVFl3LnBuZyIgYWx0PSJQYXltZW50IG1ldGhvZCBzZWxlY3Rpb24gYW5kIGZpbmFsIGNvbmZpcm1hdGlvbiIgLz4KICA8L0ZyYW1lPgogIAogIDxDaGVjaz4KICAgIFlvdXIgdG9rZW5zIHdpbGwgYmUgc3dhcHBlZCB0byBCMyBhbmQgYXV0b21hdGljYWxseSBzdGFrZWQsIGVhcm5pbmcgcmV3YXJkcyBpbW1lZGlhdGVseSEKICA8L0NoZWNrPgo8L1N0ZXA+CjwvU3RlcHM+Cgo8Tm90ZT4KVGhlIG1pbmltdW0gc3Rha2luZyBhbW91bnQgaXMgNTAgQjMuIE9uY2Ugc3Rha2VkLCB5b3VyIHRva2VucyB3aWxsIGltbWVkaWF0ZWx5IHN0YXJ0IGVhcm5pbmcgcGFzc2l2ZSByZXdhcmRzIGFuZCB1bmxvY2sgYWNjZXNzIHRvIFN0YWtlIHRvIFdpbiBnYW1lcy4KPC9Ob3RlPgo=",
    "lastUpdated": "2025-09-03T03:28:09.100Z"
  },
  {
    "sourceFile": "learn/staking-rewards/how-spin-the-wheel-works.mdx",
    "sourceHash": "ClNwaW4gdGhlIFdoZWVsIGlzIGEgc2ltcGxlIGRhaWx5IGdhbWUgdGhhdCBnaXZlcyBzdGFrZXJzIGEgY2hhbmNlIHRvIHdpbiBleHRyYSB0b2tlbnMgd2l0aCBqdXN0IG9uZSBjbGljay4gTm8gY2xhaW1zIG9yIGZvbGxvdy11cHMgbmVlZGVkLiBKdXN0IHNwaW4gYW5kIHNlZSB3aGF0IHlvdSBnZXQuIEFsbCByZXdhcmRzIGFyZSBzZW50IGRpcmVjdGx5IHRvIHlvdXIgd2FsbGV0LgoKIyMgSG93IHRvIFBsYXkgU3BpbiB0aGUgV2hlZWwKCjxpZnJhbWUKICBjbGFzc05hbWU9InctZnVsbCBhc3BlY3QtdmlkZW8gcm91bmRlZC14bCIKICBzcmM9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkL29nbHdUcWVsVW9FIgogIHRpdGxlPSJIb3cgdG8gcGxheSBzcGluIHRoZSB3aGVlbCIKICBmcmFtZUJvcmRlcj0iMCIKICBhbGxvdz0iYWNjZWxlcm9tZXRlcjsgYXV0b3BsYXk7IGNsaXBib2FyZC13cml0ZTsgZW5jcnlwdGVkLW1lZGlhOyBneXJvc2NvcGU7IHBpY3R1cmUtaW4tcGljdHVyZSIKICBhbGxvd0Z1bGxTY3JlZW4KPjwvaWZyYW1lPgoKPFN0ZXBzPgo8U3RlcCB0aXRsZT0iTmF2aWdhdGUgdG8gc3Rha2luZyBwbGF0Zm9ybSI+CiAgR28gdG8gW3N0YWtlLmIzLmZ1bl0oaHR0cDovL3N0YWtlLmIzLmZ1bikgYW5kIHNpZ24gaW4gdXNpbmcgeW91ciBwcmVmZXJyZWQgbG9naW4gbWV0aG9kLgo8L1N0ZXA+Cgo8U3RlcCB0aXRsZT0iQWNjZXNzIHNwaW4gdGhlIHdoZWVsIj4KICBTY3JvbGwgZG93biB0byB0aGUgc2VjdGlvbiBsYWJlbGVkICoqQnJvd3NlIEdhbWVzKiogYW5kIGNsaWNrICoqU3BpbiB0aGUgV2hlZWwqKiBpY29uLgogIAogIDxGcmFtZT4KICAgIDxpbWcgc3JjPSJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vaGVscHNjb3V0Lm5ldC9kb2NzL2Fzc2V0cy82ODUzMDZiNzJlMDU1MDI3N2FhOTI1MGUvaW1hZ2VzLzY4ODEwMDE2YzExZTdkMTQ1NDcxOTI4Yy9maWxlLVFYZU9DT2l1cXEucG5nIiBhbHQ9IlNwaW4gdGhlIFdoZWVsIG9wdGlvbiBpbiB0aGUgQnJvd3NlIEdhbWVzIHNlY3Rpb24iIC8+CiAgPC9GcmFtZT4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IlNwaW4gdGhlIHdoZWVsIj4KICBDbGljayAqKlNwaW4gdGhlIFdoZWVsKiosIHRoZW4gY29uZmlybSB0aGUgdHJhbnNhY3Rpb24gaW4geW91ciBjb25uZWN0ZWQgd2FsbGV0LgogIAogIDxGcmFtZT4KICAgIDxpbWcgc3JjPSJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vaGVscHNjb3V0Lm5ldC9kb2NzL2Fzc2V0cy82ODUzMDZiNzJlMDU1MDI3N2FhOTI1MGUvaW1hZ2VzLzY4ODEwMjA1ZWM3YzM3NTViNTcyNDI2Yi9maWxlLXNNZ00yTlAwTW0ucG5nIiBhbHQ9IlNwaW4gdGhlIFdoZWVsIGludGVyZmFjZSB3aXRoIHNwaW4gYnV0dG9uIiAvPgogIDwvRnJhbWU+CiAgCiAgPENoZWNrPgogICAgVGhhdCdzIGl0ISBZb3VyIHByaXplIHdpbGwgYmUgYXV0b21hdGljYWxseSBhZGRlZCB0byB5b3VyIHdhbGxldC4KICA8L0NoZWNrPgo8L1N0ZXA+CjwvU3RlcHM+CgojIyBHYW1lIFJ1bGVzCgotICoqT25lIHNwaW4gcGVyIGRheSBwZXIgd2FsbGV0KioKLSAqKkF1dG9tYXRpYyByZXdhcmRzKiogLSBubyBtYW51YWwgY2xhaW1pbmcgcmVxdWlyZWQKLSAqKk11c3QgaGF2ZSBhdCBsZWFzdCAxLDAwMCBCMyBzdGFrZWQqKiB0byBwYXJ0aWNpcGF0ZQotICoqRnJlZSB0byBwbGF5KiogLSBqdXN0IGNvbmZpcm0gdGhlIHRyYW5zYWN0aW9uCgo8VGlwPgpTcGluIHRoZSBXaGVlbCBpcyBvbmUgb2YgdGhlIHNpbXBsZXN0IHdheXMgdG8gZWFybiBib251cyByZXdhcmRzIC0ganVzdCBvbmUgY2xpY2sgcGVyIGRheSBhbmQgeW91ciBwcml6ZSBpcyBpbnN0YW50bHkgZGVsaXZlcmVkIHRvIHlvdXIgd2FsbGV0Lgo8L1RpcD4K",
    "lastUpdated": "2025-09-03T03:28:32.679Z"
  },
  {
    "sourceFile": "learn/staking-rewards/how-prize-pool-works.mdx",
    "sourceHash": "ClRoZSBXZWVrbHkgUHJpemUgUG9vbCBpcyB5b3VyIHNob3QgYXQgYmlnIHJld2FyZHMganVzdCBmb3IgYmVpbmcgYSBzdGFrZXIuIEV2ZXJ5IHdlZWssIHBsYXllcnMgZnJvbSBlYWNoIHJld2FyZCB0aWVyIC0gUm9va2llLCBHcmluZGVyLCBhbmQgV2hhbGUgLSBjYW4gZW50ZXIgdGhlIHBvb2wgZm9yIGEgY2hhbmNlIHRvIHdpbi4gWW91J2xsIG5lZWQgdG8gbWFudWFsbHkgam9pbiBiZXR3ZWVuIE1vbmRheSBhbmQgRnJpZGF5IGVhY2ggd2Vlay4gRWFjaCBGcmlkYXksIHRocmVlIGx1Y2t5IHBhcnRpY2lwYW50cyBmcm9tIGVhY2ggdGllciBhcmUgZHJhd24gYW5kIHJlY2VpdmUgcmV3YXJkcyBiYXNlZCBvbiB0aGVpciB0aWVyLgoKPFdhcm5pbmc+CiAgKipJbXBvcnRhbnQ6KiogTWFrZSBzdXJlIHRvIGVudGVyIHRoZSBXZWVrbHkgUHJpemUgUG9vbCBiZWZvcmUgRnJpZGF5IGF0IDE6MDAgUE0gVVRDLgo8L1dhcm5pbmc+CgojIyBIb3cgdG8gRW50ZXIgdGhlIFdlZWtseSBQcml6ZSBQb29sCgo8aWZyYW1lIGNsYXNzTmFtZT0idy1mdWxsIGFzcGVjdC12aWRlbyByb3VuZGVkLXhsIiBzcmM9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkL1hFZGxBQ2hFMmk4IiB0aXRsZT0iSG93IHRvIGVudGVyIHRoZSB3ZWVrbHkgcHJpemUgcG9vbCIgZnJhbWVCb3JkZXI9IjAiIGFsbG93PSJhY2NlbGVyb21ldGVyOyBhdXRvcGxheTsgY2xpcGJvYXJkLXdyaXRlOyBlbmNyeXB0ZWQtbWVkaWE7IGd5cm9zY29wZTsgcGljdHVyZS1pbi1waWN0dXJlIiBhbGxvd0Z1bGxTY3JlZW4gLz4KCjxTdGVwcz4KICA8U3RlcCB0aXRsZT0iTmF2aWdhdGUgdG8gc3Rha2luZyBwbGF0Zm9ybSI+CiAgICBHbyB0byBbc3Rha2UuYjMuZnVuXShodHRwczovL3N0YWtlLmIzLmZ1bi8pIGFuZCBsb2cgaW4gd2l0aCB5b3VyIHByZWZlcnJlZCBsb2dpbiBtZXRob2QuCiAgPC9TdGVwPgogIDxTdGVwIHRpdGxlPSJBY2Nlc3MgcHJpemUgcG9vbCI+CiAgICBTY3JvbGwgZG93biBhbmQgbG9jYXRlIHRoZSB0YWIgbGFiZWxlZCAqKkJyb3dzZSBHYW1lcyoqLiBIZXJlLCB5b3UnbGwgYmUgYWJsZSB0byBzZWxlY3QgKipQcml6ZSBQb29sKiogKG9yIGFueSBvdGhlciBnYW1lIHlvdSB3YW50IHRvIHBhcnRpY2lwYXRlIGluKS4KCiAgICA8RnJhbWU+CiAgICAgICFbQnJvd3NlIEdhbWVzIHNlY3Rpb24gd2l0aCBQcml6ZSBQb29sIG9wdGlvbiBoaWdobGlnaHRlZF0oaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2hlbHBzY291dC5uZXQvZG9jcy9hc3NldHMvNjg1MzA2YjcyZTA1NTAyNzdhYTkyNTBlL2ltYWdlcy82ODgwZWE3ZGMxMWU3ZDE0NTQ3MTkxZTQvZmlsZS14WHo0RmNxbW1qLnBuZykKICAgIDwvRnJhbWU+CiAgPC9TdGVwPgogIDxTdGVwIHRpdGxlPSJFbnRlciB0aGUgcG9vbCI+CiAgICBDbGljayAqKkVudGVyIHBvb2wgdG8gd2luKiogdG8gc3VibWl0IHlvdXIgZW50cnkuCgogICAgPEZyYW1lPgogICAgICAhW0VudGVyIHBvb2wgdG8gd2luIGJ1dHRvbl0oaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2hlbHBzY291dC5uZXQvZG9jcy9hc3NldHMvNjg1MzA2YjcyZTA1NTAyNzdhYTkyNTBlL2ltYWdlcy82ODgwZWIxN2EzMDk0OTU0ODZkMTUyY2QvZmlsZS0zdVBabU1zYVhZLnBuZykKICAgIDwvRnJhbWU+CiAgPC9TdGVwPgogIDxTdGVwIHRpdGxlPSJDb25maXJtIGVudHJ5Ij4KICAgIENvbmZpcm0gdGhlIHRyYW5zYWN0aW9uIGluIHlvdXIgd2FsbGV0IGFuZCBjb21lIGJhY2sgYWdhaW4gZXZlcnkgRnJpZGF5IHRvIGNoZWNrIGlmIHlvdSd2ZSB3b24uCgogICAgPEZyYW1lPgogICAgICAhW1RyYW5zYWN0aW9uIGNvbmZpcm1hdGlvbiBmb3IgcHJpemUgcG9vbCBlbnRyeV0oaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2hlbHBzY291dC5uZXQvZG9jcy9hc3NldHMvNjg1MzA2YjcyZTA1NTAyNzdhYTkyNTBlL2ltYWdlcy82ODgwZWI0MGEzMDk0OTU0ODZkMTUyY2YvZmlsZS1tbEtMQTltc0sxLnBuZykKICAgIDwvRnJhbWU+CiAgICA8Q2hlY2s+CiAgICAgIFlvdSdyZSBub3cgZW50ZXJlZCBpbiB0aGlzIHdlZWsncyBwcml6ZSBwb29sIQogICAgPC9DaGVjaz4KICA8L1N0ZXA+CjwvU3RlcHM+CgojIyBIb3cgV2lubmVycyBBcmUgU2VsZWN0ZWQKCi0gKipEcmF3aW5nIFRpbWU6KiogRXZlcnkgRnJpZGF5IGF0IDE6MDAgUE0gVVRDCi0gKipXaW5uZXJzIFBlciBUaWVyOioqIDMgd2lubmVycyBmcm9tIGVhY2ggdGllciAoUm9va2llLCBHcmluZGVyLCBXaGFsZSkKLSAqKlNlbGVjdGlvbjoqKiBSYW5kb20gZHJhd2luZyBmcm9tIGFsbCBlbGlnaWJsZSBlbnRyaWVzCi0gKipFbnRyeSBQZXJpb2Q6KiogTW9uZGF5IHRocm91Z2ggRnJpZGF5IGJlZm9yZSAxOjAwIFBNIFVUQwoKIyMgUmV3YXJkIEFtb3VudHMgcGVyIFRpZXIKCkVhY2ggdGllciBoYXMgYSBkaWZmZXJlbnQgcmV3YXJkIGFtb3VudDoKCi0gKipXaGFsZXM6KiogMjUwLDAwMCBCMyBlYWNoCi0gKipHcmluZGVyczoqKiAxMDAsMDAwIEIzIGVhY2gKLSAqKlJvb2tpZXM6KiogMjUsMDAwIEIzIGVhY2gKCiMjIENsYWltaW5nIFlvdXIgUHJpemUKCk9uY2UgdGhlIHJhZmZsZSBpcyBkcmF3biwgeW91IGNhbiByZXR1cm4gdG8gdGhlIHByaXplIHBvb2wgcGFnZSB0byBzZWUgaWYgeW91J3ZlIHdvbi4gSWYgc2VsZWN0ZWQsIHlvdSBoYXZlIHR3byBvcHRpb25zOgoKMS4gKipDbGFpbSBpbW1lZGlhdGVseSoqIHdpdGggYSAxMCUgZmVlIGRlZHVjdGVkICg1JSB0byB0aGUgcHJvdG9jb2wsIDUlIHRvIHRoZSBuZXh0IGphY2twb3QpCjIuICoqU3Rha2UgeW91ciB3aW5uaW5ncyoqIHdpdGggbm8gZmVlIGF0IGFsbAoKPFRpcD4KICBTdGFraW5nIHlvdXIgd2lubmluZ3MgaXMgdGhlIGJlc3Qgb3B0aW9uIGFzIHlvdSBhdm9pZCBmZWVzIGFuZCBjb250aW51ZSBlYXJuaW5nIHJld2FyZHMgb24geW91ciBwcml6ZSEKPC9UaXA+Cgo8Tm90ZT4KICBSZW1lbWJlciB0byBlbnRlciBlYWNoIHdlZWsgbWFudWFsbHkgLSBlbnRyaWVzIGRvbid0IGNhcnJ5IG92ZXIgdG8gdGhlIGZvbGxvd2luZyB3ZWVrLgo8L05vdGU+",
    "lastUpdated": "2025-10-31T02:49:09.411Z"
  },
  {
    "sourceFile": "learn/staking-rewards/how-daily-slots-work.mdx",
    "sourceHash": "CkRhaWx5IFNsb3RzIGlzIGEgcXVpY2sgYW5kIGVhc3kgd2F5IHRvIHRyeSB5b3VyIGx1Y2sgZm9yIGZyZWUgcmV3YXJkcyBldmVyeSBkYXkuIEp1c3QgbG9nIGluLCBwdWxsIHRoZSBsZXZlciwgYW5kIGxldCB0aGUgcmVlbHMgZGVjaWRlLiBBbnkgdG9rZW5zIHlvdSB3aW4gYXJlIHNlbnQgZGlyZWN0bHkgdG8geW91ciB3YWxsZXQgd2l0aCBubyBuZWVkIHRvIGNsYWltLgoKIyMgSG93IHRvIFBsYXkgRGFpbHkgU2xvdHMKCjxpZnJhbWUgY2xhc3NOYW1lPSJ3LWZ1bGwgYXNwZWN0LXZpZGVvIHJvdW5kZWQteGwiIHNyYz0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvb3FhSVcta3V6SGciIHRpdGxlPSJIb3cgdG8gcGxheSBkYWlseSBzbG90cyIgZnJhbWVCb3JkZXI9IjAiIGFsbG93PSJhY2NlbGVyb21ldGVyOyBhdXRvcGxheTsgY2xpcGJvYXJkLXdyaXRlOyBlbmNyeXB0ZWQtbWVkaWE7IGd5cm9zY29wZTsgcGljdHVyZS1pbi1waWN0dXJlIiBhbGxvd0Z1bGxTY3JlZW4gLz4KCjxTdGVwcz4KICA8U3RlcCB0aXRsZT0iTmF2aWdhdGUgdG8gc3Rha2luZyBwbGF0Zm9ybSI+CiAgICBHbyB0byBbc3Rha2UuYjMuZnVuXShodHRwOi8vc3Rha2UuYjMuZnVuKSBhbmQgc2lnbiBpbiB1c2luZyB5b3VyIHByZWZlcnJlZCBsb2dpbiBtZXRob2QuCiAgPC9TdGVwPgogIDxTdGVwIHRpdGxlPSJBY2Nlc3MgZGFpbHkgc2xvdHMiPgogICAgQ2xpY2sgdGhlICoqRnJlZSBTbG90cyEqKiBpY29uIG9uIHRoZSBtYWluIHBhZ2UuCgogICAgPEZyYW1lPgogICAgICAhW0ZyZWUgU2xvdHMgaWNvbiBvbiB0aGUgc3Rha2luZyBkYXNoYm9hcmRdKGh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9oZWxwc2NvdXQubmV0L2RvY3MvYXNzZXRzLzY4NTMwNmI3MmUwNTUwMjc3YWE5MjUwZS9pbWFnZXMvNjg4MTA1YTJhMzA5NDk1NDg2ZDE1M2M3L2ZpbGUtWVJtc1BUN0lUeC5wbmcpCiAgICA8L0ZyYW1lPgogIDwvU3RlcD4KICA8U3RlcCB0aXRsZT0iUHVsbCB0aGUgbGV2ZXIiPgogICAgT24gdGhlIGRhaWx5IHNsb3RzIHBhZ2UsIGNsaWNrICoqUHVsbCB0aGUgbGV2ZXIuKioKCiAgICA8RnJhbWU+CiAgICAgICFbUHVsbCB0aGUgbGV2ZXIgYnV0dG9uIG9uIHRoZSBzbG90cyBpbnRlcmZhY2VdKGh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9oZWxwc2NvdXQubmV0L2RvY3MvYXNzZXRzLzY4NTMwNmI3MmUwNTUwMjc3YWE5MjUwZS9pbWFnZXMvNjg4MTA2MDNiMjhlY2YxNjYzOWM4ZDE4L2ZpbGUtMFhDbnJjNnRaSC5wbmcpCiAgICA8L0ZyYW1lPgogIDwvU3RlcD4KICA8U3RlcCB0aXRsZT0iQ29uZmlybSB0cmFuc2FjdGlvbiI+CiAgICBDb25maXJtIHRoZSB0cmFuc2FjdGlvbiBpbiB5b3VyIGNvbm5lY3RlZCB3YWxsZXQgdG8gY29tcGxldGUgeW91ciBzcGluLgoKICAgIDxDaGVjaz4KICAgICAgWW91ciByZXdhcmQgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IHNlbnQgdG8geW91ciB3YWxsZXQhCiAgICA8L0NoZWNrPgogIDwvU3RlcD4KPC9TdGVwcz4KCiMjIEdhbWUgUnVsZXMKCi0gKipPbmUgcGxheSBwZXIgZGF5IHBlciB3YWxsZXQqKgotICoqTm8gY2xhaW1pbmcgcmVxdWlyZWQqKiAtIHJld2FyZHMgYXJlIHNlbnQgZGlyZWN0bHkgdG8geW91ciB3YWxsZXQKLSAqKk11c3QgaGF2ZSBhdCBsZWFzdCAxLDAwMCBCMyBzdGFrZWQqKiB0byBiZSBlbGlnaWJsZQotICoqQ29tcGxldGVseSBmcmVlKiogLSBubyBhZGRpdGlvbmFsIGNvc3RzCgo8SW5mbz4KICBEYWlseSBTbG90cyBpcyBkZXNpZ25lZCB0byBiZSBxdWljayBhbmQgZnVuIC0ganVzdCBvbmUgY2xpY2sgcGVyIGRheSBmb3IgYSBjaGFuY2UgYXQgYm9udXMgQjMgcmV3YXJkcyEKPC9JbmZvPg==",
    "lastUpdated": "2025-10-31T02:49:30.580Z"
  },
  {
    "sourceFile": "learn/games-experiences/how-to-start-a-wager-on-basement.mdx",
    "sourceHash": "CldhZ2VycyBvbiBCYXNlbWVudCBsZXQgeW91IGJldCB0b2tlbnMgb24geW91ciBza2lsbHMsIHdoZXRoZXIgeW91J3JlIGNoYWxsZW5naW5nIGEgZnJpZW5kIG9yIG9wZW5pbmcgaXQgdXAgZm9yIGFueW9uZSB0byBqb2luLiBJdCdzIGEgZnVuIHdheSB0byBhZGQgc3Rha2VzIHRvIHlvdXIgbWF0Y2hlcyBhbmQgcHJvdmUgd2hvJ3MgcmVhbGx5IG9uIHRvcC4gSGVyZSdzIGhvdyB0byBzdGFydCBhIHdhZ2VyIGFuZCBpbnZpdGUgb3RoZXJzIHRvIHBsYXkgZm9yIHJld2FyZHMuCgojIyBIb3cgdG8gU3RhcnQgYSBXYWdlcgoKPGlmcmFtZQogIGNsYXNzTmFtZT0idy1mdWxsIGFzcGVjdC12aWRlbyByb3VuZGVkLXhsIgogIHNyYz0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvQmI1Vm1hRXh6eDQiCiAgdGl0bGU9IkhvdyB0byBzdGFydCBhIHdhZ2VyIG9uIEJhc2VtZW50IgogIGZyYW1lQm9yZGVyPSIwIgogIGFsbG93PSJhY2NlbGVyb21ldGVyOyBhdXRvcGxheTsgY2xpcGJvYXJkLXdyaXRlOyBlbmNyeXB0ZWQtbWVkaWE7IGd5cm9zY29wZTsgcGljdHVyZS1pbi1waWN0dXJlIgogIGFsbG93RnVsbFNjcmVlbgo+PC9pZnJhbWU+Cgo8U3RlcHM+CjxTdGVwIHRpdGxlPSJTZWxlY3QgYSBnYW1lIj4KICBDbGljayBhbnkgZ2FtZSBvbiBbYmFzZW1lbnQuZnVuXShodHRwczovL2Jhc2VtZW50LmZ1bikuCjwvU3RlcD4KCjxTdGVwIHRpdGxlPSJBY2Nlc3Mgd2FnZXIgb3B0aW9ucyI+CiAgQ2xpY2sgdGhlIHN3b3JkIGljb24gYXQgdGhlIHRvcCBvZiB0aGUgZ2FtZSBkZXRhaWxzIHBhZ2UuCiAgCiAgPEZyYW1lPgogICAgPGltZyBzcmM9Imh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9oZWxwc2NvdXQubmV0L2RvY3MvYXNzZXRzLzY4NTMwNmI3MmUwNTUwMjc3YWE5MjUwZS9pbWFnZXMvNjg4MjRjZjc4ZTVkYTk0ODFlZDRiMjYxL2ZpbGUtTHQzWmh0YXZGby5wbmciIGFsdD0iU3dvcmQgaWNvbiBmb3IgY3JlYXRpbmcgd2FnZXIgY2hhbGxlbmdlcyBvbiBnYW1lIGRldGFpbHMgcGFnZSIgLz4KICA8L0ZyYW1lPgo8L1N0ZXA+Cgo8U3RlcCB0aXRsZT0iQ2hvb3NlIGNoYWxsZW5nZSB0eXBlIj4KICBDaG9vc2UgaG93IHlvdSB3YW50IHRvIHN0YXJ0IHlvdXIgY2hhbGxlbmdlOgogIC0gKipDaGFsbGVuZ2UgYSBmcmllbmQqKgogIC0gKipDcmVhdGUgYW4gb3BlbiBjaGFsbGVuZ2UqKiBmb3IgYW55b25lIHRvIGpvaW4KICAKICBJbiB0aGlzIGd1aWRlLCB3ZSdsbCBjcmVhdGUgYSBmcmllbmQgY2hhbGxlbmdlIGJ5IHNlbGVjdGluZyAqKkNoYWxsZW5nZSBGcmllbmRzKiouCiAgCiAgPEZyYW1lPgogICAgPGltZyBzcmM9Imh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9oZWxwc2NvdXQubmV0L2RvY3MvYXNzZXRzLzY4NTMwNmI3MmUwNTUwMjc3YWE5MjUwZS9pbWFnZXMvNjg4MjRlN2U0M2RjMTE3NDQwMjk1NjIzL2ZpbGUtSEJURnJXeEpUdS5wbmciIGFsdD0iQ2hhbGxlbmdlIHR5cGUgc2VsZWN0aW9uIGJldHdlZW4gZnJpZW5kcyBhbmQgb3BlbiBjaGFsbGVuZ2VzIiAvPgogIDwvRnJhbWU+CjwvU3RlcD4KCjxTdGVwIHRpdGxlPSJTZWxlY3QgeW91ciBvcHBvbmVudCI+CiAgRW50ZXIgeW91ciBmcmllbmQncyBuYW1lIGluIHRoZSBzZWFyY2ggZmllbGQgYW5kIHNlbGVjdCB0aGVpciBuYW1lIGZyb20gdGhlIGxpc3QuIENsaWNrICoqTmV4dCoqLgogIAogIDxGcmFtZT4KICAgIDxpbWcgc3JjPSJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vaGVscHNjb3V0Lm5ldC9kb2NzL2Fzc2V0cy82ODUzMDZiNzJlMDU1MDI3N2FhOTI1MGUvaW1hZ2VzLzY4ODI0ZjcxM2Q3ZTEyMDk5NzJlZDliOS9maWxlLXBzQXRNSFdQS3IucG5nIiBhbHQ9IkZyaWVuZCBzZWFyY2ggYW5kIHNlbGVjdGlvbiBpbnRlcmZhY2UiIC8+CiAgPC9GcmFtZT4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IlNldCB3YWdlciBwYXJhbWV0ZXJzIj4KICBTZWxlY3QgdGhlIGFtb3VudCB5b3Ugd291bGQgbGlrZSB0byB3YWdlciBhbmQgdGhlIGR1cmF0aW9uIG9mIHRoZSB3YWdlciBjaGFsbGVuZ2UuIFlvdSBtYXkgYWxzbyBlbnRlciBhIGN1c3RvbSBhbW91bnQuCiAgCiAgPEZyYW1lPgogICAgPGltZyBzcmM9Imh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9oZWxwc2NvdXQubmV0L2RvY3MvYXNzZXRzLzY4NTMwNmI3MmUwNTUwMjc3YWE5MjUwZS9pbWFnZXMvNjg4MjRmYzYwMzkzZWEzOTY2M2NlZjM2L2ZpbGUtVWd0SnV1RENqbC5wbmciIGFsdD0iV2FnZXIgYW1vdW50IGFuZCBkdXJhdGlvbiBzZWxlY3Rpb24gaW50ZXJmYWNlIiAvPgogIDwvRnJhbWU+CjwvU3RlcD4KCjxTdGVwIHRpdGxlPSJGdW5kIHlvdXIgd2FnZXIiPgogIEZ1bmQgeW91ciB3YWdlciBjaGFsbGVuZ2UgYnkgZGVwb3NpdGluZyBmdW5kcy4gU2ltcGx5IGNsaWNrICoqRGVwb3NpdCBCZXQqKiBhbmQgY29uZmlybSB0aGUgdHJhbnNhY3Rpb24gaW4geW91ciB3YWxsZXQuCiAgCiAgPEZyYW1lPgogICAgPGltZyBzcmM9Imh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9oZWxwc2NvdXQubmV0L2RvY3MvYXNzZXRzLzY4NTMwNmI3MmUwNTUwMjc3YWE5MjUwZS9pbWFnZXMvNjg4MjUwYzk4ZTVkYTk0ODFlZDRiMjlmL2ZpbGUtck5NVDBFbTg0TC5wbmciIGFsdD0iRGVwb3NpdCBCZXQgYnV0dG9uIGZvciBmdW5kaW5nIHRoZSB3YWdlciIgLz4KICA8L0ZyYW1lPgo8L1N0ZXA+Cgo8U3RlcCB0aXRsZT0iU2hhcmUgY2hhbGxlbmdlIGxpbmsiPgogIE9uY2UgeW91ciB3YWdlciBjaGFsbGVuZ2UgaGFzIGJlZW4gZnVuZGVkLCB5b3Ugd2lsbCBiZSBwcm92aWRlZCB3aXRoIGEgbGluayB0byBzaGFyZSB3aXRoIHlvdXIgb3Bwb25lbnQuIENsaWNrICoqQ29weSoqIHRvIGNvcHkgdGhlIGxpbmsgZm9yIHNoYXJpbmcuIFlvdXIgZnJpZW5kL29wcG9uZW50IHdpbGwgbmVlZCB0byBvcGVuIHRoZSBsaW5rLCBjb25maXJtIHRoZWlyIHN0YWtlLCBhbmQgam9pbiB0aGUgd2FnZXIgY2hhbGxlbmdlLgogIAogIDxGcmFtZT4KICAgIDxpbWcgc3JjPSJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vaGVscHNjb3V0Lm5ldC9kb2NzL2Fzc2V0cy82ODUzMDZiNzJlMDU1MDI3N2FhOTI1MGUvaW1hZ2VzLzY4ODI1MTZlMzM3ZGIwN2FhOTYxZDg3OC9maWxlLXdVcUxCbW45V0wucG5nIiBhbHQ9IlNoYXJlIGxpbmsgaW50ZXJmYWNlIHdpdGggY29weSBidXR0b24gZm9yIHdhZ2VyIGNoYWxsZW5nZSIgLz4KICA8L0ZyYW1lPgogIAogIDxDaGVjaz4KICAgIE9uY2UgYm90aCBwbGF5ZXJzIGhhdmUgZnVuZGVkIHRoZSBiZXQsIHlvdSBjYW4gc3RhcnQgcGxheWluZy4gQ29tcGV0ZSBhbmQgbGV0IHRoZSBiZXN0IHBsYXllciB3aW4hIFRoZSBwcml6ZSBwb29sIGdvZXMgdG8gdGhlIHdpbm5lciBvbmNlIHRoZSBjaGFsbGVuZ2UgaXMgY29tcGxldGUuCiAgPC9DaGVjaz4KPC9TdGVwPgo8L1N0ZXBzPgoKIyMgV2FnZXIgVHlwZXMKCiMjIyBGcmllbmQgQ2hhbGxlbmdlcwotIENoYWxsZW5nZSBzcGVjaWZpYyBwbGF5ZXJzIGJ5IHVzZXJuYW1lCi0gUHJpdmF0ZSBtYXRjaGVzIGJldHdlZW4ga25vd24gb3Bwb25lbnRzCi0gQ3VzdG9taXphYmxlIHN0YWtlcyBhbmQgZHVyYXRpb24KCiMjIyBPcGVuIENoYWxsZW5nZXMgIAotIENyZWF0ZSBwdWJsaWMgd2FnZXJzIGZvciBhbnlvbmUgdG8gam9pbgotIEZpcnN0LWNvbWUsIGZpcnN0LXNlcnZlZCBiYXNpcwotIEdyZWF0IGZvciBmaW5kaW5nIG5ldyBvcHBvbmVudHMKCjxJbmZvPgpCb3RoIHBsYXllcnMgbXVzdCBmdW5kIHRoZWlyIHBvcnRpb24gb2YgdGhlIHdhZ2VyIGJlZm9yZSB0aGUgbWF0Y2ggY2FuIGJlZ2luLiBUaGUgdG90YWwgcHJpemUgcG9vbCBnb2VzIHRvIHRoZSB3aW5uZXIgdXBvbiBjb21wbGV0aW9uLgo8L0luZm8+Cgo8VGlwPgpTdGFydCB3aXRoIHNtYWxsZXIgd2FnZXIgYW1vdW50cyB3aGVuIHBsYXlpbmcgd2l0aCBuZXcgb3Bwb25lbnRzIHRvIHRlc3QgdGhlIHdhdGVycyBiZWZvcmUgY29tbWl0dGluZyB0byBsYXJnZXIgc3Rha2VzLgo8L1RpcD4K",
    "lastUpdated": "2025-09-03T03:32:46.754Z"
  },
  {
    "sourceFile": "learn/games-experiences/how-to-join-a-tournament-on-basement.mdx",
    "sourceHash": "ClRvdXJuYW1lbnRzIG9uIEJhc2VtZW50IGFyZSB5b3VyIGNoYW5jZSB0byBjb21wZXRlIGZvciBwcml6ZXMsIGNsaW1iIHRoZSBsZWFkZXJib2FyZCwgYW5kIHRlc3QgeW91ciBza2lsbHMgYWdhaW5zdCBvdGhlciBwbGF5ZXJzLiBXaGV0aGVyIHlvdSdyZSBwbGF5aW5nIGZvciBmdW4gb3IgZ29pbmcgZm9yIHRoZSB0b3Agc3BvdCwgam9pbmluZyBhIHRvdXJuYW1lbnQgaXMgcXVpY2sgYW5kIGVhc3kuIEhlcmUncyBob3cgdG8gZ2V0IHN0YXJ0ZWQuCgojIyBIb3cgdG8gSm9pbiBhIFRvdXJuYW1lbnQKCjxTdGVwcz4KPFN0ZXAgdGl0bGU9IkxvZyBpbnRvIEJhc2VtZW50Ij4KICBHbyB0byBbKipiYXNlbWVudC5mdW4qKl0oaHR0cHM6Ly9iYXNlbWVudC5mdW4pLCBjbGljayAqKkpvaW4gdGhlIGZ1bioqIGFuZCBsb2cgaW4gdXNpbmcgeW91ciBwcmVmZXJyZWQgbWV0aG9kLgo8L1N0ZXA+Cgo8U3RlcCB0aXRsZT0iTmF2aWdhdGUgdG8gY29tcGV0aXRpb25zIj4KICBPbiB0aGUgbGVmdCBzaWRlIG9mIHRoZSBwYWdlLCBjbGljayB0aGUgKipUcm9waHkgaWNvbioqIGxhYmVsZWQgKipDb21wZXRlKiouCiAgCiAgPEZyYW1lPgogICAgPGltZyBzcmM9Imh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9oZWxwc2NvdXQubmV0L2RvY3MvYXNzZXRzLzY4NTMwNmI3MmUwNTUwMjc3YWE5MjUwZS9pbWFnZXMvNjg4MjIzZWE1MmRjNTIyYmI4ZGI1ODI5L2ZpbGUtRmlyVDVzdk5IMC5wbmciIGFsdD0iQ29tcGV0ZSBzZWN0aW9uIHdpdGggdHJvcGh5IGljb24gaGlnaGxpZ2h0ZWQgaW4gc2lkZWJhciIgLz4KICA8L0ZyYW1lPgo8L1N0ZXA+Cgo8U3RlcCB0aXRsZT0iQWNjZXNzIHRvdXJuYW1lbnRzIj4KICBPbiB0aGUgVG91cm5hbWVudCBwYWdlLCBjbGljayAqKlRvdXJuYW1lbnRzLioqCiAgCiAgPEZyYW1lPgogICAgPGltZyBzcmM9Imh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9oZWxwc2NvdXQubmV0L2RvY3MvYXNzZXRzLzY4NTMwNmI3MmUwNTUwMjc3YWE5MjUwZS9pbWFnZXMvNjg4MjI0MGNiMjU5YjIwZGFmMGQ4NDYxL2ZpbGUtZ1I1c1BDMXJ2Vy5wbmciIGFsdD0iVG91cm5hbWVudHMgYnV0dG9uIG9uIHRoZSBjb21wZXRpdGlvbiBwYWdlIiAvPgogIDwvRnJhbWU+CjwvU3RlcD4KCjxTdGVwIHRpdGxlPSJCcm93c2UgbGl2ZSB0b3VybmFtZW50cyI+CiAgU2VsZWN0ICoqTGl2ZSBUb3VybmFtZW50cyoqIHRvIHZpZXcgb25nb2luZyBjb21wZXRpdGlvbnMuIEJyb3dzZSB0aGUgbGlzdCBvZiBhY3RpdmUgdG91cm5hbWVudHMgYW5kIHNlbGVjdCB0aGUgb25lIHlvdSB3YW50IHRvIGpvaW4uIENsaWNrICoqSm9pbiBUb3VybmFtZW50KiogdG8gb3BlbiB0aGUgdG91cm5hbWVudCBkZXRhaWxzIHBhZ2UuCiAgCiAgPEZyYW1lPgogICAgPGltZyBzcmM9Imh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9oZWxwc2NvdXQubmV0L2RvY3MvYXNzZXRzLzY4NTMwNmI3MmUwNTUwMjc3YWE5MjUwZS9pbWFnZXMvNjg4MjI1YWM5MjczZGQ1ZTM1YzQ0ZmVhL2ZpbGUtODkwektrbG1MNC5wbmciIGFsdD0iTGl2ZSB0b3VybmFtZW50cyBsaXN0IHdpdGggYXZhaWxhYmxlIGNvbXBldGl0aW9ucyIgLz4KICA8L0ZyYW1lPgo8L1N0ZXA+Cgo8U3RlcCB0aXRsZT0iUmV2aWV3IGFuZCBqb2luIj4KICBIZXJlIHlvdSBjYW4gcmV2aWV3IHRoZSAqKnJ1bGVzLCBwcml6ZSBwb29sLCBsZWFkZXJib2FyZCwgYW5kIHRpbWUgcmVtYWluaW5nLioqIFlvdSBjYW4gYWxzbyBjaGF0IHdpdGggb3RoZXIgcGxheWVycyBpbiAqKkxpdmUgQ2hhdC4qKiBJZiB5b3UncmUgcmVhZHkgdG8gY29tcGV0ZSwgY2xpY2sgKipKb2luIFRvdXJuYW1lbnQqKiBhZ2FpbiB0byBjb25maXJtIHlvdXIgZW50cnkuCiAgCiAgPEZyYW1lPgogICAgPGltZyBzcmM9Imh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9oZWxwc2NvdXQubmV0L2RvY3MvYXNzZXRzLzY4NTMwNmI3MmUwNTUwMjc3YWE5MjUwZS9pbWFnZXMvNjg4MjI1Zjk4NWY3NTA2NjU0NWQ0YjE4L2ZpbGUtYVJqQUh4bHIxay5wbmciIGFsdD0iVG91cm5hbWVudCBkZXRhaWxzIHBhZ2Ugc2hvd2luZyBydWxlcywgcHJpemVzLCBhbmQgbGVhZGVyYm9hcmQiIC8+CiAgPC9GcmFtZT4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IkNvbmZpcm0gYW5kIHN0YXJ0IHBsYXlpbmciPgogIENvbmZpcm0gdGhlIHRyYW5zYWN0aW9uIGluIHlvdXIgY29ubmVjdGVkIHdhbGxldCB0byBjb21wbGV0ZSB5b3VyIHJlZ2lzdHJhdGlvbi4KICAKICBPbmNlIGNvbmZpcm1lZCwgY2xpY2sgKipQbGF5IE5vdyoqIHRvIHN0YXJ0IHlvdXIgbWF0Y2hlcyBhbmQgY2xpbWIgdGhlIGxlYWRlcmJvYXJkLgogIAogIDxGcmFtZT4KICAgIDxpbWcgc3JjPSJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vaGVscHNjb3V0Lm5ldC9kb2NzL2Fzc2V0cy82ODUzMDZiNzJlMDU1MDI3N2FhOTI1MGUvaW1hZ2VzLzY4ODIyNjUxOTI3M2RkNWUzNWM0NGZlZC9maWxlLVUyQ0pNZHo2c0wucG5nIiBhbHQ9IlBsYXkgTm93IGJ1dHRvbiBhZnRlciBzdWNjZXNzZnVsIHRvdXJuYW1lbnQgcmVnaXN0cmF0aW9uIiAvPgogIDwvRnJhbWU+CiAgCiAgPENoZWNrPgogICAgWW91J3JlIGluLiBHb29kIGx1Y2sgYW5kIGhhdmUgZnVuIGNvbXBldGluZyEKICA8L0NoZWNrPgo8L1N0ZXA+CjwvU3RlcHM+CgojIyBUb3VybmFtZW50IEZlYXR1cmVzCgotICoqUmVhbC10aW1lIGxlYWRlcmJvYXJkcyoqIHRvIHRyYWNrIHlvdXIgcHJvZ3Jlc3MKLSAqKkxpdmUgY2hhdCoqIHRvIGNvbm5lY3Qgd2l0aCBvdGhlciBjb21wZXRpdG9ycyAgCi0gKipDbGVhciBydWxlcyBhbmQgcHJpemUgc3RydWN0dXJlcyoqIGZvciBlYWNoIHRvdXJuYW1lbnQKLSAqKkltbWVkaWF0ZSBlbnRyeSoqIG9uY2UgcGF5bWVudCBpcyBjb25maXJtZWQKCjxUaXA+CkNoZWNrIHRoZSB0b3VybmFtZW50IHJ1bGVzIGFuZCBwcml6ZSBzdHJ1Y3R1cmUgYmVmb3JlIGpvaW5pbmcgdG8gdW5kZXJzdGFuZCB0aGUgY29tcGV0aXRpb24gZm9ybWF0IGFuZCB3aGF0IHlvdSdyZSBwbGF5aW5nIGZvci4KPC9UaXA+Cg==",
    "lastUpdated": "2025-09-03T03:33:18.734Z"
  },
  {
    "sourceFile": "learn/getting-started/how-to-link-additional-social-accounts.mdx",
    "sourceHash": "CldoZXRoZXIgeW91IG9yaWdpbmFsbHkgc2lnbmVkIHVwIHdpdGggYSB3YWxsZXQsIGVtYWlsLCBvciBzb2NpYWwgYWNjb3VudCwgeW91IGNhbiBjb25uZWN0IG1vcmUgb3B0aW9ucyBhbnl0aW1lLiBUaGlzIGluY2x1ZGVzIGFjY291bnRzIGxpa2UgR21haWwsIFR3aXR0ZXIsIEFwcGxlLCBwaG9uZSBudW1iZXIsIERpc2NvcmQsIFRlbGVncmFtLCBhbmQgbW9yZS4KClRoaXMgZ3VpZGUgd2lsbCB3YWxrIHlvdSB0aHJvdWdoIGhvdyB0byBsaW5rIGFkZGl0aW9uYWwgYWNjb3VudHMgb24gYmFzZW1lbnQuZnVuLgoKIyMgSG93IHRvIExpbmsgQWRkaXRpb25hbCBBY2NvdW50cwoKPGlmcmFtZSBjbGFzc05hbWU9InctZnVsbCBhc3BlY3QtdmlkZW8gcm91bmRlZC14bCIgc3JjPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC9oYzlqeEg5NEltVSIgdGl0bGU9IkhvdyB0byBsaW5rIGFkZGl0aW9uYWwgc29jaWFsIGFjY291bnRzIiBmcmFtZUJvcmRlcj0iMCIgYWxsb3c9ImFjY2VsZXJvbWV0ZXI7IGF1dG9wbGF5OyBjbGlwYm9hcmQtd3JpdGU7IGVuY3J5cHRlZC1tZWRpYTsgZ3lyb3Njb3BlOyBwaWN0dXJlLWluLXBpY3R1cmUiIGFsbG93RnVsbFNjcmVlbiAvPgoKPFN0ZXBzPgogIDxTdGVwIHRpdGxlPSJPcGVuIHlvdXIgcHJvZmlsZSBtZW51Ij4KICAgIENsaWNrIHlvdXIgcHJvZmlsZSBpY29uIG9uIGJhc2VtZW50LmZ1biB0byBvcGVuIHlvdXIgYWNjb3VudCBtZW51LgoKICAgIDxGcmFtZT4KICAgICAgIVtQcm9maWxlIGljb24gaGlnaGxpZ2h0ZWQgb24gYmFzZW1lbnQuZnVuIGludGVyZmFjZV0oaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2hlbHBzY291dC5uZXQvZG9jcy9hc3NldHMvNjg1MzA2YjcyZTA1NTAyNzdhYTkyNTBlL2ltYWdlcy82ODc4ZWYzNzUyNzI0ZDNjNTRkZTkwNmUvZmlsZS1rdnBoZm9SN2oyLnBuZykKICAgIDwvRnJhbWU+CiAgPC9TdGVwPgogIDxTdGVwIHRpdGxlPSJOYXZpZ2F0ZSB0byBBY2NvdW50cyB0YWIiPgogICAgTmF2aWdhdGUgdG8gdGhlICoqQWNjb3VudHMqKiB0YWIuCgogICAgPEZyYW1lPgogICAgICAhW0FjY291bnRzIHRhYiBpbiBwcm9maWxlIG1lbnVdKGh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9oZWxwc2NvdXQubmV0L2RvY3MvYXNzZXRzLzY4NTMwNmI3MmUwNTUwMjc3YWE5MjUwZS9pbWFnZXMvNjg3OTAxNTI1MjcyNGQzYzU0ZGU5MGNkL2ZpbGUtQmYzZTFEVE80Yy5wbmcpCiAgICA8L0ZyYW1lPgogIDwvU3RlcD4KICA8U3RlcCB0aXRsZT0iU3RhcnQgbGlua2luZyBwcm9jZXNzIj4KICAgIENsaWNrICoqTGluayBhbm90aGVyIGFjY291bnQuKioKCiAgICA8RnJhbWU+CiAgICAgICFbTGluayBhbm90aGVyIGFjY291bnQgYnV0dG9uXShodHRwczovL3MzLmFtYXpvbmF3cy5jb20vaGVscHNjb3V0Lm5ldC9kb2NzL2Fzc2V0cy82ODUzMDZiNzJlMDU1MDI3N2FhOTI1MGUvaW1hZ2VzLzY4NzkwMWE3NTIyZjQ1MTM2MWU3ZjliNy9maWxlLVphRloydHd4QlgucG5nKQogICAgPC9GcmFtZT4KICA8L1N0ZXA+CiAgPFN0ZXAgdGl0bGU9IkNob29zZSBhbmQgYXV0aG9yaXplIGFjY291bnQiPgogICAgQ2hvb3NlIHRoZSBhY2NvdW50IHR5cGUgeW91IHdhbnQgdG8gbGluayAtIGZvciBleGFtcGxlIFggKFR3aXR0ZXIpIC0gYW5kIGZvbGxvdyB0aGUgcHJvbXB0cyB0byBhdXRob3JpemUgdGhlIGNvbm5lY3Rpb24uCgogICAgPEZyYW1lPgogICAgICAhW0FjY291bnQgbGlua2luZyBvcHRpb25zIGluY2x1ZGluZyBzb2NpYWwgbWVkaWEgcGxhdGZvcm1zXShodHRwczovL3MzLmFtYXpvbmF3cy5jb20vaGVscHNjb3V0Lm5ldC9kb2NzL2Fzc2V0cy82ODUzMDZiNzJlMDU1MDI3N2FhOTI1MGUvaW1hZ2VzLzY4NzkwNWRiMzk5MWE3MDIxMTUzMGI2OS9maWxlLWY1NjJMdEtrQTQucG5nKQogICAgPC9GcmFtZT4KICAgIDxDaGVjaz4KICAgICAgT25jZSBsaW5rZWQgeW91ciBhY2NvdW50IHdpbGwgc2hvdyB1cCB1bmRlciB0aGUgQWNjb3VudHMgdGFiLiBZb3UgY2FuIHJlcGVhdCB0aGlzIHByb2Nlc3MgdG8gY29ubmVjdCBhcyBtYW55IHBsYXRmb3JtcyBhcyB5b3UnZCBsaWtlLgogICAgPC9DaGVjaz4KICA8L1N0ZXA+CjwvU3RlcHM+Cgo8Tm90ZT4KICBUaGUgbGlua2VkIGFjY291bnRzIHdpbGwgYXBwZWFyIGluIHlvdXIgQWNjb3VudHMgdGFiLCBnaXZpbmcgeW91IG11bHRpcGxlIHdheXMgdG8gYWNjZXNzIHlvdXIgQjMgcHJvZmlsZSBhbmQgbWFpbnRhaW4gYSBjb25zaXN0ZW50IGlkZW50aXR5IGFjcm9zcyBhbGwgQjMgcGxhdGZvcm1zLgo8L05vdGU+",
    "lastUpdated": "2025-10-31T02:49:48.086Z"
  },
  {
    "sourceFile": "learn/getting-started/how-to-export-your-embedded-wallet.mdx",
    "sourceHash": "CldhbnQgdG8gdXNlIHlvdXIgQmFzZW1lbnQgd2FsbGV0IGluIG90aGVyIGFwcHMgbGlrZSBSYWluYm93IG9yIE1ldGFNYXNrPyBFeHBvcnRpbmcgeW91ciBlbWJlZGRlZCB3YWxsZXQgZ2l2ZXMgeW91IGZ1bGwgY29udHJvbCBieSBsZXR0aW5nIHlvdSBjb3B5IHlvdXIgKipzZWNyZXQgcmVjb3ZlcnkgcGhyYXNlKiogb3IgKipwcml2YXRlIGtleSoqLCBzbyB5b3UgY2FuIGltcG9ydCBpdCBpbnRvIGFueSBzdXBwb3J0ZWQgd2FsbGV0LgoKPFdhcm5pbmc+CiAgKipJbXBvcnRhbnQ6KiogTmV2ZXIgc2hhcmUgeW91ciBwcml2YXRlIGtleSBvciByZWNvdmVyeSBwaHJhc2Ugd2l0aCBhbnlvbmUuIEFueW9uZSB3aXRoIGFjY2VzcyB0byBpdCBjYW4gdGFrZSB5b3VyIGZ1bmRzLgo8L1dhcm5pbmc+CgojIyBTdGVwcyB0byBFeHBvcnQgWW91ciBFbWJlZGRlZCBXYWxsZXQKCjxpZnJhbWUgY2xhc3NOYW1lPSJ3LWZ1bGwgYXNwZWN0LXZpZGVvIHJvdW5kZWQteGwiIHNyYz0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvSEJFYm5KTkJYVzgiIHRpdGxlPSJIb3cgdG8gZXhwb3J0IHlvdXIgZW1iZWRkZWQgd2FsbGV0IiBmcmFtZUJvcmRlcj0iMCIgYWxsb3c9ImFjY2VsZXJvbWV0ZXI7IGF1dG9wbGF5OyBjbGlwYm9hcmQtd3JpdGU7IGVuY3J5cHRlZC1tZWRpYTsgZ3lyb3Njb3BlOyBwaWN0dXJlLWluLXBpY3R1cmUiIGFsbG93RnVsbFNjcmVlbiAvPgoKPFN0ZXBzPgogIDxTdGVwIHRpdGxlPSJMb2cgaW50byBCYXNlbWVudCI+CiAgICBMb2cgaW50byBbKipCYXNlbWVudC5mdW4qKl0oaHR0cHM6Ly9iYXNlbWVudC5mdW4pIHVzaW5nIHlvdXIgcHJlZmVycmVkIGxvZ2luIG1ldGhvZC4KICA8L1N0ZXA+CiAgPFN0ZXAgdGl0bGU9IkFjY2VzcyBwcm9maWxlIG1lbnUiPgogICAgQ2xpY2sgdGhlICoqcHJvZmlsZSBpY29uKiogaW4gdGhlIHRvcCByaWdodCBjb3JuZXIgb2YgdGhlIHBhZ2UuCgogICAgPEZyYW1lPgogICAgICAhW1Byb2ZpbGUgaWNvbiBpbiB0b3AgcmlnaHQgY29ybmVyXShodHRwczovL3MzLmFtYXpvbmF3cy5jb20vaGVscHNjb3V0Lm5ldC9kb2NzL2Fzc2V0cy82ODUzMDZiNzJlMDU1MDI3N2FhOTI1MGUvaW1hZ2VzLzY4ODM1MTgyOGU1ZGE5NDgxZWQ0Yjc0ZS9maWxlLWFJSjFGVUdYM1MucG5nKQogICAgPC9GcmFtZT4KICA8L1N0ZXA+CiAgPFN0ZXAgdGl0bGU9Ik5hdmlnYXRlIHRvIEFjY291bnRzIHRhYiI+CiAgICBHbyB0byB0aGUgKipBY2NvdW50cyoqIHRhYiBhbmQgY2xpY2sgKipFeHBvcnQqKiBuZXh0IHRvIHlvdXIgd2FsbGV0IGFkZHJlc3MuCgogICAgPEZyYW1lPgogICAgICAhW0FjY291bnRzIHRhYiB3aXRoIEV4cG9ydCBidXR0b24gaGlnaGxpZ2h0ZWRdKGh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9oZWxwc2NvdXQubmV0L2RvY3MvYXNzZXRzLzY4NTMwNmI3MmUwNTUwMjc3YWE5MjUwZS9pbWFnZXMvNjg4MzUyNTM4ZTVkYTk0ODFlZDRiNzUzL2ZpbGUtZ3U1bmVBcUtZYy5wbmcpCiAgICA8L0ZyYW1lPgogIDwvU3RlcD4KICA8U3RlcCB0aXRsZT0iQ29weSB5b3VyIGNyZWRlbnRpYWxzIj4KICAgIENsaWNrICoqQ29weSoqIHRvIGNvcHkgZWl0aGVyIHlvdXIgKipzZWNyZXQgcmVjb3ZlcnkgcGhyYXNlKiogb3IgKipwcml2YXRlIGtleSoqIHRvIHlvdXIgY2xpcGJvYXJkLgoKICAgIDxGcmFtZT4KICAgICAgIVtFeHBvcnQgd2FsbGV0IGRpYWxvZyB3aXRoIGNvcHkgb3B0aW9uc10oaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2hlbHBzY291dC5uZXQvZG9jcy9hc3NldHMvNjg1MzA2YjcyZTA1NTAyNzdhYTkyNTBlL2ltYWdlcy82ODgzNTMyYjJmZmFjODM4OWNjZTMyODYvZmlsZS1aTUl1b2R1S3kzLnBuZykKICAgIDwvRnJhbWU+CiAgPC9TdGVwPgogIDxTdGVwIHRpdGxlPSJJbXBvcnQgdG8geW91ciBwcmVmZXJyZWQgd2FsbGV0Ij4KICAgIFBhc3RlIGl0IGludG8geW91ciBwcmVmZXJyZWQgd2FsbGV0IGFwcCB0byBpbXBvcnQgeW91ciB3YWxsZXQuCgogICAgPENoZWNrPgogICAgICBZb3VyIEJTTU5UIHdhbGxldCBpcyBub3cgYWNjZXNzaWJsZSBpbiB5b3VyIGV4dGVybmFsIHdhbGxldCBhcHAgd2hpbGUgbWFpbnRhaW5pbmcgZnVsbCBjb21wYXRpYmlsaXR5IHdpdGggdGhlIEIzIGVjb3N5c3RlbS4KICAgIDwvQ2hlY2s+CiAgPC9TdGVwPgo8L1N0ZXBzPgoKPEluZm8+CiAgWW91ciBleHBvcnRlZCB3YWxsZXQgY3JlZGVudGlhbHMgZ2l2ZSB5b3UgY29tcGxldGUgY29udHJvbCBvdmVyIHlvdXIgZnVuZHMgYW5kIGFsbG93IHlvdSB0byB1c2UgdGhlIHNhbWUgd2FsbGV0IGFjcm9zcyBtdWx0aXBsZSBhcHBsaWNhdGlvbnMgYW5kIHBsYXRmb3Jtcy4KPC9JbmZvPg==",
    "lastUpdated": "2025-10-31T02:50:09.419Z"
  },
  {
    "sourceFile": "learn/getting-started/how-to-customize-your-basement-profile.mdx",
    "sourceHash": "CllvdXIgQmFzZW1lbnQgcHJvZmlsZSBpcyB5b3VyIGRpZ2l0YWwgaWRlbnRpdHkgb24gdGhlIEJhc2VtZW50IHBsYXRmb3JtLiBZb3UgY2FuIGN1c3RvbWl6ZSB5b3VyIGF2YXRhciwgY2hvb3NlIGEgdW5pcXVlIG5hbWUsIGFuZCBkaXNwbGF5IGEgYmFkZ2UgdGhhdCByZXByZXNlbnRzIHlvdXIgc3R5bGUuIFdoZXRoZXIgeW91J3JlIHNldHRpbmcgdGhpbmdzIHVwIGZvciB0aGUgZmlyc3QgdGltZSBvciB1cGRhdGluZyB5b3VyIGxvb2sgbGF0ZXIsIHBlcnNvbmFsaXppbmcgeW91ciBwcm9maWxlIGhlbHBzIHlvdSBzdGFuZCBvdXQgYW5kIGZlZWwgbW9yZSBjb25uZWN0ZWQuCgojIyBDdXN0b21pemluZyBZb3VyIFByb2ZpbGUgZm9yIHRoZSBGaXJzdCBUaW1lCgo8aWZyYW1lIGNsYXNzTmFtZT0idy1mdWxsIGFzcGVjdC12aWRlbyByb3VuZGVkLXhsIiBzcmM9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkL0kwaGxaSHBlTmFBIiB0aXRsZT0iSG93IHRvIGN1c3RvbWl6ZSB5b3VyIHByb2ZpbGUgZm9yIHRoZSBmaXJzdCB0aW1lIiBmcmFtZUJvcmRlcj0iMCIgYWxsb3c9ImFjY2VsZXJvbWV0ZXI7IGF1dG9wbGF5OyBjbGlwYm9hcmQtd3JpdGU7IGVuY3J5cHRlZC1tZWRpYTsgZ3lyb3Njb3BlOyBwaWN0dXJlLWluLXBpY3R1cmUiIGFsbG93RnVsbFNjcmVlbiAvPgoKPFN0ZXBzPgogIDxTdGVwIHRpdGxlPSJPcGVuIHRoZSBhY2NvdW50IG1lbnUiPgogICAgQ2xpY2sgeW91ciBhdmF0YXIgaW4gdGhlIHRvcCByaWdodCBjb3JuZXIgdG8gb3BlbiB0aGUgYWNjb3VudCBtZW51LgoKICAgIDxGcmFtZT4KICAgICAgIVtVc2VyIGF2YXRhciBpbiB0b3AgcmlnaHQgY29ybmVyIG9mIGludGVyZmFjZV0oaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2hlbHBzY291dC5uZXQvZG9jcy9hc3NldHMvNjg1MzA2YjcyZTA1NTAyNzdhYTkyNTBlL2ltYWdlcy82ODc4ZWI4NTUyMmY0NTEzNjFlN2Y5NTQvZmlsZS10RzV0TjFHTlRULnBuZykKICAgIDwvRnJhbWU+CiAgPC9TdGVwPgogIDxTdGVwIHRpdGxlPSJSZWdpc3RlciB5b3VyIG5hbWUiPgogICAgRW50ZXIgeW91ciBkZXNpcmVkIG5hbWUsIGFuZCB0aGVuIGNsaWNrICoqUmVnaXN0ZXIqKi4KCiAgICA8RnJhbWU+CiAgICAgICFbTmFtZSByZWdpc3RyYXRpb24gZGlhbG9nXShodHRwczovL3MzLmFtYXpvbmF3cy5jb20vaGVscHNjb3V0Lm5ldC9kb2NzL2Fzc2V0cy82ODUzMDZiNzJlMDU1MDI3N2FhOTI1MGUvaW1hZ2VzLzY4NzhlYzFhMTNkOTUwNDA1ZWZmNmU4Ny9maWxlLVdQbEFCNUlDOGsucG5nKQogICAgPC9GcmFtZT4KICA8L1N0ZXA+CiAgPFN0ZXAgdGl0bGU9IkN1c3RvbWl6ZSB5b3VyIGF2YXRhciI+CiAgICBOZXh0LCB5b3UnbGwgYmUgZ3VpZGVkIHRocm91Z2ggY3VzdG9taXppbmcgeW91ciBhdmF0YXIuIFRoaXMgaXMgeW91ciBjaGFuY2UgdG8gbWFrZSBpdCB0cnVseSB5b3VycyBieSBjaG9vc2luZyBhIGdlbmRlciwgYWRqdXN0aW5nIHBoeXNpY2FsIGZlYXR1cmVzLCBhbmQgcGlja2luZyB0aGUgb3V0Zml0IHRoYXQgYmVzdCBmaXRzIHlvdXIgc3R5bGUuCgogICAgPEZyYW1lPgogICAgICAhW0F2YXRhciBjdXN0b21pemF0aW9uIGludGVyZmFjZSBzaG93aW5nIHZhcmlvdXMgb3B0aW9uc10oaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2hlbHBzY291dC5uZXQvZG9jcy9hc3NldHMvNjg1MzA2YjcyZTA1NTAyNzdhYTkyNTBlL2ltYWdlcy82ODc4ZWQ4NTUyNzI0ZDNjNTRkZTkwNjIvZmlsZS1RNk0wTFFqVmR1LnBuZykKICAgIDwvRnJhbWU+CiAgPC9TdGVwPgogIDxTdGVwIHRpdGxlPSJTYXZlIHlvdXIgYXZhdGFyIj4KICAgIE9uY2UgeW91J3JlIGhhcHB5IHdpdGggeW91ciBhdmF0YXIsIGNsaWNrICoqTmV4dCoqIHRvIHNhdmUgeW91ciB2aXJ0dWFsIHNlbGYuCgogICAgPEZyYW1lPgogICAgICAhW0ZpbmFsIGF2YXRhciBwcmV2aWV3IHdpdGggTmV4dCBidXR0b25dKGh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9oZWxwc2NvdXQubmV0L2RvY3MvYXNzZXRzLzY4NTMwNmI3MmUwNTUwMjc3YWE5MjUwZS9pbWFnZXMvNjg3OGVkY2IxZmQyZTMxODRiNWMyZmU1L2ZpbGUtanFXazZqZG5POC5wbmcpCiAgICA8L0ZyYW1lPgogIDwvU3RlcD4KPC9TdGVwcz4KCiMjIEFkZGl0aW9uYWwgQ3VzdG9taXphdGlvbgoKQWZ0ZXIgeW91ciBpbml0aWFsIHNldHVwIHlvdSBjYW4gcmV0dXJuIHRvIHlvdXIgcHJvZmlsZSBhbnl0aW1lIHRvIG1ha2UgY2hhbmdlcyBvciB0cnkgc29tZXRoaW5nIG5ldy4KCjxTdGVwcz4KICA8U3RlcCB0aXRsZT0iQWNjZXNzIHlvdXIgcHJvZmlsZSI+CiAgICBGcm9tIHRoZSBCYXNlbWVudCBob21lcGFnZSBjbGljayB0aGUgcHJvZmlsZSBpY29uIG9uIGVpdGhlciB0aGUgbGVmdCBvciByaWdodCBzaWRlIG9mIHRoZSBwYWdlIHRvIG9wZW4geW91ciBwcm9maWxlIGFuZCBiZWdpbiBlZGl0aW5nLgoKICAgIDxGcmFtZT4KICAgICAgIVtQcm9maWxlIGljb25zIG9uIEJhc2VtZW50IGhvbWVwYWdlXShodHRwczovL3MzLmFtYXpvbmF3cy5jb20vaGVscHNjb3V0Lm5ldC9kb2NzL2Fzc2V0cy82ODUzMDZiNzJlMDU1MDI3N2FhOTI1MGUvaW1hZ2VzLzY4NzhlZjM3NTI3MjRkM2M1NGRlOTA2ZS9maWxlLWt2cGhmb1I3ajIucG5nKQogICAgPC9GcmFtZT4KICA8L1N0ZXA+CiAgPFN0ZXAgdGl0bGU9Ik9wZW4gY3VzdG9taXphdGlvbiBvcHRpb25zIj4KICAgIE5leHQsIGNsaWNrICoqQ3VzdG9taXplIFByb2ZpbGUqKi4KCiAgICA8RnJhbWU+CiAgICAgICFbQ3VzdG9taXplIFByb2ZpbGUgYnV0dG9uIGluIHByb2ZpbGUgbWVudV0oaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2hlbHBzY291dC5uZXQvZG9jcy9hc3NldHMvNjg1MzA2YjcyZTA1NTAyNzdhYTkyNTBlL2ltYWdlcy82ODc4ZWZiMTEzZDk1MDQwNWVmZjZlOWQvZmlsZS00eTNWTVdBTEtKLnBuZykKICAgIDwvRnJhbWU+CiAgPC9TdGVwPgo8L1N0ZXBzPgoKIyMjIEF2YWlsYWJsZSBDdXN0b21pemF0aW9uIE9wdGlvbnMKCioqVXNlcm5hbWUqKgpDaGFuZ2UgeW91ciBwdWJsaWMgZGlzcGxheSBuYW1lIGF0IGFueSB0aW1lCgoqKkF2YXRhcioqCkVkaXQgeW91ciBhdmF0YXIncyBhcHBlYXJhbmNlIHRvIHJlZnJlc2ggeW91ciBsb29rCgoqKkV4cHJlc3MgWW91cnNlbGYqKgpBZGQgYSBjdXN0b20gaGFuZC1kcmF3biBzaWduYXR1cmUgYW5kIGNob29zZSBhIHByb2ZpbGUgdGhlbWUgdGhhdCBtYXRjaGVzIHlvdXIgdmliZQoKPFRpcD4KICBXYW50IGEgcXVpY2sgd2Fsa3Rocm91Z2g/IFdhdGNoIHRoaXMgc2hvcnQgdmlkZW8gdG8gc2VlIGVhY2ggY3VzdG9taXphdGlvbiBvcHRpb24gaW4gYWN0aW9uOgo8L1RpcD4KCjxpZnJhbWUgY2xhc3NOYW1lPSJ3LWZ1bGwgYXNwZWN0LXZpZGVvIHJvdW5kZWQteGwiIHNyYz0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvVW9wVFhlMXViZXMiIHRpdGxlPSJQcm9maWxlIGN1c3RvbWl6YXRpb24gd2Fsa3Rocm91Z2giIGZyYW1lQm9yZGVyPSIwIiBhbGxvdz0iYWNjZWxlcm9tZXRlcjsgYXV0b3BsYXk7IGNsaXBib2FyZC13cml0ZTsgZW5jcnlwdGVkLW1lZGlhOyBneXJvc2NvcGU7IHBpY3R1cmUtaW4tcGljdHVyZSIgYWxsb3dGdWxsU2NyZWVuIC8+",
    "lastUpdated": "2025-10-31T02:50:42.781Z"
  },
  {
    "sourceFile": "learn/getting-started/how-to-create-an-account.mdx",
    "sourceHash": "CllvdSBjYW4gc2lnbiB1cCB1c2luZyBhbiBFVk0gd2FsbGV0LCBlbWFpbCwgcGhvbmUgbnVtYmVyIChTTVMpLCBvciBhIHNvY2lhbCBhY2NvdW50IGxpa2UgR29vZ2xlLCBBcHBsZSwgRGlzY29yZCwgVGVsZWdyYW0sIG9yIEZhcmNhc3Rlci4KCiMjIFN0ZXAtYnktU3RlcDogQ3JlYXRpbmcgQmFzZW1lbnQgQWNjb3VudAoKPGlmcmFtZSBjbGFzc05hbWU9InctZnVsbCBhc3BlY3QtdmlkZW8gcm91bmRlZC14bCIgc3JjPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC9rR0lBRng2M095ZyIgdGl0bGU9IkhvdyB0byBDcmVhdGUgYSBCMyBBY2NvdW50IiBmcmFtZUJvcmRlcj0iMCIgYWxsb3c9ImFjY2VsZXJvbWV0ZXI7IGF1dG9wbGF5OyBjbGlwYm9hcmQtd3JpdGU7IGVuY3J5cHRlZC1tZWRpYTsgZ3lyb3Njb3BlOyBwaWN0dXJlLWluLXBpY3R1cmUiIGFsbG93RnVsbFNjcmVlbiAvPgoKPFN0ZXBzPgogIDxTdGVwIHRpdGxlPSJOYXZpZ2F0ZSB0byBiYXNlbWVudC5mdW4iPgogICAgR28gdG8gW2Jhc2VtZW50LmZ1bl0oaHR0cDovL2Jhc2VtZW50LmZ1bikgYW5kIGNsaWNrICoqSm9pbiB0aGUgZnVuKiouCgogICAgPEZyYW1lPgogICAgICAhW0Jhc2VtZW50IGhvbWVwYWdlIHdpdGggSm9pbiB0aGUgZnVuIGJ1dHRvbiBoaWdobGlnaHRlZF0oaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2hlbHBzY291dC5uZXQvZG9jcy9hc3NldHMvNjg1MzA2YjcyZTA1NTAyNzdhYTkyNTBlL2ltYWdlcy82ODc1MDI4ZDAzZTcyZDQyZmY4N2M1ZTgvZmlsZS11OG1sdmk4Qm4zLnBuZykKICAgIDwvRnJhbWU+CiAgPC9TdGVwPgogIDxTdGVwIHRpdGxlPSJDaG9vc2UgeW91ciBsb2dpbiBtZXRob2QiPgogICAgQ2hvb3NlIHlvdXIgcHJlZmVycmVkIGxvZ2luIG1ldGhvZC4gWW91IGNhbiBjbGljayAqKk1vcmUgb3B0aW9ucyoqIHRvIHNlZSBhZGRpdGlvbmFsIGxvZ2luIG1ldGhvZHMuCgogICAgLSAqKkVWTSBXYWxsZXQqKiAoZS5nLiBNZXRhTWFzayBvciBSYWluYm93KQogICAgLSAqKkVtYWlsIG9yIFBob25lIE51bWJlciAoU01TKSoqCiAgICAtICoqU29jaWFsIEFjY291bnQqKiAoR29vZ2xlLCBBcHBsZSwgRGlzY29yZCwgVGVsZWdyYW0sIG9yIEZhcmNhc3RlcikKCiAgICA8RnJhbWU+CiAgICAgICFbTG9naW4gb3B0aW9ucyBtb2RhbCBzaG93aW5nIGRpZmZlcmVudCBhdXRoZW50aWNhdGlvbiBtZXRob2RzXShodHRwczovL3MzLmFtYXpvbmF3cy5jb20vaGVscHNjb3V0Lm5ldC9kb2NzL2Fzc2V0cy82ODUzMDZiNzJlMDU1MDI3N2FhOTI1MGUvaW1hZ2VzLzY4NzUwMzNmMDNlNzJkNDJmZjg3YzVlZS9maWxlLVlBb3RWWENrbTMucG5nKQogICAgPC9GcmFtZT4KICA8L1N0ZXA+CiAgPFN0ZXAgdGl0bGU9IkNvbmZpcm0geW91ciBsb2dpbiBtZXRob2QiPgogICAgRm9sbG93IHRoZSBwcm9tcHRzIHRvIGNvbmZpcm0geW91ciBsb2dpbiBtZXRob2QuIFRoaXMgbWlnaHQgaW5jbHVkZSBjb25uZWN0aW5nIHlvdXIgd2FsbGV0LCB2ZXJpZnlpbmcgeW91ciBlbWFpbCwgb3IgYXBwcm92aW5nIGFjY2VzcyB0aHJvdWdoIGEgc29jaWFsIGFjY291bnQuCgogICAgPE5vdGU+CiAgICAgIEV4YW1wbGU6IElmIHlvdSdyZSB1c2luZyBhbiBFVk0gd2FsbGV0IGxpa2UgTWV0YW1hc2ssIHlvdSdsbCBzZWUgYSBzY3JlZW4gbGlrZSB0aGlzIHdoZW4gY29uZmlybWluZyB5b3VyIGNvbm5lY3Rpb246CiAgICA8L05vdGU+CiAgICA8RnJhbWU+CiAgICAgICFbTWV0YU1hc2sgY29ubmVjdGlvbiBjb25maXJtYXRpb24gZGlhbG9nXShodHRwczovL3MzLmFtYXpvbmF3cy5jb20vaGVscHNjb3V0Lm5ldC9kb2NzL2Fzc2V0cy82ODUzMDZiNzJlMDU1MDI3N2FhOTI1MGUvaW1hZ2VzLzY4NzUwNTNhMGNmN2Q4NjA4OWVjNDk3ZS9maWxlLXV2VmZtVXJUWVEucG5nKQogICAgPC9GcmFtZT4KICAgIDxDaGVjaz4KICAgICAgT25jZSBjb25maXJtZWQsIHlvdXIgQjMgYWNjb3VudCB3aWxsIGJlIGNyZWF0ZWQgYW5kIHJlYWR5IHRvIHVzZSBhY3Jvc3MgYWxsIEIzIHBsYXRmb3Jtcy4KICAgIDwvQ2hlY2s+CiAgPC9TdGVwPgo8L1N0ZXBzPg==",
    "lastUpdated": "2025-10-31T02:51:03.922Z"
  },
  {
    "sourceFile": "learn/getting-started/crypto-and-wallet-security.mdx",
    "sourceHash": "ClRoaW5rIG9mIHlvdXIgY3J5cHRvIHdhbGxldCBhcyB5b3VyIHBlcnNvbmFsIGtleSB0byB0aGUgV2ViMyB1bml2ZXJzZSAtIGl0J3Mgbm90IGp1c3QgYSB0b29sOyBpdCdzIHlvdXIgZ2F0ZXdheSB0byBvd25pbmcsIHRyYWRpbmcsIGFuZCBpbnRlcmFjdGluZyBpbiB0aGUgZGVjZW50cmFsaXplZCB3b3JsZC4gV2FsbGV0IGFwcHMgbGlrZSBSYWluYm93IG1ha2UgdGhpcyBzaW1wbGUgYnkgZ2l2aW5nIHlvdSBhbiBlYXN5LXRvLXVzZSBpbnRlcmZhY2UgdG8gbWFuYWdlIHlvdXIgY3J5cHRvZ3JhcGhpYyBrZXlzLCBubyB0ZWNobmljYWwgd2l6YXJkcnkgcmVxdWlyZWQuIExldCdzIGJyZWFrIGl0IGRvd24uCgpBdCBpdHMgY29yZSwgYSBjcnlwdG8gd2FsbGV0IGRvZXNuJ3QgImhvbGQiIHlvdXIgbW9uZXkuIEluc3RlYWQsIGl0J3MgYSBzZWN1cmUgd2F5IHRvIG1hbmFnZSB0aGUga2V5cyB0aGF0IGdpdmUgeW91IGFjY2VzcyB0byB5b3VyIGZ1bmRzIG9uIHRoZSBibG9ja2NoYWluLiBUaGVzZSBrZXlzIGFsbG93IHlvdSB0byBzZW5kLCByZWNlaXZlLCBhbmQgb3duIGFzc2V0cyBsaWtlIEV0aGVyZXVtLgoKV2hlbiB5b3UgIm93biIgMSBFVEgsIHdoYXQgeW91J3JlIHJlYWxseSBkb2luZyBpcyBvd25pbmcgcHJvb2Ygb24gdGhlIGJsb2NrY2hhaW4gdGhhdCBsaW5rcyB5b3VyIHdhbGxldCBhZGRyZXNzIHRvIHRoYXQgRVRILiBZb3VyIHdhbGxldCBpcyB5b3VyIGRpZ2l0YWwgcHJvb2Ygb2Ygb3duZXJzaGlwLgoKV2FsbGV0cyBjb21lIGluIGRpZmZlcmVudCBmb3JtcyB0byBzdWl0IHlvdXIgbmVlZHM6CgotICoqSG90IFdhbGxldHM6KiogQWx3YXlzIGNvbm5lY3RlZCB0byB0aGUgaW50ZXJuZXQsIHBlcmZlY3QgZm9yIGZyZXF1ZW50IHRyYW5zYWN0aW9ucyAoZS5nLiwgUmFpbmJvdykuCi0gKipDb2xkIFdhbGxldHM6KiogSGFyZHdhcmUgd2FsbGV0cyBsaWtlIExlZGdlciwgZGVzaWduZWQgdG8gc3RvcmUgeW91ciBrZXlzIG9mZmxpbmUgZm9yIGV4dHJhIHNlY3VyaXR5LgoKPEZyYW1lIGNhcHRpb249IldhbGxldCB0eXBlcyBjb21wYXJpc29uIHNob3dpbmcgaG90IHZzIGNvbGQgc3RvcmFnZSBvcHRpb25zIj4KPGltZyBzcmM9Imh0dHBzOi8vaW1hZ2VzLnNwci5zby9jZG4tY2dpL2ltYWdlZGVsaXZlcnkvajQyTm83eS1kY29rSnVOZ1hlQTBpZy8zMmJmNTQ4Ny1hOGVmLTQ1MmMtOTk3MS1hMjhkMWYxNDE1YTcvVW50aXRsZWQvdz0zODQwLHF1YWxpdHk9OTAsZml0PXNjYWxlLWRvd24iIGFsdD0iRGlhZ3JhbSBzaG93aW5nIGRpZmZlcmVudCB0eXBlcyBvZiBjcnlwdG9jdXJyZW5jeSB3YWxsZXRzIiAvPgo8L0ZyYW1lPgoKIyMgV2FsbGV0IENvbXBvbmVudHM6IFRoZSBFc3NlbnRpYWxzCgpFdmVyeSBjcnlwdG8gd2FsbGV0IGhhcyB0aHJlZSBtYWluIHBhcnRzIHRoYXQgbWFrZSBpdCBhbGwgd29yazoKCiMjIyAxLiBQdWJsaWMgV2FsbGV0IEFkZHJlc3MKLSBUaGluayBvZiB0aGlzIGFzIHlvdXIgdXNlcm5hbWUgb3IgYWNjb3VudCBudW1iZXIuCi0gU2hhcmUgaXQgd2l0aCBhbnlvbmUgdG8gcmVjZWl2ZSBmdW5kcy4KLSBQdWJsaWMgYWRkcmVzc2VzIGxldCBwZW9wbGUgc2VlIHlvdXIgdHJhbnNhY3Rpb24gaGlzdG9yeSBhbmQgYXNzZXRzIChiZWNhdXNlIGJsb2NrY2hhaW5zIGFyZSB0cmFuc3BhcmVudCkuCgojIyMgMi4gU2VjcmV0IFBocmFzZSAoU2VlZCBQaHJhc2UpCi0gQSAxMi0gb3IgMjQtd29yZCBwaHJhc2UgdGhhdCBnaXZlcyB5b3UgZnVsbCBhY2Nlc3MgdG8geW91ciB3YWxsZXQuCi0gVHJlYXQgdGhpcyBsaWtlIHRoZSBjcm93biBqZXdlbHMg4oCUIHdob2V2ZXIgaGFzIGl0LCBvd25zIHRoZSBhc3NldHMgd2l0aGluIHlvdXIgd2FsbGV0LgoKIyMjIDMuIFByaXZhdGUgS2V5Ci0gQSBsb25nIHN0cmluZyBvZiBjaGFyYWN0ZXJzIGdlbmVyYXRlZCBmcm9tIHlvdXIgc2VlZCBwaHJhc2UuCi0gVXNlZCB0byBzaWduIHRyYW5zYWN0aW9ucyBhbmQgcHJvdmUgb3duZXJzaGlwLgoKPEZyYW1lPgo8aW1nIHNyYz0iaHR0cHM6Ly9pbWFnZXMuc3ByLnNvL2Nkbi1jZ2kvaW1hZ2VkZWxpdmVyeS9qNDJObzd5LWRjb2tKdU5nWGVBMGlnLzJjOTA5ZWVmLWEwMjItNGFlNC1hNmJjLWY4OTk2ZWVjNzQxMi9pbWFnZS93PTM4NDAscXVhbGl0eT05MCxmaXQ9c2NhbGUtZG93biIgYWx0PSJEaWFncmFtIHNob3dpbmcgd2FsbGV0IGNvbXBvbmVudHMgaW5jbHVkaW5nIHB1YmxpYyBhZGRyZXNzLCBwcml2YXRlIGtleSwgYW5kIHNlZWQgcGhyYXNlIiAvPgo8L0ZyYW1lPgoKIyMjIFdoYXQgSGFwcGVucyBpZiBZb3UgTG9zZSBZb3VyIEtleXM/Cgo8V2FybmluZz4KSGVyZSdzIHRoZSBkZWFsOiBMb3NlIHlvdXIgKipwcml2YXRlIGtleSoqIG9yICoqc2VjcmV0IHBocmFzZSoqLCBhbmQgaXQncyBnYW1lIG92ZXIuIFRoZXJlJ3Mgbm8gIkZvcmdvdCBQYXNzd29yZCIgYnV0dG9uLCBubyB0ZWNoIHN1cHBvcnQsIGFuZCBubyAyRkEuIE5vdCBldmVuIHlvdXIgd2FsbGV0IHByb3ZpZGVyIGNhbiBoZWxwIHlvdSByZWNvdmVyIGl0Lgo8L1dhcm5pbmc+CgpUaGF0J3Mgd2h5IGJhY2tpbmcgdXAgeW91ciBrZXlzIGlzIG5vbi1uZWdvdGlhYmxlLiBIZXJlIGFyZSBzb21lIHBybyB0aXBzIGZvciBrZWVwaW5nIHRoZW0gc2FmZToKCi0gVXNlIGEgKipwYXNzd29yZCBtYW5hZ2VyKiogbGlrZSAxUGFzc3dvcmQuCi0gV3JpdGUgaXQgZG93biBvbiBhIHBpZWNlIG9mIHBhcGVyIChvbGQtc2Nob29sIGJ1dCBlZmZlY3RpdmUpLgotIFN0YW1wIGl0IG9udG8gYSBwaWVjZSBvZiBtZXRhbCBmb3IgdWx0aW1hdGUgZHVyYWJpbGl0eS4KCjxJbmZvPgpZb3VyIGtleXMgPSB5b3VyIGNvbnRyb2wuIExvc2UgdGhlbSwgYW5kIHlvdSdyZSBsb2NrZWQgb3V0IGZvciBnb29kLgo8L0luZm8+CgojIyBXaHkgQjMgVXNlcyBDcnlwdG8gV2FsbGV0cwoKQXQgKipCMyoqLCB5b3VyIHdhbGxldCBpcyBzbyBtdWNoIG1vcmUgdGhhbiBqdXN0IGEgbG9naW4uIEl0J3MgeW91ciBpZGVudGl0eSwgeW91ciBpbnZlbnRvcnksIGFuZCB5b3VyIGNvbm5lY3Rpb24gdG8gdGhlIGVudGlyZSBlY29zeXN0ZW0uIEhlcmUncyB3aHkgd2FsbGV0cyBhcmUgY2VudHJhbCB0byBvdXIgV2ViMyB2aXNpb246CgojIyMgMS4gT3duZXJzaGlwIFRoYXQncyBZb3VycwpZb3VyIHdhbGxldCBwdXRzIHlvdSBpbiBjb250cm9sIG9mIHlvdXIgZGlnaXRhbCBhc3NldHMg4oCUIG5vIG1pZGRsZW1lbiwgbm8gY29ycG9yYXRlIGxvY2staW4uCgojIyMgMi4gSW50ZXJvcGVyYWJpbGl0eSBBY3Jvc3MgUGxhdGZvcm1zCllvdXIgQjMgd2FsbGV0IGlzbid0IHRpZWQgdG8ganVzdCBvbmUgZ2FtZSBvciBlY29zeXN0ZW0uIFdoZXRoZXIgeW91J3JlIGVhcm5pbmcgQnVpbGRlciBQb2ludHMgKEJQKSBvciBjbGFpbWluZyB0b2tlbnMsIHlvdXIgd2FsbGV0IHdvcmtzIHNlYW1sZXNzbHkgYWNyb3NzIG11bHRpcGxlIGV4cGVyaWVuY2VzLgoKIyMjIDMuIFNlY3VyaXR5IGFuZCBUcmFuc3BhcmVuY3kKQWxsIHRyYW5zYWN0aW9ucyBhcmUgdmlzaWJsZSBvbiB0aGUgYmxvY2tjaGFpbiwgYnV0IG9ubHkgeW91IGNvbnRyb2wgeW91ciBwcml2YXRlIGtleXMuIFRoaXMgZW5zdXJlcyBmYWlybmVzcyBhbmQgYWNjb3VudGFiaWxpdHkgYWNyb3NzIHRoZSBlY29zeXN0ZW0uCgojIyBXYWxsZXQgU2VjdXJpdHkKCllvdXIgY3J5cHRvIHdhbGxldCBnaXZlcyB5b3UgZ3JlYXQgcG93ZXIsIGJ1dCB3aXRoIGdyZWF0IHBvd2VyLCBjb21lcyBncmVhdCByZXNwb25zaWJpbGl0eS4gWW91J3JlIGluIGNoYXJnZSBvZiB5b3VyIGFzc2V0cywgYnV0IHlvdSdyZSBhbHNvIGluIGNoYXJnZSBvZiBrZWVwaW5nIHRob3NlIGFzc2V0cyBzYWZlIGZyb20gYmFkIGFjdG9ycy4KCkhlcmUgYXJlIHNvbWUgaGVscGZ1bCB0aXBzIGFuZCB0cmlja3MgdG8gaGVscCB5b3Uga2VlcCB5b3VyIGFzc2V0cyBzYWZlIGFuZCBzZWN1cmUuCgojIyMgU2VjdXJpdHkgR3VpZGVsaW5lcwoKLSBPbmx5IGludGVyYWN0IHdpdGggb2ZmaWNpYWwgQjMgd2Vic2l0ZXMgYW5kIHBsYXRmb3JtcyAoW2IzLmZ1bl0oaHR0cHM6Ly9iMy5mdW4pLCBbYnNtbnQuZnVuXShodHRwczovL2JzbW50LmZ1biksIFtjbGFpbS5iMy5mdW5dKGh0dHBzOi8vY2xhaW0uYjMuZnVuKSkuCi0gTmV2ZXIgc2hhcmUgeW91ciB3YWxsZXQncyBwcml2YXRlIGtleXMgb3Igc2VlZCBwaHJhc2VzIHdpdGggYW55b25lLgotIEJlIHdhcnkgb2YgZGlyZWN0IG1lc3NhZ2VzIGNsYWltaW5nIHRvIGJlIEIzIHN1cHBvcnQgLSBvZmZpY2lhbCBzdXBwb3J0IGlzIG9ubHkgdGhyb3VnaCBbZGlzY29yZC5nZy9iM2RvdGZ1bl0oaHR0cHM6Ly9kaXNjb3JkLmdnL2IzZG90ZnVuKSBhbmQgW2h0dHBzOi8vYjMuZnVuXShodHRwczovL2IzLmZ1bikuCi0gRG91YmxlLWNoZWNrIGFsbCB3YWxsZXQgYWRkcmVzc2VzIGFuZCB0cmFuc2FjdGlvbiBkZXRhaWxzIGJlZm9yZSBhcHByb3ZpbmcgdHJhbnNhY3Rpb25zLgotIEF2b2lkIGNsaWNraW5nIG9uIHN1c3BpY2lvdXMgbGlua3Mgb3IgY29ubmVjdGluZyB5b3VyIHdhbGxldCB0byB1bnZlcmlmaWVkIHdlYnNpdGVzLgotIEVuYWJsZSAyRkEgd2hlcmUgYXZhaWxhYmxlIGFuZCB1c2UgYSBoYXJkd2FyZSB3YWxsZXQgZm9yIGV4dHJhIHNlY3VyaXR5LgotIFJlbWVtYmVyOiBCMyB0ZWFtIHdpbGwgbmV2ZXIgYXNrIGZvciB5b3VyIHBlcnNvbmFsIHdhbGxldCBpbmZvcm1hdGlvbi4KCiMjIyBTZWN1cml0eSBCZXN0IFByYWN0aWNlcwoKPFRpcD4KRm9sbG93IHRoZXNlIGVzc2VudGlhbCBwcmFjdGljZXMgdG8ga2VlcCB5b3VyIHdhbGxldCBzZWN1cmU6CjwvVGlwPgoKLSBVc2Ugc3Ryb25nLCB1bmlxdWUgcGFzc3dvcmRzLgotIEVuYWJsZSB0d28tZmFjdG9yIGF1dGhlbnRpY2F0aW9uICgyRkEpLgotIE5ldmVyIHNoYXJlIHlvdXIgd2FsbGV0IGtleXMuCi0gS2VlcCB5b3VyIHdhbGxldCB1cGRhdGVkIGFuZCB0cnVzdGVkLiBTdGF5IHNlY3VyZSBhbmQgZ2FtZSBvbiEK",
    "lastUpdated": "2025-09-03T03:32:09.950Z"
  },
  {
    "sourceFile": "learn/deposits-withdrawals/withdrawing-tokens-from-b3.mdx",
    "sourceHash": "Ck5lZWQgdG8gbW92ZSB5b3VyIHRva2VucyBvdXQgb2YgdGhlIEIzIG5ldHdvcms/IFdoZXRoZXIgeW91J3JlIGJyaWRnaW5nIGJhY2sgdG8gRXRoZXJldW0gb3IgYW5vdGhlciBzdXBwb3J0ZWQgY2hhaW4sIHdpdGhkcmF3aW5nIGZyb20gQjMgaXMgc2ltcGxlIGFuZCBvbmx5IHRha2VzIGEgZmV3IHN0ZXBzLiBUaGlzIGd1aWRlIHdhbGtzIHlvdSB0aHJvdWdoIGhvdyB0byBzZWN1cmVseSB3aXRoZHJhdyB5b3VyIGFzc2V0cy4KCiMjIEhvdyB0byBXaXRoZHJhdyBUb2tlbnMKCjxpZnJhbWUKICBjbGFzc05hbWU9InctZnVsbCBhc3BlY3QtdmlkZW8gcm91bmRlZC14bCIKICBzcmM9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkL0FFX0RoRVZPbU1JIgogIHRpdGxlPSJIb3cgdG8gd2l0aGRyYXcgdG9rZW5zIGZyb20gQjMiCiAgZnJhbWVCb3JkZXI9IjAiCiAgYWxsb3c9ImFjY2VsZXJvbWV0ZXI7IGF1dG9wbGF5OyBjbGlwYm9hcmQtd3JpdGU7IGVuY3J5cHRlZC1tZWRpYTsgZ3lyb3Njb3BlOyBwaWN0dXJlLWluLXBpY3R1cmUiCiAgYWxsb3dGdWxsU2NyZWVuCj48L2lmcmFtZT4KCjxTdGVwcz4KPFN0ZXAgdGl0bGU9Ik5hdmlnYXRlIHRvIHRoZSBicmlkZ2UiPgogIExvZyBpbiB0byB5b3VyIGFjY291bnQgYXQgW2Jhc2VtZW50LmZ1bi9icmlkZ2VdKGh0dHBzOi8vYmFzZW1lbnQuZnVuL2JyaWRnZSkuCjwvU3RlcD4KCjxTdGVwIHRpdGxlPSJTZWxlY3Qgd2l0aGRyYXdhbCB0YWIiPgogIExvY2F0ZSBhbmQgY2xpY2sgdGhlIHRhYiBsYWJlbGVkICoqV2l0aGRyYXdhbCoqLgogIAogIDxGcmFtZT4KICAgIDxpbWcgc3JjPSJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vaGVscHNjb3V0Lm5ldC9kb2NzL2Fzc2V0cy82ODUzMDZiNzJlMDU1MDI3N2FhOTI1MGUvaW1hZ2VzLzY4N2U0NzMwMzU3Y2VlNDc1NmI0Y2YwNi9maWxlLVZKMlBOR1BsSjUucG5nIiBhbHQ9IldpdGhkcmF3YWwgdGFiIGluIHRoZSBicmlkZ2UgaW50ZXJmYWNlIiAvPgogIDwvRnJhbWU+CjwvU3RlcD4KCjxTdGVwIHRpdGxlPSJDaG9vc2UgZGVzdGluYXRpb24gbmV0d29yayI+CiAgU2Nyb2xsIGRvd24gYW5kIHNlbGVjdCB0aGUgbmV0d29yayB5b3Ugd291bGQgbGlrZSB0byB3aXRoZHJhdyB5b3VyIHRva2VucyB0by4KICAKICA8RnJhbWU+CiAgICA8aW1nIHNyYz0iaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2hlbHBzY291dC5uZXQvZG9jcy9hc3NldHMvNjg1MzA2YjcyZTA1NTAyNzdhYTkyNTBlL2ltYWdlcy82ODdlNDc2OGE2NmU2MjE3N2VkNmQ4ZjEvZmlsZS1IeWJTSFV5b01ZLnBuZyIgYWx0PSJOZXR3b3JrIHNlbGVjdGlvbiBkcm9wZG93biBmb3Igd2l0aGRyYXdhbCIgLz4KICA8L0ZyYW1lPgo8L1N0ZXA+Cgo8U3RlcCB0aXRsZT0iU2VsZWN0IHRva2VuIj4KICBTZWxlY3QgdGhlIHRva2VuIHlvdSB3YW50IHRvIHdpdGhkcmF3LgogIAogIDxGcmFtZT4KICAgIDxpbWcgc3JjPSJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vaGVscHNjb3V0Lm5ldC9kb2NzL2Fzc2V0cy82ODUzMDZiNzJlMDU1MDI3N2FhOTI1MGUvaW1hZ2VzLzY4N2U0ODJhYmIyZGNmNGM2MmUxNmExMC9maWxlLXVsT1A3VWg0Z2kucG5nIiBhbHQ9IlRva2VuIHNlbGVjdGlvbiBpbnRlcmZhY2UiIC8+CiAgPC9GcmFtZT4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IkVudGVyIGFtb3VudCBhbmQgYnJpZGdlIj4KICBFbnRlciB5b3VyIHdpdGhkcmF3YWwgYW1vdW50LCBhbmQgdGhlbiBjbGljayAqKkJyaWRnZSoqLgogIAogIDxGcmFtZT4KICAgIDxpbWcgc3JjPSJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vaGVscHNjb3V0Lm5ldC9kb2NzL2Fzc2V0cy82ODUzMDZiNzJlMDU1MDI3N2FhOTI1MGUvaW1hZ2VzLzY4N2RmZjI2NjgyOGE2NmJiZWNmMGJmZi9maWxlLTM1RmR3dDBqWkMucG5nIiBhbHQ9IkFtb3VudCBpbnB1dCBmaWVsZCB3aXRoIEJyaWRnZSBidXR0b24iIC8+CiAgPC9GcmFtZT4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IkNvbmZpcm0gdHJhbnNhY3Rpb24iPgogIENvbmZpcm0gdGhlIHRyYW5zYWN0aW9uIGluIHlvdXIgd2FsbGV0IHRvIGNvbXBsZXRlIHlvdXIgd2l0aGRyYXdhbC4KICAKICA8Q2hlY2s+CiAgICBPbmNlIGNvbmZpcm1lZCwgeW91ciB0b2tlbnMgd2lsbCBiZSBicmlkZ2VkIHRvIHRoZSBzZWxlY3RlZCBuZXR3b3JrIGFuZCBzaG91bGQgYXJyaXZlIHNob3J0bHkuCiAgPC9DaGVjaz4KPC9TdGVwPgo8L1N0ZXBzPgoKPEluZm8+CldpdGhkcmF3YWwgcHJvY2Vzc2luZyB0aW1lcyB0eXBpY2FsbHkgcmFuZ2UgZnJvbSBhIGZldyBtaW51dGVzIHRvIGFuIGhvdXIsIGRlcGVuZGluZyBvbiBuZXR3b3JrIGNvbmdlc3Rpb24gYW5kIHRoZSBkZXN0aW5hdGlvbiBjaGFpbi4KPC9JbmZvPgo=",
    "lastUpdated": "2025-09-03T03:33:37.946Z"
  },
  {
    "sourceFile": "learn/deposits-withdrawals/how-to-verify-transaction-status.mdx",
    "sourceHash": "CklmIHlvdSd2ZSBzZW50IGEgdHJhbnNhY3Rpb24gb24gdGhlIEIzIE5ldHdvcmsgYW5kIHdhbnQgdG8gY2hlY2sgd2hldGhlciBpdCdzIGJlZW4gY29uZmlybWVkLCBwZW5kaW5nLCBvciBmYWlsZWQsIHlvdSBjYW4gZWFzaWx5IHRyYWNrIGl0IHVzaW5nIHRoZSBCMyBCbG9jayBFeHBsb3Jlci4gQWxsIHlvdSBuZWVkIGlzIHRoZSB0cmFuc2FjdGlvbiBoYXNoIChUeEhhc2gpIG9yIHRoZSB3YWxsZXQgYWRkcmVzcyBpbnZvbHZlZCBpbiB0aGUgdHJhbnNhY3Rpb24uCgojIyBTdGVwcyB0byBWZXJpZnkgYSBUcmFuc2FjdGlvbgoKPGlmcmFtZQogIGNsYXNzTmFtZT0idy1mdWxsIGFzcGVjdC12aWRlbyByb3VuZGVkLXhsIgogIHNyYz0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvQ1puY1ZXSTFhSGsiCiAgdGl0bGU9IkhvdyB0byB2ZXJpZnkgdHJhbnNhY3Rpb24gc3RhdHVzIG9uIEIzIgogIGZyYW1lQm9yZGVyPSIwIgogIGFsbG93PSJhY2NlbGVyb21ldGVyOyBhdXRvcGxheTsgY2xpcGJvYXJkLXdyaXRlOyBlbmNyeXB0ZWQtbWVkaWE7IGd5cm9zY29wZTsgcGljdHVyZS1pbi1waWN0dXJlIgogIGFsbG93RnVsbFNjcmVlbgo+PC9pZnJhbWU+Cgo8U3RlcHM+CjxTdGVwIHRpdGxlPSJOYXZpZ2F0ZSB0byBCMyBFeHBsb3JlciI+CiAgR28gdG8gW2V4cGxvcmVyLmIzLmZ1bl0oaHR0cHM6Ly9leHBsb3Jlci5iMy5mdW4pLgo8L1N0ZXA+Cgo8U3RlcCB0aXRsZT0iQWNjZXNzIHRyYW5zYWN0aW9ucyI+CiAgSG92ZXIgb3ZlciB0aGUgbGVmdCBzaWRlIHBhbmVsIHRvIGV4cGFuZCBpdCBhbmQgY2xpY2sgb24gKipUcmFuc2FjdGlvbnMuKioKICAKICA8RnJhbWU+CiAgICA8aW1nIHNyYz0iaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2hlbHBzY291dC5uZXQvZG9jcy9hc3NldHMvNjg1MzA2YjcyZTA1NTAyNzdhYTkyNTBlL2ltYWdlcy82ODdlNTU0OTRiMzkzNjY5M2JhMGVjYmIvZmlsZS1vMFdQcnpNVWJmLnBuZyIgYWx0PSJCMyBFeHBsb3JlciBzaWRlYmFyIHdpdGggVHJhbnNhY3Rpb25zIG9wdGlvbiBoaWdobGlnaHRlZCIgLz4KICA8L0ZyYW1lPgo8L1N0ZXA+Cgo8U3RlcCB0aXRsZT0iU2VhcmNoIGZvciB5b3VyIHRyYW5zYWN0aW9uIj4KICBBIG5ldyBzZWFyY2ggYmFyIHdpbGwgYXBwZWFyLiBJbiB0aGUgc2VhcmNoIGJhciwgZW50ZXIgZWl0aGVyOgogIC0gVGhlIHdhbGxldCBhZGRyZXNzIHRoYXQgaW5pdGlhdGVkIHRoZSB0cmFuc2FjdGlvbgogIC0gT3IgdGhlIHRyYW5zYWN0aW9uIGhhc2ggKFR4SGFzaCkKICAKICA8RnJhbWU+CiAgICA8aW1nIHNyYz0iaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2hlbHBzY291dC5uZXQvZG9jcy9hc3NldHMvNjg1MzA2YjcyZTA1NTAyNzdhYTkyNTBlL2ltYWdlcy82ODdlNTU2ZTE5NDY1MTRjMzRiZmZhZTkvZmlsZS1zZkNlbTRnQkVzLnBuZyIgYWx0PSJTZWFyY2ggYmFyIGZvciBlbnRlcmluZyB3YWxsZXQgYWRkcmVzcyBvciB0cmFuc2FjdGlvbiBoYXNoIiAvPgogIDwvRnJhbWU+CjwvU3RlcD4KCjxTdGVwIHRpdGxlPSJWaWV3IHRyYW5zYWN0aW9uIGRldGFpbHMiPgogIEJyb3dzZSB0aGUgcmVzdWx0cyBhbmQgY2xpY2sgdGhlIHJlbGV2YW50IHRyYW5zYWN0aW9uIHRvIHZpZXc6CiAgLSBTdGF0dXMgKFN1Y2Nlc3MgLyBGYWlsZWQgLyBQZW5kaW5nKQogIC0gRGF0ZSAmIFRpbWUKICAtIFRva2VucyB0cmFuc2ZlcnJlZAogIC0gR2FzIHVzZWQKICAtIEFueSBvdGhlciBvbi1jaGFpbiBkZXRhaWxzCiAgCiAgPEZyYW1lPgogICAgPGltZyBzcmM9Imh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9oZWxwc2NvdXQubmV0L2RvY3MvYXNzZXRzLzY4NTMwNmI3MmUwNTUwMjc3YWE5MjUwZS9pbWFnZXMvNjg3ZTU1YjFmZmE4ODYxMGRhOTg2ZGZkL2ZpbGUtRVJyVFZBNE5MTy5wbmciIGFsdD0iVHJhbnNhY3Rpb24gZGV0YWlscyBwYWdlIHNob3dpbmcgc3RhdHVzIGFuZCB0cmFuc2FjdGlvbiBpbmZvcm1hdGlvbiIgLz4KICA8L0ZyYW1lPgogIAogIDxDaGVjaz4KICAgIFRoaXMgaXMgdGhlIGJlc3Qgd2F5IHRvIHRyYWNrIG1pbnRzLCB0cmFuc2ZlcnMsIGFuZCBvdGhlciBhY3Rpdml0eSBkaXJlY3RseSBvbiB0aGUgQjMgTmV0d29yay4KICA8L0NoZWNrPgo8L1N0ZXA+CjwvU3RlcHM+CgojIyBUcmFuc2FjdGlvbiBTdGF0dXMgTWVhbmluZ3MKCi0gKipTdWNjZXNzOioqIFRyYW5zYWN0aW9uIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkKLSAqKkZhaWxlZDoqKiBUcmFuc2FjdGlvbiBmYWlsZWQgdG8gZXhlY3V0ZSAob2Z0ZW4gZHVlIHRvIGluc3VmZmljaWVudCBnYXMgb3Igb3RoZXIgZXJyb3JzKQotICoqUGVuZGluZzoqKiBUcmFuc2FjdGlvbiBpcyBzdGlsbCBiZWluZyBwcm9jZXNzZWQgYnkgdGhlIG5ldHdvcmsKCjxUaXA+CllvdSBjYW4gYm9va21hcmsgZnJlcXVlbnRseSB1c2VkIHdhbGxldCBhZGRyZXNzZXMgaW4gdGhlIGV4cGxvcmVyIHRvIHF1aWNrbHkgY2hlY2sgdHJhbnNhY3Rpb24gaGlzdG9yeSBpbiB0aGUgZnV0dXJlLgo8L1RpcD4K",
    "lastUpdated": "2025-09-03T03:34:00.015Z"
  },
  {
    "sourceFile": "learn/deposits-withdrawals/how-to-swap-tokens.mdx",
    "sourceHash": "CldpdGggYnVpbHQtaW4gbXVsdGktY2hhaW4gc3VwcG9ydCwgeW91IGNhbiBzd2FwIHRva2VucyBhY3Jvc3MgZGlmZmVyZW50IG5ldHdvcmtzLCBhbGwgZnJvbSBvbmUgc2ltcGxlIGludGVyZmFjZS4gV2hldGhlciB5b3UncmUgcHJlcGFyaW5nIGZvciBhIG1pbnQsIGNvbnNvbGlkYXRpbmcgYXNzZXRzLCBvciBtb3ZpbmcgYmV0d2VlbiBjaGFpbnMsIHRoaXMgZ3VpZGUgd2Fsa3MgeW91IHRocm91Z2ggaG93IHRvIHN3YXAgb25lIHRva2VuIGZvciBhbm90aGVyLgoKIyMgSG93IHRvIFN3YXAgVG9rZW5zCgo8aWZyYW1lCiAgY2xhc3NOYW1lPSJ3LWZ1bGwgYXNwZWN0LXZpZGVvIHJvdW5kZWQteGwiCiAgc3JjPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC95UlIyckdpSm1OTSIKICB0aXRsZT0iSG93IHRvIHN3YXAgdG9rZW5zIHVzaW5nIEFueVNwZW5kIgogIGZyYW1lQm9yZGVyPSIwIgogIGFsbG93PSJhY2NlbGVyb21ldGVyOyBhdXRvcGxheTsgY2xpcGJvYXJkLXdyaXRlOyBlbmNyeXB0ZWQtbWVkaWE7IGd5cm9zY29wZTsgcGljdHVyZS1pbi1waWN0dXJlIgogIGFsbG93RnVsbFNjcmVlbgo+PC9pZnJhbWU+Cgo8U3RlcHM+CjxTdGVwIHRpdGxlPSJOYXZpZ2F0ZSB0byB0aGUgYnJpZGdlIj4KICBMb2cgaW4gdG8geW91ciBhY2NvdW50IGF0IFtiYXNlbWVudC5mdW4vYnJpZGdlXShodHRwczovL2Jhc2VtZW50LmZ1bi9icmlkZ2UpLgo8L1N0ZXA+Cgo8U3RlcCB0aXRsZT0iU2VsZWN0IHN3YXAgdGFiIj4KICBMb2NhdGUgdGhlIHRhYiBsYWJlbGVkICoqU3dhcCoqIGFuZCBzZWxlY3QgaXQuCiAgCiAgPEZyYW1lPgogICAgPGltZyBzcmM9Imh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9oZWxwc2NvdXQubmV0L2RvY3MvYXNzZXRzLzY4NTMwNmI3MmUwNTUwMjc3YWE5MjUwZS9pbWFnZXMvNjg3YTNjYzk5ZWRiZDYzNWMxOTRhZTRlL2ZpbGUteWR4NVRRbTM4aS5wbmciIGFsdD0iU3dhcCB0YWIgaGlnaGxpZ2h0ZWQgaW4gdGhlIGludGVyZmFjZSIgLz4KICA8L0ZyYW1lPgo8L1N0ZXA+Cgo8U3RlcCB0aXRsZT0iQ29uZmlndXJlIHN3YXAgcGFyYW1ldGVycyI+CiAgU2VsZWN0IHRoZSB0b2tlbiB5b3Ugd2FudCB0byBzd2FwIGZyb20gYW5kIHRoZSB0b2tlbiB5b3Ugd2FudCB0byByZWNlaXZlLCB0aGUgdG9rZW4gYW1vdW50LCBhbmQgdGhlIGNoYWluLgogIAogIDxGcmFtZT4KICAgIDxpbWcgc3JjPSJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vaGVscHNjb3V0Lm5ldC9kb2NzL2Fzc2V0cy82ODUzMDZiNzJlMDU1MDI3N2FhOTI1MGUvaW1hZ2VzLzY4N2EzZDk4OWVkYmQ2MzVjMTk0YWU1NC9maWxlLXNKaEl5dWNHNGIucG5nIiBhbHQ9IlN3YXAgY29uZmlndXJhdGlvbiBpbnRlcmZhY2Ugc2hvd2luZyB0b2tlbiBzZWxlY3Rpb24gYW5kIGFtb3VudHMiIC8+CiAgPC9GcmFtZT4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IlJldmlldyBhbmQgY29uZmlybSI+CiAgUmV2aWV3IGFuZCBjb25maXJtIHRoYXQgeW91IGhhdmUgc2VsZWN0ZWQgdGhlIGNvcnJlY3QgdG9rZW4gYW5kIGFtb3VudHMsIGFuZCB0aGVuIGNsaWNrICoqU3dhcCoqLgogIAogIDxGcmFtZT4KICAgIDxpbWcgc3JjPSJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vaGVscHNjb3V0Lm5ldC9kb2NzL2Fzc2V0cy82ODUzMDZiNzJlMDU1MDI3N2FhOTI1MGUvaW1hZ2VzLzY4N2EzZGUyODkxNjA0NzljMjAzMzI0NC9maWxlLWVyOXdyYjRsVjAucG5nIiBhbHQ9IlN3YXAgY29uZmlybWF0aW9uIGRpYWxvZyB3aXRoIHRyYW5zYWN0aW9uIGRldGFpbHMiIC8+CiAgPC9GcmFtZT4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IkNob29zZSBwYXltZW50IG1ldGhvZCI+CiAgQ2xpY2sgKipQYXkgZnJvbSBDb25uZWN0ZWQgV2FsbGV0Kiogb3IgKipQYXkgZnJvbSBhIGRpZmZlcmVudCB3YWxsZXQqKiBpZiB5b3Ugd2lzaCB0byB1c2UgYSBkaWZmZXJlbnQgd2FsbGV0IGZyb20gdGhlIG9uZSB5b3UgaGF2ZSBjdXJyZW50bHkgY29ubmVjdGVkLgogIAogIDxGcmFtZT4KICAgIDxpbWcgc3JjPSJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vaGVscHNjb3V0Lm5ldC9kb2NzL2Fzc2V0cy82ODUzMDZiNzJlMDU1MDI3N2FhOTI1MGUvaW1hZ2VzLzY4N2EzZTY2ODg0NjQ3NGYxZTFmNTFjNS9maWxlLXRUNXFqMWdKNHgucG5nIiBhbHQ9IlBheW1lbnQgbWV0aG9kIHNlbGVjdGlvbiBkaWFsb2ciIC8+CiAgPC9GcmFtZT4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IkNvbXBsZXRlIHRoZSBzd2FwIj4KICBDb25maXJtIHRoZSB0cmFuc2FjdGlvbiBpbiB5b3VyIHdhbGxldCB0byBjb21wbGV0ZSB0aGUgc3dhcC4gWW91ciBzd2FwIG1heSB0YWtlIHVwIHRvIGEgbWludXRlIHRvIHByb2Nlc3MuCiAgCiAgPEZyYW1lPgogICAgPGltZyBzcmM9Imh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9oZWxwc2NvdXQubmV0L2RvY3MvYXNzZXRzLzY4NTMwNmI3MmUwNTUwMjc3YWE5MjUwZS9pbWFnZXMvNjg3YTNmMjY4ODQ2NDc0ZjFlMWY1MWNhL2ZpbGUtS0VGMVV5RmQ3Qi5wbmciIGFsdD0iRmluYWwgdHJhbnNhY3Rpb24gY29uZmlybWF0aW9uIGluIHdhbGxldCIgLz4KICA8L0ZyYW1lPgogIAogIDxDaGVjaz4KICAgIFlvdXIgc3dhcHBlZCB0b2tlbnMgd2lsbCBhcHBlYXIgaW4geW91ciB3YWxsZXQgb25jZSB0aGUgdHJhbnNhY3Rpb24gaXMgcHJvY2Vzc2VkLgogIDwvQ2hlY2s+CjwvU3RlcD4KPC9TdGVwcz4KCjxUaXA+ClN3YXBzIGFyZSBwcm9jZXNzZWQgcXVpY2tseSwgYnV0IGR1cmluZyBwZXJpb2RzIG9mIGhpZ2ggbmV0d29yayBhY3Rpdml0eSwgdHJhbnNhY3Rpb25zIG1heSB0YWtlIGEgYml0IGxvbmdlciB0byBjb21wbGV0ZS4KPC9UaXA+Cg==",
    "lastUpdated": "2025-09-03T03:34:26.399Z"
  },
  {
    "sourceFile": "learn/deposits-withdrawals/depositing-tokens-on-b3.mdx",
    "sourceHash": "ClRvIGludGVyYWN0IHdpdGggc29tZSBnYW1lcyBhbmQgZmVhdHVyZXMgaW4gdGhlIEIzIGVjb3N5c3RlbSwgeW91J2xsIG5lZWQgdG9rZW5zIGluIHlvdXIgd2FsbGV0LiBUaGlzIGd1aWRlIHdhbGtzIHlvdSB0aHJvdWdoIGhvdyB0byBkZXBvc2l0IHRva2VucyB1c2luZyB0aGUgQjMgYnJpZGdlLgoKIyMgSG93IHRvIERlcG9zaXQgVG9rZW5zCgo8aWZyYW1lCiAgY2xhc3NOYW1lPSJ3LWZ1bGwgYXNwZWN0LXZpZGVvIHJvdW5kZWQteGwiCiAgc3JjPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC8tOTl6aXBNbE9sUSIKICB0aXRsZT0iSG93IHRvIGRlcG9zaXQgdG9rZW5zIHRvIEIzIgogIGZyYW1lQm9yZGVyPSIwIgogIGFsbG93PSJhY2NlbGVyb21ldGVyOyBhdXRvcGxheTsgY2xpcGJvYXJkLXdyaXRlOyBlbmNyeXB0ZWQtbWVkaWE7IGd5cm9zY29wZTsgcGljdHVyZS1pbi1waWN0dXJlIgogIGFsbG93RnVsbFNjcmVlbgo+PC9pZnJhbWU+Cgo8U3RlcHM+CjxTdGVwIHRpdGxlPSJMb2cgaW4gdG8gYmFzZW1lbnQuZnVuIj4KICBMb2cgaW4gdG8geW91ciBhY2NvdW50IGF0IGJhc2VtZW50LmZ1bi4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IlNlbGVjdCBuZXR3b3JrIGFuZCB0b2tlbiI+CiAgU2VsZWN0IHRoZSBuZXR3b3JrIGFuZCB0b2tlbiB5b3Ugd2FudCB0byBkZXBvc2l0IHRvIEIzLgogIAogIDxGcmFtZT4KICAgIDxpbWcgc3JjPSJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vaGVscHNjb3V0Lm5ldC9kb2NzL2Fzc2V0cy82ODUzMDZiNzJlMDU1MDI3N2FhOTI1MGUvaW1hZ2VzLzY4N2RmZTgxYmIyZGNmNGM2MmUxNjhmZS9maWxlLWN3bWh1RUZ4RDAucG5nIiBhbHQ9Ik5ldHdvcmsgYW5kIHRva2VuIHNlbGVjdGlvbiBpbnRlcmZhY2UiIC8+CiAgPC9GcmFtZT4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IkVudGVyIGFtb3VudCBhbmQgYnJpZGdlIj4KICBFbnRlciB0aGUgdG9rZW4gYW1vdW50IHlvdSB3YW50IHRvIGRlcG9zaXQgYW5kIGNsaWNrICoqQnJpZGdlKiouCiAgCiAgPEZyYW1lPgogICAgPGltZyBzcmM9Imh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9oZWxwc2NvdXQubmV0L2RvY3MvYXNzZXRzLzY4NTMwNmI3MmUwNTUwMjc3YWE5MjUwZS9pbWFnZXMvNjg3ZGZmMjY2ODI4YTY2YmJlY2YwYmZmL2ZpbGUtMzVGZHd0MGpaQy5wbmciIGFsdD0iVG9rZW4gYW1vdW50IGlucHV0IHdpdGggQnJpZGdlIGJ1dHRvbiIgLz4KICA8L0ZyYW1lPgo8L1N0ZXA+Cgo8U3RlcCB0aXRsZT0iQ29uZmlybSB0cmFuc2FjdGlvbiI+CiAgQ29uZmlybSB0aGUgdHJhbnNhY3Rpb24gaW4geW91ciBjb25uZWN0ZWQgd2FsbGV0IHRvIGNvbXBsZXRlIHlvdXIgZGVwb3NpdC4KICAKICA8RnJhbWU+CiAgICA8aW1nIHNyYz0iaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2hlbHBzY291dC5uZXQvZG9jcy9hc3NldHMvNjg1MzA2YjcyZTA1NTAyNzdhYTkyNTBlL2ltYWdlcy82ODdlMDQ2MjY4MjhhNjZiYmVjZjBjMGIvZmlsZS1Dejc4MWJkeWhCLnBuZyIgYWx0PSJXYWxsZXQgY29uZmlybWF0aW9uIGRpYWxvZyBmb3IgZGVwb3NpdCB0cmFuc2FjdGlvbiIgLz4KICA8L0ZyYW1lPgogIAogIDxDaGVjaz4KICAgIE9uY2UgdGhlIHRyYW5zYWN0aW9uIGlzIGNvbXBsZXRlLCB5b3VyIHRva2VucyB3aWxsIGFwcGVhciBpbiB5b3VyIHdhbGxldC4KICA8L0NoZWNrPgo8L1N0ZXA+CjwvU3RlcHM+Cgo8Tm90ZT4KRGVwb3NpdHMgdHlwaWNhbGx5IGNvbXBsZXRlIHdpdGhpbiBhIGZldyBtaW51dGVzLCBidXQgcHJvY2Vzc2luZyB0aW1lcyBtYXkgdmFyeSBkZXBlbmRpbmcgb24gbmV0d29yayBjb25nZXN0aW9uLgo8L05vdGU+Cg==",
    "lastUpdated": "2025-09-03T03:34:41.611Z"
  },
  {
    "sourceFile": "learn/deposits-withdrawals/b3-token.mdx",
    "sourceHash": "ClRoZSBCMyB0b2tlbiBpcyB0aGUgZW5naW5lIHBvd2VyaW5nIHRoZSBPcGVuIEdhbWluZyBlY29zeXN0ZW0sIGRlc2lnbmVkIHRvIGdyb3csIHNjYWxlIGFuZCB0cmFuc2Zvcm0gZ2FtaW5nIGJ5IGVtcG93ZXJpbmcgcGxheWVycywgZ2FtZSBkZXZlbG9wZXJzLCBhbmQgaG9sZGVycy4KCiMjIEZvciBQbGF5ZXJzCgotIFN0YWtlICRCMyB0byBlYXJuIHBhc3NpdmUgcmV3YXJkcywgcGFydGljaXBhdGUgaW4gU3Rha2UgdG8gV2luIGdhbWVzLCBhbmQgcmVjZWl2ZSBleHBvc3VyZSB0byBmdXR1cmUgQjMgR2FtZWNoYWlucy4KLSBVc2UgJEIzIHRvIGZ1bmQgJiBwdWJsaXNoIHRoZSBnYW1lcyB5b3UgYmVsaWV2ZSBpbiBhbmQgZWFybiByZXdhcmRzLgotIEdldCBlYXJseSBhY2Nlc3MgdG8gZ2FtZXMgYW5kIG5ldyBmZWF0dXJlcyBvbiBCU01OVC4KLSBQYXJ0aWNpcGF0ZSBpbiBnb3Zlcm5hbmNlIHRvIGRpcmVjdGx5IGltcGFjdCB0aGUgZnV0dXJlIG9mIHRoZSBCMyBlY29zeXN0ZW0uCgo8RnJhbWU+CjxpbWcgc3JjPSJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vaGVscHNjb3V0Lm5ldC9kb2NzL2Fzc2V0cy82ODUzMDZiNzJlMDU1MDI3N2FhOTI1MGUvaW1hZ2VzLzY4NzkwNzMzMWZkMmUzMTg0YjVjMzA2OS9maWxlLXFpcTVBZTQxSkEucG5nIiBhbHQ9IlBsYXllciBiZW5lZml0cyBpbmZvZ3JhcGhpYyBzaG93aW5nIHN0YWtpbmcgcmV3YXJkcyBhbmQgZ2FtZSBhY2Nlc3MiIC8+CjwvRnJhbWU+CgojIyBGb3IgR2FtZSBEZXZlbG9wZXJzCgotIEFwcGx5IGFuZCByZWNlaXZlIGZ1bmRpbmcgdG8gZGV2ZWxvcCBhbmQgc2NhbGUgeW91ciBnYW1lLgotIEVhcm4gcmVmZXJyYWwgcmV3YXJkcyBhY3Jvc3MgYWxsIHBsYXllcnMgb24gYW55IEdhbWVjaGFpbi4KLSBSZWNlaXZlIGZ1dHVyZSBhaXJkcm9wcyBmcm9tIGluZnJhc3RydWN0dXJlIHBhcnRuZXJzLgoKPEZyYW1lPgo8aW1nIHNyYz0iaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2hlbHBzY291dC5uZXQvZG9jcy9hc3NldHMvNjg1MzA2YjcyZTA1NTAyNzdhYTkyNTBlL2ltYWdlcy82ODc5MDc2YTcyODljYzRmYmFhMmNhNTMvZmlsZS1aWFpEejRucXY5LnBuZyIgYWx0PSJEZXZlbG9wZXIgYmVuZWZpdHMgc2hvd2luZyBmdW5kaW5nIGFuZCByZXdhcmRzIiAvPgo8L0ZyYW1lPgoKIyMgVGhlIEZseXdoZWVsIGluIE1vdGlvbgoKKlBsYXllcnMgU3Rha2UgYW5kIFNwZW5kICRCMyDihpIgRGV2ZWxvcGVycyBMYXVuY2ggR2FtZSBDaGFpbnMg4oaSIFNldHRsZW1lbnQgRmVlcyBHZW5lcmF0ZSBSZXdhcmRzIOKGkiBNb3JlIFZhbHVlIGlzIEFkZGVkIHRvICRCMy4qCgpUaGlzIGN5Y2xlIGVuc3VyZXMgc3VzdGFpbmFibGUgZ3Jvd3RoLCBtYWtpbmcgJCoqQjMqKiB0aGUgaHViIG9mIG9uLWNoYWluIGdhbWluZy4KCjxJbmZvPgpBZGRpdGlvbmFsIHV0aWxpdGllcyBmb3IgJEIzIHdpbGwgYmUgYW5ub3VuY2VkIGFzIHRoZXkgYmVjb21lIGF2YWlsYWJsZS4KPC9JbmZvPgoKIyBUb2tlbm9taWNzCgotICoqVG9rZW4gbmFtZToqKiBCMyAoQmFzZSkKLSAqKkNoYWluOioqIEJhc2UKLSAqKlRvdGFsIFN1cHBseToqKiAxMDAsMDAwLDAwMCwwMDAKLSAqKkRlY2ltYWxzOioqIDE4CgojIyBEaXN0cmlidXRpb24gYW5kIEFsbG9jYXRpb24KCjxGcmFtZT4KPGltZyBzcmM9Imh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9oZWxwc2NvdXQubmV0L2RvY3MvYXNzZXRzLzY4NTMwNmI3MmUwNTUwMjc3YWE5MjUwZS9pbWFnZXMvNjg3OTA3Y2E3Mjg5Y2M0ZmJhYTJjYTU2L2ZpbGUtSXpyTnZLaFRscy5wbmciIGFsdD0iVG9rZW4gZGlzdHJpYnV0aW9uIHBpZSBjaGFydCBzaG93aW5nIGFsbG9jYXRpb24gcGVyY2VudGFnZXMiIC8+CjwvRnJhbWU+CgojIyMgQ29tbXVuaXR5ICYgRWNvc3lzdGVtClRoaXMgYWxsb2NhdGlvbiBpcyB0byB0aGUgZ3Jvd3RoIG9mIHRoZSBCMyBlY29zeXN0ZW0gLSBmb3IgZ2FtZXJzLCBieSBnYW1lcnMuIEl0IGlzIHRvIGJ1aWxkIGFuIGVjb3N5c3RlbSBiZWxvbmdpbmcgdG8gdGhvc2Ugd2hvIHBsYXkgaW4gaXQ6IGFpcmRyb3BzLCB0b3VybmFtZW50cywgcGxheXRlc3RzLCBjb21tdW5pdHktbGVkIGdyYW50cywgcmVzZWFyY2ggJiBkZXZlbG9wbWVudCwgYW5kIG1hbnkgb3RoZXJzLgoKIyMjIEZvdW5kYXRpb24KVGhpcyBhbGxvY2F0aW9uIHdpbGwgc3VwcG9ydCB0aGUgUGxheWVyMSBGb3VuZGF0aW9uIGFzIGl0IGNvbnRyaWJ1dGVzIHRvIEIzIGFuZCBPcGVuIEdhbWluZydzIHZpc2lvbiBhbmQgYWRvcHRpb24sIGluY2x1ZGluZyBzdHJhdGVnaWMgZ3JhbnRzL3BhcnRuZXJzaGlwcywgbGVnYWwgYW5kIGNvbXBsaWFuY2UgbmVlZHMsIGF1ZGl0cywgYW5kIG90aGVyIG9wZXJhdGlvbmFsIGV4cGVuc2VzLgoKIyMjIFRlYW0gYW5kIEFkdmlzb3JzClRoaXMgYWxsb2NhdGlvbiBpcyBmb3IgY29yZSBjb250cmlidXRvcnMgKyAxOCBhZHZpc29ycyB3aG8gcmVwcmVzZW50IHRoZSBiZXN0IG9mIGJvdGggZ2FtaW5nIHdvcmxkcyAtIGZyb20gQUFBIHRvIHdlYjMuIEFsbCB0ZWFtIGFuZCBhZHZpc29ycyBhcmUgc3ViamVjdCB0byBhIDQteWVhciB2ZXN0aW5nIHNjaGVkdWxlOiAxLXllYXIgMjUlIGNsaWZmLCB3aXRoIG1vbnRobHkgdW5sb2NrcyB0aGVyZWFmdGVyLgoKIyMjIEludmVzdG9ycwpUaGlzIHBvcnRpb24gb2YgQjMgYWxsb2NhdGlvbiBpcyBmb3IgaW52ZXN0b3JzIHdobyBzdXBwb3J0ZWQgQjMncyBkZXZlbG9wbWVudCwgaW5jbHVkaW5nIDEwMCsgYW5nZWxzIHdobyBnYXRoZXJlZCBmcm9tIGV2ZXJ5IGNvcm5lciBvZiB0aGUgaW5kdXN0cnkgLSBnYW1pbmcsIHdlYjMsIGJyYW5kcywgaW5mcmFzdHJ1Y3R1cmUgLSB0byBzdXBwb3J0IGFuZCAqKkIqKjNsaWV2ZSoqIEIzJ3MgdmlzaW9uLiBBbGwgdGVhbSAmIGFkdmlzb3JzIGFyZSBzdWJqZWN0IHRvIGEgNC15ZWFyIHZlc3Rpbmcgc2NoZWR1bGU6IDEteWVhciAyNSUgY2xpZmYsIHdpdGggbW9udGhseSB1bmxvY2tzIHRoZXJlYWZ0ZXIuCgo8RnJhbWU+CjxpbWcgc3JjPSJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vaGVscHNjb3V0Lm5ldC9kb2NzL2Fzc2V0cy82ODUzMDZiNzJlMDU1MDI3N2FhOTI1MGUvaW1hZ2VzLzY4NzkwODg4MTNkOTUwNDA1ZWZmNmYyOC9maWxlLWtLVUowUDBobmMucG5nIiBhbHQ9IlZlc3Rpbmcgc2NoZWR1bGUgdmlzdWFsaXphdGlvbiIgLz4KPC9GcmFtZT4KCiMjIEhvdyB0byBBY2N1bXVsYXRlIEIzCgpZb3UgY2FuIGdldCBhZGRpdGlvbmFsICRCMyB0b2tlbnMgdGhyb3VnaCB2YXJpb3VzIG1ldGhvZHMsIHN1Y2ggYXM6CgotIFBsYXlpbmcgcGFydG5lciBnYW1lcywgd2lubmluZyB0b3VybmFtZW50cyBhbmQgY29tcGxldGluZyBpbi1nYW1lIHRhc2tzLgotIFBhcnRpY2lwYXRpbmcgaW4gY29tbXVuaXR5IGV2ZW50cyBhbmQgY2hhbGxlbmdlcy4KLSBTdGFraW5nIHlvdXIgZXhpc3RpbmcgdG9rZW5zIGZvciBhZGRpdGlvbmFsIHJld2FyZHMgYW5kIHBhcnRpY2lwYXRpbmcgaW4gU3Rha2UgdG8gV2luLgotIEVuZ2FnaW5nIHdpdGggcGFydG5lciBwbGF0Zm9ybXMgYW5kIHRoZWlyIGFjdGl2aXRpZXMuCgo8VGlwPgpUaGUgQjMgdG9rZW4gY3JlYXRlcyBhIHN1c3RhaW5hYmxlIGVjb3N5c3RlbSB3aGVyZSBhbGwgcGFydGljaXBhbnRzIC0gcGxheWVycywgZGV2ZWxvcGVycywgYW5kIHN0YWtlaG9sZGVycyAtIGJlbmVmaXQgZnJvbSB0aGUgZ3Jvd3RoIGFuZCBzdWNjZXNzIG9mIHRoZSBwbGF0Zm9ybS4KPC9UaXA+Cg==",
    "lastUpdated": "2025-09-03T03:35:14.123Z"
  },
  {
    "sourceFile": "data/profiles/index.mdx",
    "sourceHash": "CjxpbWcgc3JjPSIvaW1hZ2VzL3Byb2ZpbGVzLWJhbm5lci5qcGciIGFsdD0iQjMgUHJvZmlsZXMgQVBJIiBjbGFzc05hbWU9InctZnVsbCBoLWF1dG8gcm91bmRlZC0zeGwiIC8+Cgo8Q2FyZCB0aXRsZT0iRnJlZSBTb2NpYWwgUHJvZmlsZXMgQVBJIiBpY29uPSJ1c2VyIiBocmVmPSIvZGF0YS9wcm9maWxlcy9pbmRleCI+CiAgQ2hlY2sgb3V0IHRoZSBwcm9maWxlcyBBUEkgcmVmZXJlbmNlCjwvQ2FyZD4KCiMjIE92ZXJ2aWV3CgpUaGUgQjMgUHJvZmlsZXMgc2VydmljZSBzZXJ2ZXMgYXMgYSBkYXRhIEFQSSBmb3IgcmVzb2x2aW5nIGRlY2VudHJhbGl6ZWQgdXNlciBpZGVudGl0aWVzIGFjcm9zcyB0aGUgRVZNIGVjb3N5c3RlbS4gSXQgYWdncmVnYXRlcyBwcm9maWxlIGRhdGEgZnJvbSBtdWx0aXBsZSBzb3VyY2VzIGFuZCBwcm90b2NvbHMsIHByb3ZpZGluZyBkZXZlbG9wZXJzIHdpdGggYSBzaW5nbGUgQVBJIGVuZHBvaW50IHRvIGFjY2VzcyBjb21wcmVoZW5zaXZlIHVzZXIgaW5mb3JtYXRpb24gYW5kIHNvY2lhbCBjb250ZXh0LgoKIyMgS2V5IEZlYXR1cmVzCgo8Q2FyZEdyb3VwIGNvbHM9ezJ9PgogIDxDYXJkIHRpdGxlPSJNdWx0aS1Tb3VyY2UgQWdncmVnYXRpb24iIGljb249Im5ldHdvcmstd2lyZWQiPgogICAgQ29tYmluZXMgZGF0YSBmcm9tIEJhc2VtZW50LCBFTlMsIFRoaXJkd2ViIFNvY2lhbCwgYW5kIG90aGVyIFdlYjMgaWRlbnRpdHkgcHJvdmlkZXJzCiAgPC9DYXJkPgogIDxDYXJkIHRpdGxlPSJTb2NpYWwgSWRlbnRpdHkgSW50ZWdyYXRpb24iIGljb249InVzZXJzIj4KICAgIEZldGNoZXMgc29jaWFsIHByb2ZpbGVzIGZyb20gRU5TLCBMZW5zIFByb3RvY29sLCBhbmQgRmFyY2FzdGVyIG5ldHdvcmtzCiAgPC9DYXJkPgogIDxDYXJkIHRpdGxlPSJJbnRlbGxpZ2VudCBDYWNoaW5nIiBpY29uPSJkYXRhYmFzZSI+CiAgICBVc2VzIENsb3VkZmxhcmUgS1Ygc3RvcmFnZSBmb3IgZWZmaWNpZW50IGRhdGEgY2FjaGluZyB3aXRoIGNvbmZpZ3VyYWJsZSBUVEwKICA8L0NhcmQ+CiAgPENhcmQgdGl0bGU9IlVzZXIgUHJlZmVyZW5jZXMiIGljb249ImdlYXIiPgogICAgQWxsb3dzIHVzZXJzIHRvIHNldCBwcmVmZXJyZWQgcHJvZmlsZSBzb3VyY2VzIHZpYSBjcnlwdG9ncmFwaGljIHNpZ25hdHVyZXMKICA8L0NhcmQ+CjwvQ2FyZEdyb3VwPgoKIyMgU3VwcG9ydGVkIERhdGEgU291cmNlcwoKLSBFTlMgKEV0aGVyZXVtIE5hbWUgU2VydmljZSkKLSBMZW5zIFByb3RvY29sCi0gRmFyY2FzdGVyCi0gQjMuSUQKLSBCYXNlbWVudCBwcm9maWxlcwoKIyMgQVBJIEVuZHBvaW50cwoKPE5vdGU+CltDaGVjayBvdXQgdGhlIEFQSSByZWZlcmVuY2VdKC9kYXRhL3Byb2ZpbGVzL2luZGV4KSBmb3IgbW9yZSBkZXRhaWxzLgo8L05vdGU+CgojIyMgUHJvZmlsZSBMb29rdXAKUmV0cmlldmUgYWdncmVnYXRlZCBwcm9maWxlIGluZm9ybWF0aW9uIGZvciBhbnkgd2FsbGV0IGFkZHJlc3Mgb3IgdXNlcm5hbWUuCgpgYGBiYXNoCkdFVCBodHRwczovL3Byb2ZpbGVzLmIzLmZ1bi8/YWRkcmVzcz0weDEyMzQ1Njc4OTBhYmNkZWYxMjM0NTY3ODkwYWJjZGVmMTIzNDU2NzgKR0VUIGh0dHBzOi8vcHJvZmlsZXMuYjMuZnVuLz9uYW1lPXZpdGFsaWsuZXRoCkdFVCBodHRwczovL3Byb2ZpbGVzLmIzLmZ1bi8/bmFtZT1zZWFuLmIzLmZ1bgpgYGAKCiMjIyBTZXQgUHJvZmlsZSBQcmVmZXJlbmNlcwpBbGxvdyB1c2VycyB0byBzcGVjaWZ5IHRoZWlyIHByZWZlcnJlZCBwcm9maWxlIHNvdXJjZSB0aHJvdWdoIGNyeXB0b2dyYXBoaWMgc2lnbmF0dXJlcy4KCmBgYGJhc2gKUE9TVCAvcHJlZmVyZW5jZQpgYGAKCiMjIyBDdXN0b20gRGlzcGxheSBOYW1lcwpFbmFibGUgdXNlcnMgdG8gc2V0IGN1c3RvbSBkaXNwbGF5IG5hbWVzIHRoYXQgb3ZlcnJpZGUgYWxsIG90aGVyIHNvdXJjZXMuCgpgYGBiYXNoClBPU1QgL2Rpc3BsYXktbmFtZQpgYGAKCiMjIFJlc3BvbnNlIEZvcm1hdAoKVGhlIHNlcnZpY2UgcmV0dXJucyBhIHVuaWZpZWQgcHJvZmlsZSBvYmplY3QgdGhhdCBjb21iaW5lcyBkYXRhIGZyb20gYWxsIHNvdXJjZXM6CgpgYGBqc29uCnsKICAibmFtZSI6ICJ2aXRhbGlrLmV0aCIsCiAgImFkZHJlc3MiOiAiMHgxMjM0NTY3ODkwYWJjZGVmMTIzNDU2Nzg5MGFiY2RlZjEyMzQ1Njc4IiwKICAiYXZhdGFyIjogImh0dHBzOi8vZXhhbXBsZS5jb20vYXZhdGFyLmpwZyIsCiAgImJpbyI6ICJFdGhlcmV1bSBjby1mb3VuZGVyIiwKICAiZGlzcGxheU5hbWUiOiAiVml0YWxpayBCdXRlcmluIiwKICAicHJvZmlsZXMiOiBbCiAgICB7CiAgICAgICJ0eXBlIjogImVuc2RhdGEiLAogICAgICAiYWRkcmVzcyI6ICIweDEyMy4uLiIsCiAgICAgICJuYW1lIjogInZpdGFsaWsuZXRoIiwKICAgICAgImF2YXRhciI6ICJodHRwczovLy4uLiIsCiAgICAgICJiaW8iOiBudWxsLAogICAgICAiZGlzcGxheU5hbWUiOiBudWxsCiAgICB9LAogICAgewogICAgICAidHlwZSI6ICJ0aGlyZHdlYi1mYXJjYXN0ZXIiLAogICAgICAiYWRkcmVzcyI6ICIweDEyMy4uLiIsCiAgICAgICJuYW1lIjogInZpdGFsaWsiLAogICAgICAiYXZhdGFyIjogImh0dHBzOi8vLi4uIiwKICAgICAgImJpbyI6ICJFdGhlcmV1bSBjby1mb3VuZGVyIiwKICAgICAgImRpc3BsYXlOYW1lIjogIlZpdGFsaWsgQnV0ZXJpbiIKICAgIH0KICBdCn0KYGBgCgojIyBVc2UgQ2FzZXMKCjxDYXJkR3JvdXAgY29scz17MX0+CiAgPENhcmQgdGl0bGU9IkVuaGFuY2VkIFdhbGxldCBBdXRoZW50aWNhdGlvbiIgaWNvbj0ic2hpZWxkLWNoZWNrIj4KICAgIFByb3ZpZGUgcmljaCBjb250ZXh0IGFib3V0IHVzZXJzIGR1cmluZyB3YWxsZXQgY29ubmVjdGlvbiwgc2hvd2luZyB0aGVpciBzb2NpYWwgaWRlbnRpdHkgYW5kIFdlYjMgcmVwdXRhdGlvbiBhY3Jvc3MgcGxhdGZvcm1zLgogIDwvQ2FyZD4KICA8Q2FyZCB0aXRsZT0iU29jaWFsIEdhbWluZyBJbnRlZ3JhdGlvbiIgaWNvbj0iZ2FtZXBhZCI+CiAgICBEaXNwbGF5IGNvbXByZWhlbnNpdmUgcGxheWVyIHByb2ZpbGVzIGluIGdhbWVzLCBpbmNsdWRpbmcgRU5TIG5hbWVzLCBzb2NpYWwgaGFuZGxlcywgYW5kIGNyb3NzLXBsYXRmb3JtIGlkZW50aXRpZXMuCiAgPC9DYXJkPgogIDxDYXJkIHRpdGxlPSJEZUZpIFVzZXIgRXhwZXJpZW5jZSIgaWNvbj0iY29pbnMiPgogICAgRW5oYW5jZSB0cmFkaW5nIGludGVyZmFjZXMgYnkgc2hvd2luZyB0cmFkZXIgaWRlbnRpdGllcyBmcm9tIExlbnMsIEZhcmNhc3RlciwgYW5kIEVOUyBpbnN0ZWFkIG9mIGp1c3Qgd2FsbGV0IGFkZHJlc3Nlcy4KICA8L0NhcmQ+CiAgPENhcmQgdGl0bGU9IkNvbW11bml0eSBNYW5hZ2VtZW50IiBpY29uPSJ1c2Vycy1nZWFyIj4KICAgIEJ1aWxkIGJldHRlciBjb21tdW5pdHkgdG9vbHMgYnkgYWdncmVnYXRpbmcgdXNlciBpZGVudGl0aWVzIGZyb20gbXVsdGlwbGUgV2ViMyBzb2NpYWwgcGxhdGZvcm1zLgogIDwvQ2FyZD4KPC9DYXJkR3JvdXA+CgoKIyMgRXhhbXBsZSBVc2FnZQoKIyMjIEJhc2ljIFByb2ZpbGUgTG9va3VwCgpgYGBqYXZhc2NyaXB0Ci8vIEZldGNoIHByb2ZpbGUgYnkgYWRkcmVzcwpjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwczovL3Byb2ZpbGVzLmIzLmZ1bi8/YWRkcmVzcz0weDEyMy4uLicpOwpjb25zdCBwcm9maWxlID0gYXdhaXQgcmVzcG9uc2UuanNvbigpOwoKY29uc29sZS5sb2cocHJvZmlsZS5kaXNwbGF5TmFtZSk7IC8vICJWaXRhbGlrIEJ1dGVyaW4iCmNvbnNvbGUubG9nKHByb2ZpbGUucHJvZmlsZXMubGVuZ3RoKTsgLy8gTnVtYmVyIG9mIHNvdXJjZXMgZm91bmQKYGBgCgojIyMgRU5TIE5hbWUgUmVzb2x1dGlvbgoKYGBgamF2YXNjcmlwdAovLyBGZXRjaCBwcm9maWxlIGJ5IEVOUyBuYW1lCmNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vcHJvZmlsZXMuYjMuZnVuLz9uYW1lPXZpdGFsaWsuZXRoJyk7CmNvbnN0IHByb2ZpbGUgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7Cgpjb25zb2xlLmxvZyhwcm9maWxlLmFkZHJlc3MpOyAvLyBSZXNvbHZlZCB3YWxsZXQgYWRkcmVzcwpjb25zb2xlLmxvZyhwcm9maWxlLmF2YXRhcik7IC8vIEVOUyBhdmF0YXIgVVJMCmBgYAoKIyMjIFNldHRpbmcgVXNlciBQcmVmZXJlbmNlcwoKYGBgamF2YXNjcmlwdAovLyBTZXQgcHJlZmVycmVkIHByb2ZpbGUgc291cmNlIHdpdGggc2lnbmF0dXJlCmNvbnN0IG1lc3NhZ2UgPSBgU2V0UHJvZmlsZVByZWZlcmVuY2U6JHthZGRyZXNzfTp0aGlyZHdlYi1mYXJjYXN0ZXI6JHt0aW1lc3RhbXB9YDsKY29uc3Qgc2lnbmF0dXJlID0gYXdhaXQgd2FsbGV0LnNpZ25NZXNzYWdlKG1lc3NhZ2UpOwoKYXdhaXQgZmV0Y2goJ2h0dHBzOi8vcHJvZmlsZXMuYjMuZnVuL3ByZWZlcmVuY2UnLCB7CiAgbWV0aG9kOiAnUE9TVCcsCiAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sCiAgYm9keTogSlNPTi5zdHJpbmdpZnkoewogICAga2V5OiBhZGRyZXNzLAogICAgcHJlZmVycmVkVHlwZTogJ3RoaXJkd2ViLWZhcmNhc3RlcicsCiAgICBzaWduYXR1cmUsCiAgICBzaWduZXI6IGFkZHJlc3MsCiAgICB0aW1lc3RhbXAKICB9KQp9KTsKYGBgCgojIyBQZXJmb3JtYW5jZSAmIENhY2hpbmcKCi0gKipDYWNoZSBEdXJhdGlvbioqOiAxIGhvdXIgZm9yIHByb2ZpbGUgZGF0YQotICoqRnJlc2ggRGF0YSoqOiBVc2UgYD9mcmVzaD10cnVlYCB0byBieXBhc3MgY2FjaGUKLSAqKkdsb2JhbCBDRE4qKjogUG93ZXJlZCBieSBDbG91ZGZsYXJlJ3MgZWRnZSBuZXR3b3JrCi0gKipLViBTdG9yYWdlKio6IEVmZmljaWVudCBrZXktdmFsdWUgc3RvcmFnZSBmb3IgcHJlZmVyZW5jZXMKCiMjIFJhdGUgTGltaXRzCgpUaGUgc2VydmljZSBpbmhlcml0cyBDbG91ZGZsYXJlJ3MgYnVpbHQtaW4gRERvUyBwcm90ZWN0aW9uIGFuZCByYXRlIGxpbWl0aW5nLiBGb3IgaGlnaC12b2x1bWUgYXBwbGljYXRpb25zLCBjb25zaWRlciBpbXBsZW1lbnRpbmcgY2xpZW50LXNpZGUgY2FjaGluZyBvciBjb250YWN0IHRoZSBCMyB0ZWFtIGZvciBlbnRlcnByaXNlIGFjY2Vzcy4KCiMjIEJ1aWxkaW5nIG9uY2hhaW4gbWFkZSBlYXN5CjxOb3RlPgpbQ2hlY2sgb3V0IHRoZSBBUEkgcmVmZXJlbmNlXSgvZGF0YS9wcm9maWxlcy9pbmRleCkgZm9yIG1vcmUgZGV0YWlscy4KPC9Ob3RlPgoKPENhcmRHcm91cCBjb2xzPXsyfT4KICA8Q2FyZCB0aXRsZT0iQjMgRGF0YSBBUEkiIGhyZWY9Ii9kYXRhL2FwaS1yZWZlcmVuY2UvaW50cm9kdWN0aW9uIj4KICAgIENvbXByZWhlbnNpdmUgYmxvY2tjaGFpbiBkYXRhIGFuZCBhbmFseXRpY3MKICA8L0NhcmQ+CiAgPENhcmQgdGl0bGU9IkIzIFNESyIgaHJlZj0iL3Nkay9pbnRyb2R1Y3Rpb24iPgogICAgQjMgU0RLIGZvciBjcm9zcy1jaGFpbiBvcGVyYXRpb25zIGFuZCBnbG9iYWwgYWNjb3VudCBhdXRoZW50aWNhdGlvbgogIDwvQ2FyZD4KPC9DYXJkR3JvdXA+Cg==",
    "lastUpdated": "2025-09-03T04:57:01.419Z"
  },
  {
    "sourceFile": "data/api-reference/introduction.mdx",
    "sourceHash": "Ci0gQXZhaWxhYmxlIHRvIGJ1aWxkZXJzIGZvciBmcmVlLgotIEludGVsbGlnZW50IG11bHRpLWNoYWluIHJvdXRpbmcuCi0gQ2FjaGVkIGF0IHRoZSBlZGdlIGZvciBzcGVlZC4KCgo8Q2FyZCBocmVmPSIvZGF0YS9hcGktcmVmZXJlbmNlL2Jsb2Nrc2NvdXQvZ2V0LXRyYW5zYWN0aW9ucyIgaWNvbj0iZGF0YWJhc2UiIGhvcml6b250YWwgYXJyb3c9InRydWUiPgogIEJyb3dzZSB0aGUgUkVTVCBBUEkgcmVmZXJlbmNlLgo8L0NhcmQ+CgojIyBEYXRhIFNvdXJjZXMgJiBJbnRlbGxpZ2VuY2UKCjxTdGVwcz4KICA8U3RlcCB0aXRsZT0iQmxvY2tzY291dCBJbnRlZ3JhdGlvbiI+CiAgICBEaXJlY3QgYWNjZXNzIHRvIGluZGV4ZWQgYmxvY2tjaGFpbiBkYXRhIGZyb20gQmxvY2tzY291dCBleHBsb3JlcnMgYWNyb3NzIGFsbCBCMyBjaGFpbnMsIHByb3ZpZGluZyB0cmFuc2FjdGlvbiBoaXN0b3J5LCBjb250cmFjdCBpbnRlcmFjdGlvbnMsIGFuZCBibG9jayBkYXRhLgogIDwvU3RlcD4KICA8U3RlcCB0aXRsZT0iVGhpcmR3ZWIgRGF0YSBMYXllciI+CiAgICBFbmhhbmNlZCB3aXRoIFRoaXJkd2ViJ3MgcG93ZXJmdWwgZGF0YSBpbmZyYXN0cnVjdHVyZSBmb3IgTkZUIG1ldGFkYXRhLCBjb250cmFjdCBBQklzLCBhbmQgc21hcnQgY29udHJhY3QgYW5hbHl0aWNzLgogIDwvU3RlcD4KICA8U3RlcCB0aXRsZT0iSW50ZWxsaWdlbnQgUm91dGluZyI+CiAgICBPdXIgQVBJIGF1dG9tYXRpY2FsbHkgcm91dGVzIHJlcXVlc3RzIHRvIHRoZSBvcHRpbWFsIGRhdGEgc291cmNlIGFuZCBjaGFpbiwgZW5zdXJpbmcgZmFzdCByZXNwb25zZSB0aW1lcyBhbmQgZGF0YSBhY2N1cmFjeS4KICA8L1N0ZXA+CiAgPFN0ZXAgdGl0bGU9IlVuaWZpZWQgRWNvc3lzdGVtIFZpZXciPgogICAgTWVyZ2VkIGRhdGEgZnJvbSBhbGwgQjMgZWNvc3lzdGVtIGNoYWlucyBwcm92aWRlcyBhIGNvbXByZWhlbnNpdmUgdmlldyBvZiBjcm9zcy1jaGFpbiBhY3Rpdml0aWVzIGFuZCBhc3NldHMuCiAgPC9TdGVwPgo8L1N0ZXBzPgoKIyMgQXV0aGVudGljYXRpb24KCk5vIGF1dGhlbnRpY2F0aW9uIHJlcXVpcmVkIGZvciBwdWJsaWMgZW5kcG9pbnRzLiBTaW1wbHkgbWFrZSByZXF1ZXN0cyB0byBzdGFydCBhY2Nlc3NpbmcgQjMgZWNvc3lzdGVtIGRhdGEgaW1tZWRpYXRlbHkuCgogPGlmcmFtZQogICBjbGFzc05hbWU9InctZnVsbCBhc3BlY3QtdmlkZW8gcm91bmRlZC14bCIKICAgIHNyYz0iaHR0cHM6Ly9jdXN0b21lci1nZzZxczdubTV1ZTk0dDY0LmNsb3VkZmxhcmVzdHJlYW0uY29tLzMwNzljYmRiNWU3Yzk1NGY4ODZlZGVmNTJmNWFkOTczL2lmcmFtZT9tdXRlZD10cnVlJmxvb3A9dHJ1ZSZhdXRvcGxheT10cnVlJnBvc3Rlcj1odHRwcyUzQSUyRiUyRmN1c3RvbWVyLWdnNnFzN25tNXVlOTR0NjQuY2xvdWRmbGFyZXN0cmVhbS5jb20lMkYzMDc5Y2JkYjVlN2M5NTRmODg2ZWRlZjUyZjVhZDk3MyUyRnRodW1ibmFpbHMlMkZ0aHVtYm5haWwuanBnJTNGdGltZSUzRCUyNmhlaWdodCUzRDYwMCIKICAgIHRpdGxlPSJCMyBEYXRhIEFQSSIKICAgIGZyYW1lQm9yZGVyPSIwIgogIGFsbG93PSJhY2NlbGVyb21ldGVyOyBhdXRvcGxheTsgY2xpcGJvYXJkLXdyaXRlOyBlbmNyeXB0ZWQtbWVkaWE7IGd5cm9zY29wZTsgcGljdHVyZS1pbi1waWN0dXJlIgogIGFsbG93RnVsbFNjcmVlbgogID48L2lmcmFtZT4K",
    "lastUpdated": "2025-10-31T02:51:22.464Z"
  },
  {
    "sourceFile": "bondkit/sdk/reference.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-10-31T02:53:19.665Z"
  },
  {
    "sourceFile": "bondkit/concepts/targets.mdx",
    "sourceHash": "CiMjIFRhcmdldCBhbW91bnQKCi0gYHRhcmdldEFtb3VudGAgaXMgdGhlIHF1b3Rl4oCRYXNzZXQgdGhyZXNob2xkIHRoYXQgZW5hYmxlcyBtaWdyYXRpb24uCi0gU2V0IGF0IGNyZWF0aW9uOyBkZW5vbWluYXRlZCBpbiB0aGUgcXVvdGUgYXNzZXQgKEVUSCBvciBhbiBhbGxvd2VkIEVSQzIwKS4KLSBUaGUgYm9uZGluZyBwaGFzZSBlbmRzIG9uY2UgdG90YWwgcmFpc2VkIHJlYWNoZXMgdGhlIHRhcmdldCAoZXhjZXNzIGNvbnRyaWJ1dGlvbnMgYXJlIHJlZnVuZGVkKS4KCiMjIFdobyBjYW4gbWlncmF0ZQoKLSBPbmx5IHRoZSB0b2tlbiBvd25lci9jcmVhdG9yIChtaWdyYXRpb24gYWRtaW4pIGNhbiBjYWxsIGBtaWdyYXRlVG9EZXgoKWAuCgojIyBXaGF0IGhhcHBlbnMgYXQgbWlncmF0aW9uCgotIFNwbGl0IG9mIGFjY3VtdWxhdGVkIHF1b3RlIGFzc2V0OgogIC0gUG9ydGlvbiB0byBgZmVlUmVjaXBpZW50YCwgYmFzZWQgb24gYGxwU3BsaXRSYXRpb0ZlZVJlY2lwaWVudEJwc2AuCiAgLSBSZW1haW5kZXIgdXNlZCBhcyBsaXF1aWRpdHkgYWxvbmdzaWRlIHRva2VucyByZXNlcnZlZCBmb3IgTFAuCi0gRm9yIFVuaXN3YXAgdjQgbWlncmF0aW9uLCB0aGUgY29udHJhY3QgY29tcHV0ZXMgYHNxcnRQcmljZVg5NmAgdG8gaW5pdGlhbGl6ZSB0aGUgcG9vbC4KLSBMaXF1aWRpdHkgaXMgYWRkZWQgdG8gdGhlIHY0IHBvb2wgd2l0aCBhcHByb3ByaWF0ZSBzYWZlZ3VhcmRzOyBMUCB0b2tlbnMgb3IgcG9zaXRpb25zIGFyZSBoYW5kbGVkIHBlciB2NCBzZW1hbnRpY3MsIHdpdGggb3duZXJzaGlwIGVmZmVjdGl2ZWx5IGJ1cm5lZC9yZW5vdW5jZWQgZm9yIGRlY2VudHJhbGl6YXRpb24uCi0gT3duZXJzaGlwIGlzIHJlbm91bmNlZCBpbW1lZGlhdGVseSB0byBmaW5hbGl6ZSBkZWNlbnRyYWxpemF0aW9uLgoKIyMgUG9zdOKAkW1pZ3JhdGlvbgoKLSBCb25kaW5n4oCRcGhhc2UgdHJhZGluZyBpcyBkaXNhYmxlZC4KLSBUb2tlbiBiZWhhdmVzIGFzIGEgc3RhbmRhcmQgRVJDMjAgd2l0aCBERVjigJFiYXNlZCBwcmljZSBkaXNjb3ZlcnkuCgo8Tm90ZT4KTmV0d29ya3MgJiBhZGRyZXNzZXMgKGZhY3RvcnksIHY0IHBvb2wgbWFuYWdlciwgaG9va3MpIGFyZSBsaXN0ZWQgb24gdGhlIE5ldHdvcmtzIHBhZ2UuCjwvTm90ZT4KCgo=",
    "lastUpdated": "2025-09-03T03:38:39.396Z"
  },
  {
    "sourceFile": "bondkit/concepts/pricing.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-10-31T02:55:08.508Z"
  },
  {
    "sourceFile": "bondkit/concepts/bonding-phase.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-10-31T02:56:51.663Z"
  },
  {
    "sourceFile": "bondkit/guides/set-aggressiveness.mdx",
    "sourceHash": "CiMjIFVuZGVyc3RhbmRpbmcgQWdncmVzc2l2ZW5lc3MgSW1wYWN0CgpUaGUgYWdncmVzc2l2ZW5lc3MgZmFjdG9yIGRldGVybWluZXMgaG93IG11Y2ggYWR2YW50YWdlIGVhcmx5IGJ1eWVycyBnZXQuIEhpZ2hlciB2YWx1ZXMgY3JlYXRlIHN0ZWVwZXIgcHJpY2UgaW5jcmVhc2VzIHRoYXQgcmV3YXJkIGVhcmx5IHBhcnRpY2lwYXRpb24uCgojIyMgSW1wYWN0IGF0IERpZmZlcmVudCBMZXZlbHMKCnwgUmFuZ2UgfCBFYXJseSBCdXllciBBZHZhbnRhZ2UgfCBCZXN0IEZvciB8IFByaWNlIEJlaGF2aW9yIHwKfC0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tfAp8ICoqMC0yMCoqIHwgMS41LTJ4IGFkdmFudGFnZSB8IEZhaXIgbGF1bmNoZXMsIGNvbW11bml0eSB0b2tlbnMgfCBOZWFybHkgbGluZWFyIHByaWNpbmcgfAp8ICoqMzAtNjAqKiB8IDItM3ggYWR2YW50YWdlIHwgTW9zdCBwcm9qZWN0cywgYmFsYW5jZWQgYXBwcm9hY2ggfCBNb2RlcmF0ZSBjdXJ2ZSB8CnwgKio3MC0xMDAqKiB8IDMtNnggYWR2YW50YWdlIHwgSHlwZSBsYXVuY2hlcywgcmV3YXJkIGJlbGlldmVycyB8IFN0ZWVwIGN1cnZlIHwKCjxOb3RlPgpBdCBtYXhpbXVtIGFnZ3Jlc3NpdmVuZXNzICgxMDApLCBlYXJseSBidXllcnMgY2FuIGdldCAqKjZ4IG1vcmUgdG9rZW5zKiogdGhhbiBsYXRlIGJ1eWVycyBmb3IgdGhlIHNhbWUgYW1vdW50IG9mIEIzIQo8L05vdGU+CgojIyBEZWNpc2lvbiBGcmFtZXdvcmsKCiMjIyBDaG9vc2UgTG93ICgwLTMwKSBJZjoKLSAqKkdvYWwqKjogRmFpciBkaXN0cmlidXRpb24gZm9yIGV2ZXJ5b25lCi0gKipDb21tdW5pdHkqKjogVmFsdWVzIGVxdWFsaXR5IG92ZXIgZWFybHkgcmV3YXJkcwotICoqVGltZWxpbmUqKjogV2FudCBzdGVhZHksIHByZWRpY3RhYmxlIGdyb3d0aAotICoqUmlzayoqOiBQcmVmZXIgbWluaW1hbCBwcmljZSB2b2xhdGlsaXR5CgojIyMgQ2hvb3NlIE1lZGl1bSAoMzAtNzApIElmOgotICoqR29hbCoqOiBCYWxhbmNlZCBhcHByb2FjaCB3aXRoIHNvbWUgZWFybHkgaW5jZW50aXZlCi0gKipDb21tdW5pdHkqKjogTWl4IG9mIGVhcmx5IHN1cHBvcnRlcnMgYW5kIGdlbmVyYWwgcHVibGljCi0gKipUaW1lbGluZSoqOiBNb2RlcmF0ZSBmdW5kcmFpc2luZyBwYWNlCi0gKipSaXNrKio6IENvbWZvcnRhYmxlIHdpdGggc29tZSBwcmljZSB2YXJpYW5jZQoKIyMjIENob29zZSBIaWdoICg3MC0xMDApIElmOgotICoqR29hbCoqOiBNYXhpbXVtIGVhcmx5IGFkb3B0ZXIgcmV3YXJkcwotICoqQ29tbXVuaXR5Kio6IFN0cm9uZyBjb3JlIGJlbGlldmVycwotICoqVGltZWxpbmUqKjogV2FudCBmYXN0IGZ1bmRyYWlzaW5nCi0gKipSaXNrKio6IENvbWZvcnRhYmxlIHdpdGggaGlnaCBwcmljZSBzd2luZ3MKCiMjIFJlYWwgSW1wYWN0IEV4YW1wbGUKCioqUHJvamVjdCBTZXR1cDoqKiAxME0gQjMgdGFyZ2V0LCBidXlpbmcgMU0gQjMgd29ydGgKCnwgQWdncmVzc2l2ZW5lc3MgfCBFYXJseSBCdXllciBHZXRzIHwgTGF0ZSBCdXllciBHZXRzIHwgQWR2YW50YWdlIHwKfC0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tfAp8IDAgfCB+MTAwSyB0b2tlbnMgfCB+MTAwSyB0b2tlbnMgfCAxeCAobm8gYWR2YW50YWdlKSB8CnwgNTAgfCB+MjA4SyB0b2tlbnMgfCB+MTE0SyB0b2tlbnMgfCAxLjh4IGFkdmFudGFnZSB8CnwgMTAwIHwgfjMwNksgdG9rZW5zIHwgfjQ5SyB0b2tlbnMgfCA2LjJ4IGFkdmFudGFnZSB8CgojIyBDb25maWd1cmF0aW9uIEV4YW1wbGUKCmBgYHR5cGVzY3JpcHQKY29uc3QgY29uZmlnID0gewogIG5hbWU6ICJNeSBUb2tlbiIsCiAgc3ltYm9sOiAiTVRLIiwgCiAgYWdncmVzc2l2ZW5lc3NGYWN0b3I6IDc1LCAvLyBIaWdoIHJld2FyZCBmb3IgZWFybHkgYnV5ZXJzCiAgdGFyZ2V0QW1vdW50OiBwYXJzZUV0aGVyKCIxMDAiKSwgLy8gMTAwIEIzIHRhcmdldAogIGZpbmFsVG9rZW5TdXBwbHk6IHBhcnNlRXRoZXIoIjEwMDAwMDAiKSwgLy8gMU0gdG9rZW5zCiAgLy8gLi4ub3RoZXIgcGFyYW1zCn07CmBgYAoKIyMgTmV4dCBTdGVwcwoKPENhcmRHcm91cCBjb2xzPXsyfT4KICA8Q2FyZCB0aXRsZT0iRGV0YWlsZWQgRXhhbXBsZXMiIGljb249ImNhbGN1bGF0b3IiIGhyZWY9Ii9ib25ka2l0L2NvbmNlcHRzL3ByaWNpbmcjYWdncmVzc2l2ZW5lc3MtZmFjdG9yLWltcGFjdCI+CiAgICBTZWUgZGV0YWlsZWQgdG9rZW4gZGlzdHJpYnV0aW9uIHRhYmxlcwogIDwvQ2FyZD4KICA8Q2FyZCB0aXRsZT0iVG9rZW4gQ3JlYXRpb24iIGljb249InJvY2tldCIgaHJlZj0iL2JvbmRraXQvcXVpY2tzdGFydCI+CiAgICBSZWFkeSB0byBkZXBsb3kgeW91ciB0b2tlbgogIDwvQ2FyZD4KPC9DYXJkR3JvdXA+CgoK",
    "lastUpdated": "2025-10-31T02:53:42.643Z"
  },
  {
    "sourceFile": "bondkit/guides/est-migration-price.mdx",
    "sourceHash": "CiMjIE92ZXJ2aWV3CgpNaWdyYXRpb24gaW5pdGlhbGl6ZXMgYSBVbmlzd2FwIHY0IHBvb2wuIFRoZSBjb250cmFjdCBjb21wdXRlcyBgc3FydFByaWNlWDk2YCBmcm9tIGJvbmRpbmcgc3RhdGUuCgojIyBQcmFjdGljYWwgYXBwcm9hY2gKCi0gVXNlIGJvbmRpbmcgcmVhZHMgdG8gYXBwcm94aW1hdGUgcHJpY2UgbmVhciB0aGUgdGFyZ2V0OgotIGBnZXRDdXJyZW50Qm9uZGluZ0N1cnZlUHJpY2VQZXJUb2tlbigpYAotIGBnZXRCb25kaW5nUHJvZ3Jlc3MoKWAKCiMjIENvbnNpZGVyYXRpb25zCgotIFRoZSBmaW5hbCBzcGxpdCBhbmQgbGlxdWlkaXR5IGFtb3VudCBjYW4gYWZmZWN0IGluaXRpYWwgdGlja3MuCi0gU2xpcHBhZ2UgcHJvdGVjdGlvbnMgYXJlIGFwcGxpZWQgd2hlbiBhZGRpbmcgbGlxdWlkaXR5LgotIEZvciBFUkMyMCBxdW90ZSBhc3NldHMsIGVuc3VyZSBwYWlyIGFuZCBkZWNpbWFscyBhcmUgYWNjb3VudGVkIGZvciB3aGVuIGNvbnZlcnRpbmcgdG8gYHNxcnRQcmljZVg5NmAuCgo8Tm90ZT4KRXhhY3QgaW5pdGlhbGl6YXRpb24gbWF0aCBpcyBoYW5kbGVkIG9uLWNoYWluLiBVc2UgcmVhZHMgZm9yIFVJIGVzdGltYXRpb247IHRyZWF0IGZpbmFsIG9uLWNoYWluIGluaXRpYWxpemF0aW9uIGFzIHNvdXJjZSBvZiB0cnV0aC4KPC9Ob3RlPgoKCg==",
    "lastUpdated": "2025-09-03T03:38:09.088Z"
  },
  {
    "sourceFile": "bondkit/guides/choose-quote-asset.mdx",
    "sourceHash": "CiMjIE92ZXJ2aWV3CgpCb25kS2l0IHN1cHBvcnRzIGJvbmRpbmcgYWdhaW5zdCBFVEggb3IgYW4gYWxsb3dlZCBFUkMyMCAoZS5nLiwgQjMpLiBZb3VyIGNob2ljZSBpbXBhY3RzIFVYLCBpbnRlZ3JhdGlvbnMsIGFuZCBsaXF1aWRpdHkgYXQgbWlncmF0aW9uLgoKIyMgV2hlbiB0byB1c2UgRVRICgotIEJyb2FkIGFjY2Vzc2liaWxpdHk7IG1vc3QgdXNlcnMgaG9sZCBFVEggb24gQmFzZQotIFNpbXBsZXIgVVggKG5vIHByaW9yIGFwcHJvdmFscykKLSBEaXJlY3QgRVRIIGxpcXVpZGl0eSBhdCBtaWdyYXRpb24KCiMjIFdoZW4gdG8gdXNlIGFuIEVSQzIwIChlLmcuLCBCMykKCi0gQWxpZ25zIHdpdGggYW4gZXhpc3RpbmcgdG9rZW4gZWNvbm9teQotIENhbiBib290c3RyYXAgZGVlcGVyIHRva2Vu4oCRdG9rZW4gcGFpcnMgYXQgbWlncmF0aW9uCi0gUmVxdWlyZXMgYXBwcm92YWxzIGJlZm9yZSBidXlzL3NlbGxzCgojIyBPcGVyYXRpb25hbCBkaWZmZXJlbmNlcwoKLSA1JSBmZWUgb24gYnV5cyBhbmQgc2VsbHMgZm9yIGJvdGggRVRIIGFuZCBFUkMyMAotIEVSQzIwIGZsb3dzIHJlcXVpcmUgYGFwcHJvdmVgIGJlZm9yZSBjdXJ2ZSBpbnRlcmFjdGlvbnMKLSBNaWdyYXRpb24gcGFpcnMgYXJlIGNyZWF0ZWQgYWdhaW5zdCBXRVRIIG9yIHRoZSBjaG9zZW4gRVJDMjAKCjxOb3RlPgpDb25maXJtIHRoZSBhbGxvd2Vk4oCRbGlzdCBmb3IgRVJDMjAgcXVvdGUgYXNzZXRzIHdpdGggdGhlIHRlYW0uIEJ5IGRlZmF1bHQgb25seSBzcGVjaWZpYyBhc3NldHMgbWF5IGJlIGVuYWJsZWQuCjwvTm90ZT4KCgo=",
    "lastUpdated": "2025-09-03T03:38:23.662Z"
  },
  {
    "sourceFile": "upside/testing-and-examples.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-10-29T22:14:34.613Z"
  },
  {
    "sourceFile": "upside/introduction.mdx",
    "sourceHash": "CiMjIE92ZXJ2aWV3CgpJbnRlZ3JhdGluZyB3aXRoIFVwc2lkZS53aW4gaXMgc2ltcGxlLiBZb3VyIGdhbWUgcnVucyBpbiBhbiBpZnJhbWUgb24gb3VyIHBsYXRmb3JtLCByZWNlaXZlcyBwbGF5ZXIgYXV0aGVudGljYXRpb24gdmlhIEpXVCwgYW5kIGludGVyYWN0cyB3aXRoIHRoZSBVcHNpZGUgYmFja2VuZCB0aHJvdWdoIG91ciBTREsgZm9yIGJldCBwbGFjZW1lbnQgYW5kIHBheW91dCBwcm9jZXNzaW5nLgoKKipLZXkgcHJpbmNpcGxlKio6IFlvdXIgYmFja2VuZCBoYW5kbGVzIGdhbWUgbG9naWMgYW5kIHN0YXRlIChjYXJkcywgd2lubmVycywgb3V0Y29tZXMpLCB3aGlsZSBVcHNpZGUgaGFuZGxlcyBhbGwgV0lOIHRva2VuIHRyYW5zYWN0aW9ucy4KCiMjIEludGVncmF0aW9uIEZsb3cKCjxTdGVwcz4KICA8U3RlcCB0aXRsZT0iQ29udGFjdCBCMyBUZWFtIj4KICAgIFJlYWNoIG91dCB0byBnZXQgeW91ciBnYW1lIGFwcHJvdmVkIGFuZCBjb25maWd1cmVkIG9uIFVwc2lkZS4KCiAgICBgYGB0ZXh0CiAgICBDb250YWN0OiBjb250YWN0QG5wY2xhYnMub3JnCiAgICBJbmNsdWRlOiBHYW1lIG5hbWUsIGRlc2NyaXB0aW9uLCBnYW1lIHR5cGUsIGFuZCB5b3VyIGJhY2tlbmQgVVJMCiAgICBgYGAKICA8L1N0ZXA+CiAgPFN0ZXAgdGl0bGU9IkdhbWUgTG9hZHMgaW4gSWZyYW1lIj4KICAgIFBsYXllcnMgbGF1bmNoIHlvdXIgZ2FtZSwgd2hpY2ggbG9hZHMgaW5zaWRlIGFuIGlmcmFtZSBvbiB1cHNpZGUud2luLiBZb3VyIGdhbWUgcmVjZWl2ZXM6IC0gSldUIHRva2VuIGZvciB0aGUgcGxheWVyIC0gUGxheWVyIGF1dGhlbnRpY2F0aW9uIGNvbnRleHQgLSBBY2Nlc3MgdG8gdGhlIFVwc2lkZSBTREsKICA8L1N0ZXA+CiAgPFN0ZXAgdGl0bGU9IkZyb250ZW5kOiBSZWNlaXZlIEpXVCI+CiAgICBXcmFwIHlvdXIgZ2FtZSB3aXRoIGBQYXJlbnRQcm92aWRlcmAgZnJvbSB0aGUgVXBzaWRlIFNESyB0byByZWNlaXZlIHRoZSBKV1QuCgogICAgYGBgamF2YXNjcmlwdAogICAgaW1wb3J0IHsgUGFyZW50UHJvdmlkZXIgfSBmcm9tICJAYjNkb3RmdW4vdXBzaWRlLXNkayI7CiAgICAKICAgIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEdhbWVBcHAoKSB7CiAgICAgIHJldHVybiAoCiAgICAgICAgPFBhcmVudFByb3ZpZGVyPgogICAgICAgICAgPFlvdXJHYW1lQ29tcG9uZW50IC8+CiAgICAgICAgPC9QYXJlbnRQcm92aWRlcj4KICAgICAgKTsKICAgIH0KICAgIGBgYAogIDwvU3RlcD4KICA8U3RlcCB0aXRsZT0iQmFja2VuZDogUGxhY2UgQmV0Ij4KICAgIFdoZW4gYSBwbGF5ZXIgc3RhcnRzIHBsYXlpbmcsIHlvdXIgYmFja2VuZCBjYWxscyBgcGxhY2VCZXRgIHRvIGxvY2sgaW4gdGhlaXIgd2FnZXIuCgogICAgYGBgamF2YXNjcmlwdAogICAgeyBjcmVhdGVCM0NsaWVudCB9IGZyb20gIkBiM2RvdGZ1bi91cHNpZGUtc2RrL3NlcnZlciI7IAogICAgCiAgICBjb25zdCBiM0NsaWVudCA9IGNyZWF0ZUIzQ2xpZW50KCk7IAogICAgY29uc3QgYmV0UmVzdWx0ID0gYXdhaXQKICAgIGIzQ2xpZW50LnBsYWNlQmV0KAogICAgICAiY29pbi1mbGlwIiwgLy8gZ2FtZVR5cGUgCiAgICAgICIxMDAwMDAwMDAwMDAwMDAwMDAiIC8vIGJldEFtb3VudCBpbiB3ZWkgKDEgdG9rZW4gPSAxMF4xOCB3ZWkpIAogICAgKTsgCiAgICBgYGAKICA8L1N0ZXA+CiAgPFN0ZXAgdGl0bGU9IkJhY2tlbmQ6IEhhbmRsZSBHYW1lIExvZ2ljIj4KICAgIFlvdXIgYmFja2VuZDogLSBEZXRlcm1pbmVzIGdhbWUgb3V0Y29tZSAoY29pbiBsYW5kcyBvbiBoZWFkcy90YWlscykgLSBTdG9yZXMgZ2FtZSBzdGF0ZSBpbiB5b3VyIGRhdGFiYXNlIC0gQ2FsY3VsYXRlcyBwYXlvdXQgYW1vdW50IC0gUHJlcGFyZXMgb3V0Y29tZSBkYXRhIChwbGF5ZXIgY2hvaWNlLCByZXN1bHQsIG91dGNvbWUpCiAgPC9TdGVwPgogIDxTdGVwIHRpdGxlPSJCYWNrZW5kOiBQcm9jZXNzIFBheW91dCI+CiAgICBXaGVuIGdhbWUgZW5kcywgc2VuZCB0aGUgcmVzdWx0IHRvIFVwc2lkZSB0byBjcmVkaXQgdGhlIHBsYXllcidzIFdJTiBiYWxhbmNlLgoKICAgIGBgYGphdmFzY3JpcHQKICAgIGNvbnN0IHBheW91dFJlc3VsdCA9IGF3YWl0IGIzQ2xpZW50LnByb2Nlc3NQYXlvdXQoCiAgICAgICJjb2luLWZsaXAiLCAgICAgIC8vIGdhbWVUeXBlCiAgICAgIHNlc3Npb25JZCwgICAgICAgIC8vIHVuaXF1ZSBnYW1lIHNlc3Npb24gSUQKICAgICAgcGF5b3V0QW1vdW50LCAgICAgLy8gV0lOIHRva2VucyB0byBhd2FyZCAoMCBpZiBsb3NzKQogICAgICAvLyBnYW1lRGF0YQogICAgICB7CiAgICAgICAgcGxheWVyQ2hvaWNlOiAiaGVhZHMiLAogICAgICAgIHJlc3VsdDogImhlYWRzIiwKICAgICAgICBvdXRjb21lOiAid2luIgogICAgICB9CiAgICApOwogICAgYGBgCiAgPC9TdGVwPgogIDxTdGVwIHRpdGxlPSJGcm9udGVuZDogU2hvdyBSZXN1bHQiPgogICAgWW91ciBnYW1lIGRpc3BsYXlzIHRoZSBvdXRjb21lIHRvIHRoZSBwbGF5ZXIuCgogICAgVGhlIFVwc2lkZSBwbGF0Zm9ybSBhdXRvbWF0aWNhbGx5OgoKICAgIC0gVXBkYXRlcyB0aGUgcGxheWVyJ3MgV0lOIGJhbGFuY2UKICAgIC0gQWRkcyB0aGUgd2luL2xvc3MgdG8gbGVhZGVyYm9hcmRzCiAgICAtIFNlbmRzIG5vdGlmaWNhdGlvbnMKICA8L1N0ZXA+CjwvU3RlcHM+CgojIyBJbnN0YWxsYXRpb24KCmBgYGJhc2gKbnBtIGluc3RhbGwgQGIzZG90ZnVuL3Vwc2lkZS1zZGsKIyBvcgpwbnBtIGFkZCBAYjNkb3RmdW4vdXBzaWRlLXNkawojIG9yCmJ1biBpbnN0YWxsIEBiM2RvdGZ1bi91cHNpZGUtc2RrCmBgYAoKIyMgTmV4dCBTdGVwcwoKPENhcmRHcm91cCBjb2xzPXsyfT4KICA8Q2FyZCB0aXRsZT0iRnJvbnRlbmQgSW50ZWdyYXRpb24iIGljb249ImJyb3dzZXIiIGhyZWY9Ii91cHNpZGUvZnJvbnRlbmQtaW50ZWdyYXRpb24iPgogICAgU2V0IHVwIHRoZSBQYXJlbnRQcm92aWRlciBhbmQgdXNlIGhvb2tzIHRvIGFjY2VzcyBwbGF5ZXIgZGF0YQogIDwvQ2FyZD4KICA8Q2FyZCB0aXRsZT0iQmFja2VuZCBJbnRlZ3JhdGlvbiIgaWNvbj0ic2VydmVyIiBocmVmPSIvdXBzaWRlL2JhY2tlbmQtaW50ZWdyYXRpb24iPgogICAgSW5pdGlhbGl6ZSB0aGUgQjMgY2xpZW50IGFuZCBpbXBsZW1lbnQgZ2FtZSBsb2dpYwogIDwvQ2FyZD4KICA8Q2FyZCB0aXRsZT0iVGVzdGluZyAmIEV4YW1wbGVzIiBpY29uPSJmbGFzayIgaHJlZj0iL3Vwc2lkZS90ZXN0aW5nLWFuZC1leGFtcGxlcyI+CiAgICBUZXN0IHlvdXIgZ2FtZSBsb2NhbGx5IGFuZCBzZWUgY29tcGxldGUgZXhhbXBsZXMKICA8L0NhcmQ+CjwvQ2FyZEdyb3VwPgoK",
    "lastUpdated": "2025-10-29T22:14:57.831Z"
  },
  {
    "sourceFile": "upside/frontend-integration.mdx",
    "sourceHash": "CiMjIFBhcmVudFByb3ZpZGVyCgpUaGUgYFBhcmVudFByb3ZpZGVyYCBjb21wb25lbnQgY29ubmVjdHMgeW91ciBnYW1lIGZyb250ZW5kIHRvIHRoZSBVcHNpZGUgcGxhdGZvcm0gYW5kIHByb3ZpZGVzIGF1dGhlbnRpY2F0aW9uLgoKYGBgamF2YXNjcmlwdAppbXBvcnQgeyBQYXJlbnRQcm92aWRlciwgdXNlUGFyZW50LCB1c2VCYWxhbmNlLCB1c2VUb2tlbiwgdXNlQXV0aGVudGljYXRlZEZldGNoIH0gZnJvbSAiQGIzZG90ZnVuL3Vwc2lkZS1zZGsiOwoKZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ29pbkZsaXBHYW1lKCkgewogIHJldHVybiAoCiAgICA8UGFyZW50UHJvdmlkZXI+CiAgICAgIDxHYW1lQ29udGVudCAvPgogICAgPC9QYXJlbnRQcm92aWRlcj4KICApOwp9CgpmdW5jdGlvbiBHYW1lQ29udGVudCgpIHsKICBjb25zdCB7IHRva2VuLCBiYWxhbmNlLCBzaG93V2luTW9kYWwsIHNob3dMb3NzTW9kYWwsIHJlZmV0Y2hCYWxhbmNlIH0gPSB1c2VQYXJlbnQoKTsKCiAgLy8gT3IgdXNlIGluZGl2aWR1YWwgaG9va3M6CiAgY29uc3QgYmFsYW5jZSA9IHVzZUJhbGFuY2UoKTsgLy8gbnVtYmVyIHwgbnVsbAogIGNvbnN0IHRva2VuID0gdXNlVG9rZW4oKTsgLy8gc3RyaW5nIHwgbnVsbAogIGNvbnN0IGF1dGhGZXRjaCA9IHVzZUF1dGhlbnRpY2F0ZWRGZXRjaCgpOyAvLyBmZXRjaCB3aXRoIEF1dGhvcml6YXRpb24gaGVhZGVyCgogIHJldHVybiAoCiAgICA8ZGl2PgogICAgICA8aDE+Q29pbiBGbGlwPC9oMT4KICAgICAgPHA+QmFsYW5jZTogeyhiYWxhbmNlIC8gMWUxOCkudG9GaXhlZCgyKX0gV0lOPC9wPgogICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHBsYXlHYW1lKHRva2VuKX0+UGxheTwvYnV0dG9uPgogICAgPC9kaXY+CiAgKTsKfQpgYGAKCiMjIEF2YWlsYWJsZSBIb29rcwoKIyMjIHVzZVBhcmVudCgpCgpBY2Nlc3MgZnVsbCBjb250ZXh0ICh0b2tlbiwgYmFsYW5jZSwgc2hvd1dpbk1vZGFsLCBzaG93TG9zc01vZGFsLCBldGMuKQoKKipSZXR1cm4gVmFsdWVzOioqCgotIGB0b2tlbmAgKHN0cmluZyB8IG51bGwpOiBKV1QgYXV0aGVudGljYXRpb24gdG9rZW4gZm9yIGJhY2tlbmQgY2FsbHMKLSBgYmFsYW5jZWAgKG51bWJlciB8IG51bGwpOiBDdXJyZW50IFdJTiB0b2tlbiBiYWxhbmNlIGluIHdlaQotIGBzaG93V2luTW9kYWwod2luczogc3RyaW5nKWA6IFNob3cgd2luIG1vZGFsCi0gYHNob3dMb3NzTW9kYWwobG9zczogc3RyaW5nKWA6IFNob3cgbG9zcyBtb2RhbAotIGBzaG93VG9hc3Qob3B0aW9ucylgOiBTaG93IHRvYXN0IG5vdGlmaWNhdGlvbgotIGBzaG93Q3VzdG9tTW9kYWwoY29udGVudClgOiBTaG93IGN1c3RvbSBtb2RhbAotIGByZWZldGNoQmFsYW5jZSgpYDogUmVxdWVzdCBiYWxhbmNlIHJlZnJlc2ggZnJvbSBwbGF0Zm9ybQoKIyMjIHVzZUJhbGFuY2UoKQoKR2V0IHBsYXllciBiYWxhbmNlIChudW1iZXIgfCBudWxsKQoKYGBgamF2YXNjcmlwdApjb25zdCBiYWxhbmNlID0gdXNlQmFsYW5jZSgpOwpgYGAKCiMjIyB1c2VUb2tlbigpCgpHZXQgYXV0aGVudGljYXRpb24gdG9rZW4gKHN0cmluZyB8IG51bGwpCgpgYGBqYXZhc2NyaXB0CmNvbnN0IHRva2VuID0gdXNlVG9rZW4oKTsKYGBgCgojIyMgdXNlUmVmZXRjaEJhbGFuY2UoKQoKRnVuY3Rpb24gdG8gcmVxdWVzdCBiYWxhbmNlIHJlZnJlc2gKCmBgYGphdmFzY3JpcHQKY29uc3QgcmVmZXRjaEJhbGFuY2UgPSB1c2VSZWZldGNoQmFsYW5jZSgpOwpgYGAKCiMjIyB1c2VDdXN0b21Nb2RhbCgpCgpGdW5jdGlvbiB0byBzaG93IGN1c3RvbSBtb2RhbHMKCmBgYGphdmFzY3JpcHQKY29uc3Qgc2hvd0N1c3RvbU1vZGFsID0gdXNlQ3VzdG9tTW9kYWwoKTsKYGBgCgojIyMgdXNlQXV0aGVudGljYXRlZEZldGNoKCkKCkZldGNoIGZ1bmN0aW9uIHdpdGggYXV0b21hdGljIEJlYXJlciB0b2tlbiBoZWFkZXIKCmBgYGphdmFzY3JpcHQKY29uc3QgYXV0aEZldGNoID0gdXNlQXV0aGVudGljYXRlZEZldGNoKCk7CmBgYAoKIyMgTWFraW5nIEFQSSBDYWxscwoKVXNlIHRoZSBgdXNlQXV0aGVudGljYXRlZEZldGNoKClgIGhvb2sgdG8gbWFrZSBhdXRoZW50aWNhdGVkIHJlcXVlc3RzOgoKYGBgamF2YXNjcmlwdAppbXBvcnQgeyB1c2VBdXRoZW50aWNhdGVkRmV0Y2gsIHVzZUJhbGFuY2UsIHVzZVRva2VuIH0gZnJvbSAiQGIzZG90ZnVuL3Vwc2lkZS1zZGsiOwoKZnVuY3Rpb24gR2FtZUNvbXBvbmVudCgpIHsKICBjb25zdCBhdXRoRmV0Y2ggPSB1c2VBdXRoZW50aWNhdGVkRmV0Y2goKTsKICBjb25zdCBiYWxhbmNlID0gdXNlQmFsYW5jZSgpOwogIGNvbnN0IHRva2VuID0gdXNlVG9rZW4oKTsKCiAgY29uc3QgcGxheUdhbWUgPSBhc3luYyBwcmVkaWN0aW9uID0+IHsKICAgIC8vIEF1dGhvcml6YXRpb24gaGVhZGVyIGlzIGF1dG9tYXRpY2FsbHkgYWRkZWQKICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXV0aEZldGNoKCIvYXBpL2dhbWUvY29pbi1mbGlwIiwgewogICAgICBtZXRob2Q6ICJQT1NUIiwKICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoewogICAgICAgIHBsYXllcklkOiAicGxheWVyLWlkIiwKICAgICAgICBwcmVkaWN0aW9uLAogICAgICAgIGJldEFtb3VudDogIjEwMDAwMDAwMDAwMDAwMDAwMDAiLCAvLyAxIFdJTiBpbiB3ZWkKICAgICAgfSksCiAgICB9KTsKCiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpOwogICAgcmV0dXJuIGRhdGE7CiAgfTsKCiAgcmV0dXJuICgKICAgIDxkaXY+CiAgICAgIDxwPkJhbGFuY2U6IHsoYmFsYW5jZSAvIDFlMTgpLnRvRml4ZWQoMil9IFdJTjwvcD4KICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBwbGF5R2FtZSgiaGVhZHMiKX0+UHJlZGljdCBIZWFkczwvYnV0dG9uPgogICAgPC9kaXY+CiAgKTsKfQpgYGAKCioqSG93IHVzZUF1dGhlbnRpY2F0ZWRGZXRjaCgpIFdvcmtzOioqCgotIEF1dG9tYXRpY2FsbHkgaW5jbHVkZXMgYEF1dGhvcml6YXRpb246IEJlYXJlciB7dG9rZW59YCBoZWFkZXIKLSBTZXRzIGBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25gIGJ5IGRlZmF1bHQKLSBNZXJnZXMgYWRkaXRpb25hbCBoZWFkZXJzIHlvdSBwcm92aWRlCi0gSGFuZGxlcyB0b2tlbiBmcm9tIGB1c2VUb2tlbigpYCBhdXRvbWF0aWNhbGx5CgojIyBGcm9udGVuZCBFeGFtcGxlCgpgYGBqYXZhc2NyaXB0CmltcG9ydCB7IFBhcmVudFByb3ZpZGVyLCB1c2VQYXJlbnRDb250ZXh0IH0gZnJvbSAiQGIzZG90ZnVuL3Vwc2lkZS1zZGsiOwoKZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ29pbkZsaXBHYW1lKCkgewogIHJldHVybiAoCiAgICA8UGFyZW50UHJvdmlkZXI+CiAgICAgIDxDb2luRmxpcENvbnRlbnQgLz4KICAgIDwvUGFyZW50UHJvdmlkZXI+CiAgKTsKfQoKZnVuY3Rpb24gQ29pbkZsaXBDb250ZW50KCkgewogIGNvbnN0IHsgdG9rZW4sIGJhbGFuY2UsIHBsYXllcklkIH0gPSB1c2VQYXJlbnRDb250ZXh0KCk7CiAgY29uc3QgW2dhbWVTdGF0ZSwgc2V0R2FtZVN0YXRlXSA9IHVzZVN0YXRlKCJyZWFkeSIpOyAvLyByZWFkeSwgcGxheWluZywgd29uLCBsb3N0CiAgY29uc3QgW3ByZWRpY3Rpb24sIHNldFByZWRpY3Rpb25dID0gdXNlU3RhdGUobnVsbCk7CiAgY29uc3QgW3Jlc3VsdCwgc2V0UmVzdWx0XSA9IHVzZVN0YXRlKG51bGwpOwogIGNvbnN0IFtlYXJuaW5ncywgc2V0RWFybmluZ3NdID0gdXNlU3RhdGUoMCk7CgogIGNvbnN0IHBsYXlHYW1lID0gYXN5bmMgcGxheWVyUHJlZGljdGlvbiA9PiB7CiAgICBzZXRQcmVkaWN0aW9uKHBsYXllclByZWRpY3Rpb24pOwogICAgc2V0R2FtZVN0YXRlKCJwbGF5aW5nIik7CgogICAgdHJ5IHsKICAgICAgLy8gQ2FsbCB5b3VyIGJhY2tlbmQKICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgiL2FwaS9nYW1lL2NvaW4tZmxpcCIsIHsKICAgICAgICBtZXRob2Q6ICJQT1NUIiwKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL2pzb24iLAogICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Rva2VufWAsCiAgICAgICAgfSwKICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICBwbGF5ZXJJZCwKICAgICAgICAgIHByZWRpY3Rpb246IHBsYXllclByZWRpY3Rpb24sCiAgICAgICAgICBiZXRBbW91bnQ6ICIxMDAwMDAwMDAwMDAwMDAwMDAiLCAvLyAxIHRva2VuIGluIHdlaQogICAgICAgIH0pLAogICAgICB9KTsKCiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7CgogICAgICBpZiAoZGF0YS5vdXRjb21lID09PSAid2luIikgewogICAgICAgIHNldEdhbWVTdGF0ZSgid29uIik7CiAgICAgICAgc2V0RWFybmluZ3MoZGF0YS5wYXlvdXQpOwogICAgICB9IGVsc2UgewogICAgICAgIHNldEdhbWVTdGF0ZSgibG9zdCIpOwogICAgICAgIHNldEVhcm5pbmdzKDApOwogICAgICB9CgogICAgICBzZXRSZXN1bHQoZGF0YS5yZXN1bHQpOwogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgY29uc29sZS5lcnJvcigiR2FtZSBlcnJvcjoiLCBlcnJvcik7CiAgICAgIHNldEdhbWVTdGF0ZSgiZXJyb3IiKTsKICAgIH0KICB9OwoKICByZXR1cm4gKAogICAgPGRpdiBzdHlsZT17eyB0ZXh0QWxpZ246ICJjZW50ZXIiLCBwYWRkaW5nOiAiNDBweCIgfX0+CiAgICAgIDxoMT5Db2luIEZsaXA8L2gxPgogICAgICA8cD5CYWxhbmNlOiB7KGJhbGFuY2UgLyAxZTE4KS50b0ZpeGVkKDIpfSBXSU48L3A+CgogICAgICB7Z2FtZVN0YXRlID09PSAicmVhZHkiICYmICgKICAgICAgICA8ZGl2PgogICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBwbGF5R2FtZSgiaGVhZHMiKX0+UHJlZGljdCBIZWFkczwvYnV0dG9uPgogICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBwbGF5R2FtZSgidGFpbHMiKX0+UHJlZGljdCBUYWlsczwvYnV0dG9uPgogICAgICAgIDwvZGl2PgogICAgICApfQoKICAgICAge2dhbWVTdGF0ZSA9PT0gInBsYXlpbmciICYmIDxwPkZsaXBwaW5nLi4uPC9wPn0KCiAgICAgIHtnYW1lU3RhdGUgPT09ICJ3b24iICYmICgKICAgICAgICA8ZGl2PgogICAgICAgICAgPHA+8J+OiSBZb3Ugd29uISBDb2luIGxhbmRlZCBvbiB7cmVzdWx0fTwvcD4KICAgICAgICAgIDxwPit7KGVhcm5pbmdzIC8gMWUxOCkudG9GaXhlZCgyKX0gV0lOPC9wPgogICAgICAgIDwvZGl2PgogICAgICApfQoKICAgICAge2dhbWVTdGF0ZSA9PT0gImxvc3QiICYmICgKICAgICAgICA8ZGl2PgogICAgICAgICAgPHA+4p2MIFlvdSBsb3N0ISBDb2luIGxhbmRlZCBvbiB7cmVzdWx0fTwvcD4KICAgICAgICAgIDxwPkJldHRlciBsdWNrIG5leHQgdGltZTwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgKX0KCiAgICAgIHtnYW1lU3RhdGUgIT09ICJyZWFkeSIgJiYgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBzZXRHYW1lU3RhdGUoInJlYWR5Iil9PlBsYXkgQWdhaW48L2J1dHRvbj59CiAgICA8L2Rpdj4KICApOwp9CmBgYAoK",
    "lastUpdated": "2025-10-29T22:15:31.910Z"
  },
  {
    "sourceFile": "upside/backend-integration.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-10-29T22:16:31.841Z"
  },
  {
    "sourceFile": "protocol/whitepaper-mica.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-10-29T22:18:21.682Z"
  },
  {
    "sourceFile": "hypeduel/referral-system.mdx",
    "sourceHash": "CiMjIE92ZXJ2aWV3CgpXaGVuIHlvdSByZWZlciBhIGZyaWVuZCB0byBIeXBlRHVlbCwgeW91J2xsIGVhcm4gKioxJSBvZiB0aGVpciBiZXR0aW5nIHByb2ZpdHMgZm9yIDkwIGRheXMqKi4gVGhlcmUncyBubyBsaW1pdCB0byBob3cgbWFueSBmcmllbmRzIHlvdSBjYW4gcmVmZXIsIG1ha2luZyB0aGlzIGEgcG93ZXJmdWwgd2F5IHRvIGVhcm4gcGFzc2l2ZSBpbmNvbWUuCgojIyMgS2V5IEZlYXR1cmVzCgo8Q2FyZEdyb3VwIGNvbHM9ezN9PgogIDxDYXJkIHRpdGxlPSIxJSBDb21taXNzaW9uIiBpY29uPSJwZXJjZW50Ij4KICAgIEVhcm4gMSUgb2YgYWxsIGJldHRpbmcgcHJvZml0cyBtYWRlIGJ5IHlvdXIgcmVmZXJyZWQgZnJpZW5kcwogIDwvQ2FyZD4KICA8Q2FyZCB0aXRsZT0iOTAgRGF5cyBEdXJhdGlvbiIgaWNvbj0iY2FsZW5kYXIiPgogICAgWW91ciBjb21taXNzaW9uIGxhc3RzIGZvciA5MCBkYXlzIGZyb20gd2hlbiB5b3VyIGZyaWVuZCBzaWducyB1cAogIDwvQ2FyZD4KICA8Q2FyZCB0aXRsZT0iVW5saW1pdGVkIFJlZmVycmFscyIgaWNvbj0iaW5maW5pdHkiPgogICAgTm8gbGltaXQgb24gaG93IG1hbnkgZnJpZW5kcyB5b3UgY2FuIHJlZmVyCiAgPC9DYXJkPgo8L0NhcmRHcm91cD4KCiMjIEhvdyBJdCBXb3JrcwoKPFN0ZXBzPgogIDxTdGVwIHRpdGxlPSJTaGFyZSBZb3VyIExpbmsiPgogICAgU2VuZCB5b3VyIHVuaXF1ZSByZWZlcnJhbCBsaW5rIHRvIGZyaWVuZHMgb3Igc2hhcmUgaXQgb24gc29jaWFsIG1lZGlhIHBsYXRmb3JtcwogIDwvU3RlcD4KICA8U3RlcCB0aXRsZT0iRnJpZW5kIFNpZ25zIFVwIj4KICAgIFlvdXIgZnJpZW5kIGNyZWF0ZXMgYSBIeXBlRHVlbCBhY2NvdW50IHVzaW5nIHlvdXIgcmVmZXJyYWwgbGluawogIDwvU3RlcD4KICA8U3RlcCB0aXRsZT0iU3RhcnQgRWFybmluZyI+CiAgICBFYXJuIDElIG9mIGFsbCB0aGVpciBiZXR0aW5nIHByb2ZpdHMgZm9yIHRoZSBuZXh0IDkwIGRheXMgYXV0b21hdGljYWxseQogIDwvU3RlcD4KPC9TdGVwcz4KCiMjIEdldHRpbmcgWW91ciBSZWZlcnJhbCBMaW5rCgoxLiAqKkxvZyBpbnRvIEh5cGVEdWVsKio6IEFjY2VzcyB5b3VyIGFjY291bnQgb24gdGhlIHBsYXRmb3JtCjIuICoqTmF2aWdhdGUgdG8gUmVmZXJyYWxzKio6IEZpbmQgdGhlIHJlZmVycmFsIHNlY3Rpb24gaW4geW91ciB1c2VyIGRhc2hib2FyZAozLiAqKkNvcHkgWW91ciBMaW5rKio6IFlvdXIgdW5pcXVlIHJlZmVycmFsIGNvZGUgd2lsbCBiZSBnZW5lcmF0ZWQgYXV0b21hdGljYWxseQo0LiAqKlNoYXJlIEF3YXkqKjogU3RhcnQgc2hhcmluZyB5b3VyIGxpbmsgd2l0aCBmcmllbmRzIGFuZCBvbiBzb2NpYWwgbWVkaWEKCiMjIFJlZmVycmFsIFJld2FyZHMKCi0gKipDb21taXNzaW9uIFJhdGUqKjogMSUgb2YgcmVmZXJyZWQgdXNlcidzIGJldHRpbmcgcHJvZml0cwotICoqRHVyYXRpb24qKjogOTAgZGF5cyBmcm9tIHNpZ251cCBkYXRlCi0gKipQYXltZW50Kio6IEF1dG9tYXRpYyBkaXN0cmlidXRpb24gdG8geW91ciBhY2NvdW50Ci0gKipUcmFja2luZyoqOiBSZWFsLXRpbWUgdHJhY2tpbmcgb2YgeW91ciByZWZlcnJhbCBlYXJuaW5ncwoKIyMgQmVzdCBQcmFjdGljZXMKCiMjIyBFZmZlY3RpdmUgU2hhcmluZwotIFNoYXJlIG9uIHNvY2lhbCBtZWRpYSBwbGF0Zm9ybXMgd2hlcmUgeW91ciBmcmllbmRzIGFyZSBhY3RpdmUKLSBFeHBsYWluIHRoZSBiZW5lZml0cyBvZiBIeXBlRHVlbCB0byBlbmNvdXJhZ2Ugc2lnbnVwcwotIEVuZ2FnZSB3aXRoIGdhbWluZyBhbmQgYmV0dGluZyBjb21tdW5pdGllcyAoZm9sbG93aW5nIHBsYXRmb3JtIHJ1bGVzKQoKIyMjIE1heGltaXppbmcgRWFybmluZ3MKLSBSZWZlciBhY3RpdmUgYmV0dG9ycyB3aG8gYXJlIGxpa2VseSB0byBnZW5lcmF0ZSBjb25zaXN0ZW50IHByb2ZpdHMKLSBTaGFyZSBkdXJpbmcgcGVhayBnYW1pbmcgc2Vhc29ucyBvciBtYWpvciBlc3BvcnRzIGV2ZW50cwotIEJ1aWxkIGEgbmV0d29yayBvZiByZWZlcnJlZCB1c2VycyBmb3Igc3VzdGFpbmFibGUgcGFzc2l2ZSBpbmNvbWUKCiMjIFRlcm1zICYgQ29uZGl0aW9ucwoKLSBSZWZlcnJhbCBjb21taXNzaW9ucyBhcmUgcGFpZCBhdXRvbWF0aWNhbGx5Ci0gU2VsZi1yZWZlcnJhbCBhbmQgZnJhdWR1bGVudCBhY3Rpdml0eSBpcyBwcm9oaWJpdGVkCi0gQ29tbWlzc2lvbiBhcHBsaWVzIG9ubHkgdG8gbmV0IGJldHRpbmcgcHJvZml0cywgbm90IHRvdGFsIHZvbHVtZQotIEh5cGVEdWVsIHJlc2VydmVzIHRoZSByaWdodCB0byBtb2RpZnkgcmVmZXJyYWwgdGVybXMgd2l0aCBub3RpY2UK",
    "lastUpdated": "2025-10-29T22:18:48.362Z"
  },
  {
    "sourceFile": "anyspend/tokenomics.mdx",
    "sourceHash": "CjxpZnJhbWUKICBjbGFzc05hbWU9ImFzcGVjdC12aWRlbyB3LWZ1bGwgcm91bmRlZC14bCIKICAgIHNyYz0iaHR0cHM6Ly9jdXN0b21lci1nZzZxczdubTV1ZTk0dDY0LmNsb3VkZmxhcmVzdHJlYW0uY29tLzQwMTM5MmE0ZWVjYzA4NWY5MDMyYjY4MTM5ZDM3ZTA3L2lmcmFtZT9tdXRlZD10cnVlJmxvb3A9dHJ1ZSZhdXRvcGxheT10cnVlJnBvc3Rlcj1odHRwcyUzQSUyRiUyRmN1c3RvbWVyLWdnNnFzN25tNXVlOTR0NjQuY2xvdWRmbGFyZXN0cmVhbS5jb20lMkY0MDEzOTJhNGVlY2MwODVmOTAzMmI2ODEzOWQzN2UwNyUyRnRodW1ibmFpbHMlMkZ0aHVtYm5haWwuanBnJTNGdGltZSUzRCUyNmhlaWdodCUzRDYwMCIKICB0aXRsZT0iQU5ZIFRva2Vub21pY3MiCiAgZnJhbWVCb3JkZXI9IjAiCiAgYWxsb3c9ImFjY2VsZXJvbWV0ZXI7IGF1dG9wbGF5OyBjbGlwYm9hcmQtd3JpdGU7IGVuY3J5cHRlZC1tZWRpYTsgZ3lyb3Njb3BlOyBwaWN0dXJlLWluLXBpY3R1cmUiCiAgYWxsb3dGdWxsU2NyZWVuCi8+CgoKIyMjIFdoYXQgaXMgdGhlICRBTlkgdG9rZW4/CgoqKiRBTlkqKiBpcyB0aGUgbmF0aXZlIHRva2VuIG9mIEFueVNwZW5kIGFuZCByZXByZXNlbnRzIGFsaWdubWVudCBiZXR3ZWVuIHVzZXJzLCBwYXJ0bmVycywgYW5kIHRoZSBwcm90b2NvbC4gSXRzIGRlc2lnbiBmb2xsb3dzIHR3byBndWlkaW5nIHByaW5jaXBsZXM6CgoqKkNvbW11bml0eSBGaXJzdCoqOiA5MCUgb2Ygc3VwcGx5IGdvZXMgdG8gdGhlIGNvbW11bml0eSAoYWlyZHJvcHMsIHJld2FyZHMsIGludGVncmF0aW9ucykuIFRoZSBBbnlTcGVuZCBGb3VuZGF0aW9uIHJlY2VpdmVzIDEwJSBmb3IgdHJhbnNwYXJlbnQgb3BlcmF0aW9uYWwgbmVlZHMuIFRoZXJlIGFyZSBubyBhbGxvY2F0aW9ucyBmb3IgInRlYW0iIG9yICJpbnZlc3RvcnMuIgoKKipSZXZlbnVlIEFsaWduZWQqKjogOTUlIG9mIHByb3RvY29sIHJldmVudWUg4oCUIGZyb20gc3dhcHMsIG9ucmFtcHMsIHRyYWRlcyBmbG93cyBpbnRvICRBTlkgYnV5YmFja3MgYW5kIGJ1cm5zLiBIb2xkZXJzIGNhcHR1cmUgbmVhcmx5IGFsbCB2YWx1ZSBnZW5lcmF0ZWQgYnkgdGhlIG5ldHdvcmsuCgojIyMgV2hhdCBpcyB0aGUgdG90YWwgc3VwcGx5IG9mICRBTlk/CgpgYGB0ZXh0IFRvdGFsIFN1cHBseQoxLDAwMCwwMDAsMDAwCmBgYAoKIyMjIFdoYXQgaXMgdGhlIGNvbnRyYWN0IGFkZHJlc3Mgb2YgJEFOWT8KCmBgYHRleHQgQ29udHJhY3QgQWRkcmVzcwoweEMxN2RkYTI0OEUyRDUwZkMwMDZkOGZFYmI1QTQwNmRkMzE5NzI3MTIKYGBgCgojIyBUb2tlbiBEaXN0cmlidXRpb24KCiMjIyBIb3cgbXVjaCBvZiAkQU5ZIGlzIGFsbG9jYXRlZCB0byBpbnZlc3RvcnMsIHRlYW0sIGZvdW5kYXRpb24sIHVzZXJzPwoKJEFOWSBpcyBjb21tdW5pdHkgZHJpdmVuLiBObyBhbGxvY2F0aW9uIGhhcyBiZWVuIGdpdmVuIHRvIHRoZSB0ZWFtIG9yIGludmVzdG9ycy4KCjkwJSBpcyByZXNlcnZlZCB0byBiZSBwdXQgaW50byB0aGUgaGFuZHMgb2YgdGhlIGNvbW11bml0eSBhbmQgdXNlcnMuIFRoZSBmb3VuZGF0aW9uIGdldHMgdGhlIHJlbWFpbmluZyAxMCUgd2hpY2ggaXMgdXNlZCB0b3dhcmQgbGlxdWlkaXR5IHN1cHBvcnQsIHNlY3VyaXR5ICYgYXVkaXRzLCBlY29zeXN0ZW0gZ3JhbnRzIGFuZCBidXliYWNrcy4KCiMjIFRva2VuIFV0aWxpdHkKCiMjIyBXaGF0IGJlbmVmaXRzL3V0aWxpdHkgZG9lcyB0aGUgJEFOWSB0b2tlbiBoYXZlPwoKLSAqKkRpc2NvdW50IG9uIEFueXNwZW5kIGZlZXMqKiBmb3IgJEFOWSBob2xkZXJzCi0gKipTdGFrZSAkQU5ZKiogdG8gZWFybiByZWJhdGVzIGZyb20gcGxhdGZvcm0gcmV2ZW51ZQotICoqR292ZXJuYW5jZSoqIG92ZXIgbGlzdGluZ3MsIGZlZSBzY2hlZHVsZXMsIGFuZCBpbnRlZ3JhdGlvbnMKCiMjIyBXaGF0IGFyZSB0aGUgQW55c3BlbmQgZmVlIGRpc2NvdW50cyBmb3IgaG9sZGVycyBvZiAkQU5ZPwoKLSAqKlBhcnRuZXIgV2hhbGUgKDEwMEsgJEFOWSkqKjogNTAlIGRpc2NvdW50Ci0gKipFbnRlcnByaXNlIFdoYWxlICg1MDBLICRBTlkpKio6IDc1JSBkaXNjb3VudAotICoqU3RyYXRlZ2ljIFBhcnRuZXIgKDFNKyAkQU5ZKSoqOiAxMDAlIHJlYmF0ZSAoaW4gJEFOWSkKCiMjIEZ1dHVyZSBEZXZlbG9wbWVudAoKIyMjIFdoYXQncyBBbnlTcGVuZCBWMj8KCkFueVNwZW5kIGlzIGV2b2x2aW5nIGludG8gc29tZXRoaW5nIG11Y2ggbGFyZ2VyOiBhIERlRmkgYXV0b21hdGlvbiBlbmdpbmUuIFRoZSBmdXR1cmUgb2YgZmluYW5jZSBpcyBub3QganVzdCBidXlpbmcgYW5kIHN3YXBwaW5nIHRva2VucywgaXQncyBwcm9ncmFtbWFibGUgbW9uZXkgZmxvd3MsIGF1dG9tYXRlZCBzdHJhdGVnaWVzLCBhbmQgY29tbXVuaXR5LW93bmVkIGluZnJhc3RydWN0dXJlLiBWMiBvZiBBbnlTcGVuZCB3aWxsIGJyaW5nIHRoaXMgdmlzaW9uIHRvIGxpZmUuCg==",
    "lastUpdated": "2025-10-29T22:19:12.115Z"
  },
  {
    "sourceFile": "anyspend/airdrop.mdx",
    "sourceHash": "CiMjIFMxIEFpcmRyb3AKCiMjIyBIb3cgZG8gSSBxdWFsaWZ5IGZvciB0aGUgUzEgYWlyZHJvcD8KCkRheSAxIHVzZXJzIG9mIEFueXNwZW5kIHdobyB1c2VkIHRoZSBwcm9kdWN0IGFjcm9zcyBhbnkgQjMgTGFicyBvbnJhbXAgZXhwZXJpZW5jZSBvciBvbiBhbnlzcGVuZC5jb20gcXVhbGlmaWVkIGZvciB0aGUgYWlyZHJvcC4gU25hcHNob3Qgd2FzIHRha2VuIHRoZSB3ZWVrIG9mIE9jdCA2IDIwMjUuCgojIyMgV2hlbiB3YXMgUzEgYWlyZHJvcCBxdWFsaWZpY2F0aW9uIHBlcmlvZD8KCkFueXNwZW5kIHNvZnQgbGF1bmNoIChBdWd1c3QgMjAyNSkgLSBPY3RvYmVyIDZ0aCAyMDI1CgojIyBTMiBBaXJkcm9wCgojIyMgV2hlbiB3aWxsIFMyIGVuZD8KClMyIHdpbGwgZW5kIGluIDkwIGRheXMgZnJvbSBzdGFydCBkYXRlIG9mIDEwLzEwLzI1CgojIyMgSG93IGRvIEkgZWFybiBwb2ludHMgZm9yIFMyIG9mICRBTlkgYWlyZHJvcD8KCi0gT25yYW1wIG9yIHN3YXAgdG9rZW5zIG9uIGFueXNwZW5kLmNvbQotIFVzZSBBbnlzcGVuZCB0byBvbnJhbXAgb3Igc3dhcCB0byAkQjMgb24gaHlwZWR1ZWwuY29tIG9yIHN0YWtlLmIzLmZ1bgotIFN3YXAgYW55IHRva2VuIGludG8gYW55IGFyZW5hY29pbiBvbiBoeXBlZHVlbC5jb20K",
    "lastUpdated": "2025-10-29T22:19:20.263Z"
  },
  {
    "sourceFile": "learn/troubleshooting/general-faq.mdx",
    "sourceHash": "CiMjIEZyZXF1ZW50bHkgQXNrZWQgUXVlc3Rpb25zCgo8QWNjb3JkaW9uIHRpdGxlPSJJcyB0aGVyZSBhIEIzIEJyYW5kIEtpdCB0aGF0IEkgY2FuIHVzZSBmb3IgY29udGVudCBjcmVhdGlvbj8iPgogIFllcy4gWW91IGNhbiBhY2Nlc3MgdGhlIEIzIEJyYW5kIEtpdCBieSB2aXNpdGluZyBodHRwczovL2RvY3MuYjMuZnVuL3Byb3RvY29sL2JyYW5kLWtpdC4gCjwvQWNjb3JkaW9uPg==",
    "lastUpdated": "2025-10-29T22:19:27.524Z"
  },
  {
    "sourceFile": "learn/staking-rewards/how-horse-plinko-works.mdx",
    "sourceHash": "CiMjIyBIb3cgdG8gUGxheSBIb3JzZSBQbGlua28KCjxTdGVwcz4KICA8U3RlcCB0aXRsZT0iU2VsZWN0IEhvcnNlIFBsaW5rbyI+CiAgICBHbyB0byB0aGUgU3Rha2luZyBEYXNoYm9hcmQgYW5kIGNob29zZSAqKkhvcnNlIFBsaW5rbyoqIGZyb20gdGhlIGF2YWlsYWJsZSBnYW1lcy4KCiAgICAhW1NjcmVlbnNob3QyMDI1IDA5IDI1YXQ0IDA2IDUxUE0gUG5dKC9kb2NzL2ltYWdlcy9TY3JlZW5zaG90MjAyNS0wOS0yNWF0NC4wNi41MVBNLnBuZykKICA8L1N0ZXA+CiAgPFN0ZXAgdGl0bGU9IlJlbGVhc2UgWW91ciBIb3JzZSI+CiAgICBDbGljayAqKlJlbGVhc2UgSG9yc2UqKiB0byBzdGFydCB5b3VyIHBsYXkuCgogICAgIVtTY3JlZW5zaG90MjAyNSAwOSAyNWF0NCAwNCAxM1BNIFBuXSgvZG9jcy9pbWFnZXMvU2NyZWVuc2hvdDIwMjUtMDktMjVhdDQuMDQuMTNQTS5wbmcpCiAgPC9TdGVwPgogIDxTdGVwIHRpdGxlPSJTaWduIHRoZSBUcmFuc2FjdGlvbiI+CiAgICBDb25maXJtIHRoZSBhY3Rpb24gYnkgc2lnbmluZyB0aGUgdHJhbnNhY3Rpb24gaW4geW91ciBjb25uZWN0ZWQgd2FsbGV0LgogIDwvU3RlcD4KICA8U3RlcCB0aXRsZT0iUmVjZWl2ZSBZb3VyIFJld2FyZCI+CiAgICBPbmNlIHRoZSB0cmFuc2FjdGlvbiBpcyBjb25maXJtZWQgYW5kIHRoZSBhbmltYXRpb24gY29tcGxldGVzLCB5b3VyIHJld2FyZCB3aWxsIGJlIGRpc3RyaWJ1dGVkIGF1dG9tYXRpY2FsbHkuCiAgPC9TdGVwPgo8L1N0ZXBzPg==",
    "lastUpdated": "2025-10-29T22:19:41.039Z"
  },
  {
    "sourceFile": "learn/staking-rewards/claim-staking-rewards.mdx",
    "sourceHash": "CiMjIEhvdyBTdGFraW5nIFJld2FyZHMgYXJlIERpc3RyaWJ1dGVkCgpXaGVuIHlvdSBzdGFrZSBcJEIzLCB5b3UgZWFybiBhcHByb3hpbWF0ZWx5IDEwJSBhbm51YWwgcmV3YXJkcywgd2hpY2ggYWNjdW11bGF0ZSBvdmVyIHRpbWUuIFJld2FyZHMgYXJlIG5vdCBkaXN0cmlidXRlZCBvbiBhIGZpeGVkIHNjaGVkdWxlLiBJbnN0ZWFkLCB0aGV5IGFyZSBhdXRvbWF0aWNhbGx5IGNsYWltZWQgd2hlbiB5b3UgdW5zdGFrZS4gVGhlIGFtb3VudCB5b3UgcmVjZWl2ZSBkZXBlbmRzIG9uIGhvdyBtdWNoIHlvdSB3aXRoZHJhdy4KCkZvciBleGFtcGxlOgoKSWYgeW91IHdpdGhkcmF3IDUwJSBvZiB5b3VyIHN0YWtlZCBcJEIzLCB5b3XigJlsbCByZWNlaXZlIDUwJSBvZiB5b3VyIGFjY3VtdWxhdGVkIHJld2FyZHMgYXQgdGhhdCB0aW1lLiBUaGUgcmVtYWluaW5nIHJld2FyZHMgc3RheSBsaW5rZWQgdG8gdGhlIFwkQjMgeW91IGNvbnRpbnVlIHRvIHN0YWtlLgoKVGhpcyBzeXN0ZW0gZW5zdXJlcyB0aGF0IHJld2FyZHMgYXJlIGRpc3RyaWJ1dGVkIGZhaXJseSBiYXNlZCBvbiBob3cgbG9uZyBhbmQgaG93IG11Y2ggeW91IHN0YWtlLgoKIyMgVmlldyBZb3VyIERpc3RyaWJ1dGVkIFN0YWtpbmcgUmV3YXJkcwoKWW91ciBzdGFraW5nIHJld2FyZHMgYXJlIGNsYWltZWQgYXV0b21hdGljYWxseSB3aGVuIHlvdSB1bnN0YWtlIHlvdXIgXCRCMy4gSGVyZSdzIGhvdyB0byB2aWV3IHlvdXIgcmV3YXJkczoKCjxTdGVwcz4KICA8U3RlcCB0aXRsZT0iTmF2aWdhdGUgdG8gc3Rha2luZyBkYXNoYm9hcmQiPgogICAgR28gdG8gW3N0YWtlLmIzLmZ1bl0oaHR0cHM6Ly9zdGFrZS5iMy5mdW4vKSBhbmQgbG9nIGluIHVzaW5nIHlvdXIgcHJlZmVycmVkIGxvZ2luIG1ldGhvZC4KICA8L1N0ZXA+CiAgPFN0ZXAgdGl0bGU9IlZpZXcgcmV3YXJkcyI+CiAgICBWaWV3IHlvdXIgZGlzdHJpYnV0ZWQgc3Rha2luZyByZXdhcmRzIGJ5IGNsaWNraW5nICoqVmlldyByZXdhcmRzKiogZnJvbSB0aGUgZGFzaGJvYXJkIG1haW4gcGFnZS4gRW5zdXJlIHRvIHNlbGVjdCB0aGUgKipTdGFraW5nIFJld2FyZHMqKiB0YWIuCgogICAgIVtTY3JlZW5zaG90MjAyNSAwOCAwOGF0MiA1NSAyN1BNIFBuXSgvZG9jcy9pbWFnZXMvU2NyZWVuc2hvdDIwMjUtMDgtMDhhdDIuNTUuMjdQTS5wbmcpCiAgPC9TdGVwPgo8L1N0ZXBzPg==",
    "lastUpdated": "2025-10-29T22:19:55.672Z"
  },
  {
    "sourceFile": "learn/restricted-account/appeal.mdx",
    "sourceHash": "CiMjIyBIb3cgdG8gU3VibWl0IGFuIEFwcGVhbAoKPFN0ZXBzPgogIDxTdGVwIHRpdGxlPSJPcGVuIFN1cHBvcnQgQ2hhdCI+CiAgICBPbiB0aGUgW2RvY3MuYjMuZnVuXShodHRwOi8vZG9jcy5iMy5mdW4pIHdlYnNpdGUsIGNsaWNrIHRoZSBjaGF0IGJ1YmJsZSBpbiB0aGUgYm90dG9tLXJpZ2h0IGNvcm5lciB0byBzdGFydCBhIGNvbnZlcnNhdGlvbiB3aXRoIFN1cHBvcnQuCiAgPC9TdGVwPgogIDxTdGVwIHRpdGxlPSJQcm92aWRlIFlvdXIgRGV0YWlscyI+CiAgICBJbiB5b3VyIG1lc3NhZ2UsIGluY2x1ZGUgeW91ciB3YWxsZXQgYWRkcmVzcyBhbmQgYSBzaG9ydCBub3RlIGV4cGxhaW5pbmcgdGhhdCB5b3VyIGFjY291bnQgaXMgcmVzdHJpY3RlZC4KICA8L1N0ZXA+CiAgPFN0ZXAgdGl0bGU9IldhaXQgZm9yIFJldmlldyI+CiAgICBPbmNlIHN1Ym1pdHRlZCwgb3VyIFN1cHBvcnQgdGVhbSB3aWxsIHJldmlldyB5b3VyIGFjY291bnQgYW5kIGZvbGxvdyB1cCB3aXRoIHlvdSBhcyBzb29uIGFzIHBvc3NpYmxlLgogIDwvU3RlcD4KPC9TdGVwcz4=",
    "lastUpdated": "2025-10-29T22:20:06.322Z"
  },
  {
    "sourceFile": "learn/quests/introduction.mdx",
    "sourceHash": "CiMjIyAqKkhvdyBQb2ludHMgV29yayoqCgpFYWNoIHF1ZXN0IGNhbiBnaXZlIHVwIHRvICoqMTAwIHBvaW50cyB0b3RhbCoqLCBicm9rZW4gZG93biBpbnRvOgoKLSAqKlF1ZXN0IENvbXBsZXRpb24qKgogIC0gXCs0MCBwb2ludHMgZm9yIGZpbmlzaGluZyB0aGUgdGFzawotICoqVmlyYWxpdHkgQm9udXMqKgogIC0gMOKAkzQwIHBvaW50cyBiYXNlZCBvbiBlbmdhZ2VtZW50IChsaWtlcywgdmlld3MsIHJldHdlZXRzLCBldGMuKQotICoqRWFybHkgQmlyZCBCb251cyoqCiAgLSBcKzIwIHBvaW50cyBmb3IgdGhlIGZhc3Rlc3QgMTAlIG9mIHBhcnRpY2lwYW50cwoKKipWaXJhbGl0eSB0aXA6KiogUG9pbnRzIGFyZSBjYWxjdWxhdGVkIHdoZW4geW91IGNsaWNrICoqVmVyaWZ5KiouIFdhaXRpbmcgYSBiaXQgZm9yIHlvdXIgcG9zdCB0byBjb2xsZWN0IGxpa2VzIG9yIHZpZXdzIGJlZm9yZSB2ZXJpZnlpbmcgbWF5IGdpdmUgeW91IG1vcmUgcG9pbnRzLgoKIyMjIFJld2FyZHMgJiBMZWFkZXJib2FyZHMKCi0gKipQcm9kdWN0LUxldmVsIFF1ZXN0cyAoNDAlKSoqIC0gU3BlY2lmaWMgQjMgcHJvZHVjdHMgKEFueVNwZW5kLCBCU01OVCwgU3Bhd24sIEh5cGVEdWVsKQotICoqQ2hhaW4tTGV2ZWwgUXVlc3RzICg0MCUpKiogLSBSZXdhcmRzIGFjcm9zcyBjaGFpbnMgKEIzLCBSZWFjaCwgWFJQLCBldGMuKQotICoqR2xvYmFsIExlYWRlcmJvYXJkICgyMCUpKiogLSBUb3AgcGVyZm9ybWVycyBhY3Jvc3MgdGhlIGVudGlyZSBlY29zeXN0ZW0KClJld2FyZHMgYXJlIHBhaWQgd2Vla2x5IHRvIHlvdXIgY29ubmVjdGVkIHdhbGxldC4KCiMjIyBUcmFjayBZb3VyIFByb2dyZXNzCgpZb3UgY2FuIHZpZXcgYm90aCB5b3VyICoqcXVlc3QgaGlzdG9yeSoqIGFuZCB5b3VyICoqcmV3YXJkcyBoaXN0b3J5KiogZGlyZWN0bHkgZnJvbSB0aGUgUXVlc3Qgc2l0ZS4KCiFbU2NyZWVuc2hvdDIwMjUgMDkgMjJhdDUgNDUgMjlQTSBQbl0oL2RvY3MvaW1hZ2VzL1NjcmVlbnNob3QyMDI1LTA5LTIyYXQ1LjQ1LjI5UE0ucG5nKQoKLSAqKllvdXIgSGlzdG9yeSoqIC0gU2hvd3MgY29tcGxldGVkIHF1ZXN0cywgdG90YWwgcmV3YXJkcywgYW5kIHBhc3QgcmV3YXJkIGRpc3RyaWJ1dGlvbnMgdGllZCB0byB5b3VyIGFjY291bnQuCi0gKipSZXdhcmRzIEhpc3RvcnkqKiAtIERpc3BsYXlzIHJld2FyZCBwYXlvdXRzIGZyb20gYWxsIGxlYWRlcmJvYXJkcyAoUHJvZHVjdC1MZXZlbCwgQ2hhaW4tTGV2ZWwsIGFuZCBHbG9iYWwpLiBZb3XigJlsbCBzZWUgdGhlIGRpc3RyaWJ1dGlvbiBkYXRlLCBhbW91bnQgb2YgdG9rZW5zIHJlY2VpdmVkLCBhbmQgY2FuIGNsaWNrICoqVmlldyBEZXRhaWxzKiogZm9yIG1vcmUgaW5mby4KCiMjIyBGQVEKCjxBY2NvcmRpb24gdGl0bGU9IkRvIEkgZ2V0IHBvaW50cyBmb3IgZXZlcnkgbGlrZS92aWV3L3JldHdlZXQ/Ij4KICBOb3QgMS10by0xLiBFbmdhZ2VtZW50IGlzIHVzZWQgdG8gY2FsY3VsYXRlIHlvdXIgcGVyY2VudGlsZSBjb21wYXJlZCB0byBvdGhlciB1c2Vycy4gSGlnaGVyIGVuZ2FnZW1lbnQgPSBtb3JlIHZpcmFsaXR5IHBvaW50cy4KPC9BY2NvcmRpb24+Cgo8QWNjb3JkaW9uIHRpdGxlPSJXaHkgZGlkbuKAmXQgSSBnZXQgdmlyYWxpdHkgcG9pbnRzPyI+CiAgTW9zdCBsaWtlbHksIHlvdXIgcG9zdCBoYWQgbG93IGVuZ2FnZW1lbnQgYXQgdGhlIHRpbWUgeW91IGNsaWNrZWQgKipWZXJpZnkqKi4gUmVtZW1iZXIsIHZpcmFsaXR5IGlzIGNoZWNrZWQgYXQgdmVyaWZpY2F0aW9uIHRpbWUgb25seS4KPC9BY2NvcmRpb24+Cgo8QWNjb3JkaW9uIHRpdGxlPSJDYW4gSSByZWRvIGEgcXVlc3Q/Ij4KICBObywgZWFjaCBxdWVzdCBjYW4gb25seSBiZSBjb21wbGV0ZWQgb25jZSBwZXIgYWNjb3VudC4KPC9BY2NvcmRpb24+Cgo8QWNjb3JkaW9uIHRpdGxlPSJXaHkgZGlkbuKAmXQgSSBnZXQgYm9udXMgcG9pbnRzPyI+CiAgQm9udXMgcG9pbnRzIGRlcGVuZCBvbiBob3cgZWFybHkgeW91IGNvbXBsZXRlIHRoZSBxdWVzdCBjb21wYXJlZCB0byBvdGhlcnMuIE9ubHkgdGhlIGZhc3Rlc3QgdXNlcnMgKHRvcCAxMCUpIHJlY2VpdmUgdGhlIEVhcmx5IEJpcmQgYm9udXMuIElmIHlvdSBmaW5pc2hlZCBsYXRlciwgeW914oCZbGwgc3RpbGwgZ2V0IGNvbXBsZXRpb24gcG9pbnRzIGJ1dCBub3QgdGhlIGJvbnVzLgo8L0FjY29yZGlvbj4KCjxBY2NvcmRpb24gdGl0bGU9IldoZW4gZG8gcmV3YXJkcyBzaG93IHVwPyI+CiAgUmV3YXJkcyBhcmUgdGFsbGllZCBhdXRvbWF0aWNhbGx5IGFuZCBkaXN0cmlidXRlZCB3ZWVrbHkgdG8geW91ciBjb25uZWN0ZWQgd2FsbGV0Lgo8L0FjY29yZGlvbj4KCjxBY2NvcmRpb24gdGl0bGU9IkRvIEkgbmVlZCBib3RoIFggYW5kIEZhcmNhc3RlciBsaW5rZWQ/Ij4KICBOb3QgcmVxdWlyZWQsIGJ1dCBsaW5raW5nIGJvdGggbWF4aW1pemVzIHlvdXIgY2hhbmNlcyB0byBlYXJuIHBvaW50cyBzaW5jZSB5b3XigJlsbCBoYXZlIG1vcmUgcXVlc3RzIGF2YWlsYWJsZS4KPC9BY2NvcmRpb24+",
    "lastUpdated": "2025-10-29T22:20:36.635Z"
  },
  {
    "sourceFile": "learn/getting-started/how-to-manage-linked-accounts-global-account.mdx",
    "sourceHash": "CiMjIyBMaW5raW5nIGFuIEFkZGl0aW9uYWwgQWNjb3VudAoKPFN0ZXBzPgogIDxTdGVwIHRpdGxlPSJTaWduIEluIj4KICAgIExvZyBpbiB3aXRoIHRoZSBhY2NvdW50IHlvdSB3YW50IHRvIGxpbmsgbmV3IGFjY291bnRzIHRvLgogIDwvU3RlcD4KICA8U3RlcCB0aXRsZT0iT3BlbiBTZXR0aW5ncyI+CiAgICBDbGljayB5b3VyIHByb2ZpbGUgaWNvbiBpbiB0aGUgdG9wLXJpZ2h0IGNvcm5lciwgdGhlbiBzZWxlY3QgKipTZXR0aW5ncyoqLgoKICAgIDxpbWcKICAgICAgc3JjPSIvZG9jcy9pbWFnZXMvU2NyZWVuc2hvdDIwMjUtMDktMjRhdDYuNDQuMTNQTS5wbmciCiAgICAgIGFsdD0iU2NyZWVuc2hvdDIwMjUgMDkgMjRhdDYgNDQgMTNQTSBQbiIKICAgICAgdGl0bGU9IlNjcmVlbnNob3QyMDI1IDA5IDI0YXQ2IDQ0IDEzUE0gUG4iCiAgICAgIGNsYXNzTmFtZT0ibXgtYXV0byIKICAgICAgc3R5bGU9e3sgd2lkdGg6IjU0JSIgfX0KICAgIC8+CiAgPC9TdGVwPgogIDxTdGVwIHRpdGxlPSJMaW5rIGEgTmV3IEFjY291bnQiPgogICAgQ2xpY2sgKipMaW5rIE5ldyBBY2NvdW50KiouCgogICAgPGltZwogICAgICBzcmM9Ii9kb2NzL2ltYWdlcy9TY3JlZW5zaG90MjAyNS0wOS0yNGF0Ni40Ny41NlBNLnBuZyIKICAgICAgYWx0PSJTY3JlZW5zaG90MjAyNSAwOSAyNGF0NiA0NyA1NlBNIFBuIgogICAgICB0aXRsZT0iU2NyZWVuc2hvdDIwMjUgMDkgMjRhdDYgNDcgNTZQTSBQbiIKICAgICAgY2xhc3NOYW1lPSJteC1hdXRvIgogICAgICBzdHlsZT17eyB3aWR0aDoiNjYlIiB9fQogICAgLz4KICA8L1N0ZXA+CiAgPFN0ZXAgdGl0bGU9IlNlbGVjdCBBY2NvdW50IFR5cGUiPgogICAgQ2hvb3NlIHdoZXRoZXIgdG8gbGluayBhIHdhbGxldCwgZW1haWwsIHBob25lLCBvciBzb2NpYWwgYWNjb3VudC4KCiAgICA8aW1nCiAgICAgIHNyYz0iL2RvY3MvaW1hZ2VzL1NjcmVlbnNob3QyMDI1LTA5LTI0YXQ0LjU4LjM2UE0ucG5nIgogICAgICBhbHQ9IlNjcmVlbnNob3QyMDI1IDA5IDI0YXQ0IDU4IDM2UE0gUG4iCiAgICAgIHRpdGxlPSJTY3JlZW5zaG90MjAyNSAwOSAyNGF0NCA1OCAzNlBNIFBuIgogICAgICBjbGFzc05hbWU9Im14LWF1dG8iCiAgICAgIHN0eWxlPXt7IHdpZHRoOiIzOCUiIH19CiAgICAvPgogIDwvU3RlcD4KICA8U3RlcCB0aXRsZT0iQXV0aG9yaXplIENvbm5lY3Rpb24iPgogICAgRm9sbG93IHRoZSBzdGVwcyB0byBhcHByb3ZlIHRoZSBjb25uZWN0aW9uICh3YWxsZXQgYXBwcm92YWwsIGVtYWlsIHZlcmlmaWNhdGlvbiwgU01TIGNvZGUsIG9yIHNvY2lhbCBzaWduLWluKS4KCiAgICA8aW1nCiAgICAgIHNyYz0iL2RvY3MvaW1hZ2VzL1NjcmVlbnNob3QyMDI1LTA5LTI0YXQ0LjU5LjI5UE0ucG5nIgogICAgICBhbHQ9IlNjcmVlbnNob3QyMDI1IDA5IDI0YXQ0IDU5IDI5UE0gUG4iCiAgICAgIHRpdGxlPSJTY3JlZW5zaG90MjAyNSAwOSAyNGF0NCA1OSAyOVBNIFBuIgogICAgICBjbGFzc05hbWU9Im14LWF1dG8iCiAgICAgIHN0eWxlPXt7IHdpZHRoOiI0NCUiIH19CiAgICAvPgogIDwvU3RlcD4KPC9TdGVwcz4KCllvdXIgYWRkaXRpb25hbCBhY2NvdW50IHdpbGwgbm93IGJlIGxpbmtlZC4KCiMjIyBEaXNjb25uZWN0aW5nIGFuIEFjY291bnQKCllvdSBtYXkgd2FudCB0byBkaXNjb25uZWN0IGFuIGFjY291bnQgaWYgeW91IG5vIGxvbmdlciB1c2UgaXQsIHdhbnQgdG8gcmVwbGFjZSBpdCB3aXRoIGFub3RoZXIsIG9yIHNpbXBseSBwcmVmZXIgdG8ga2VlcCB5b3VyIEIzIEdsb2JhbCBBY2NvdW50IGxpbmtlZCB0byBmZXdlciBsb2dpbnMuCgo8U3RlcHM+CiAgPFN0ZXAgdGl0bGU9Ik9wZW4gU2V0dGluZ3MiPgogICAgQ2xpY2sgeW91ciBwcm9maWxlIGljb24gaW4gdGhlIHRvcC1yaWdodCBjb3JuZXIsIHRoZW4gc2VsZWN0ICoqU2V0dGluZ3MqKi4KICA8L1N0ZXA+CiAgPFN0ZXAgdGl0bGU9IkZpbmQgQ29ubmVjdGVkIEFjY291bnRzIj4KICAgIEluIHRoZSBTZXR0aW5ncyBzZWN0aW9uLCBsb2NhdGUgeW91ciBsaXN0IG9mIGNvbm5lY3RlZCBhY2NvdW50cy4KICA8L1N0ZXA+CiAgPFN0ZXAgdGl0bGU9IkRpc2Nvbm5lY3QgdGhlIEFjY291bnQiPgogICAgQ2xpY2sgdGhlICoqY2hhaW4gbGluayBpY29uKiogbmV4dCB0byB0aGUgYWNjb3VudCB5b3Ugd2FudCB0byBkaXNjb25uZWN0LgogIDwvU3RlcD4KPC9TdGVwcz4KClRoZSBhY2NvdW50IHdpbGwgYmUgcmVtb3ZlZCBpbW1lZGlhdGVseS4KCjxOb3RlPgogIERpc2Nvbm5lY3RpbmcgYW4gYWNjb3VudCB3aWxsIG5vdCBkZWxldGUgeW91ciBCMyBHbG9iYWwgQWNjb3VudC4gWW914oCZbGwgc3RpbGwgYmUgYWJsZSB0byBsb2cgaW4gdXNpbmcgYW55IG90aGVyIGNvbm5lY3RlZCBhY2NvdW50cy4KPC9Ob3RlPgoKCiMjIyBGQVEKCjxBY2NvcmRpb24gdGl0bGU9IldoeSBjYW4ndCBJIHVubGluayBteSBhY2NvdW50PyI+CiAgWW91IG11c3QgYWx3YXlzIGhhdmUgYXQgbGVhc3Qgb25lIGxvZ2luIG1ldGhvZCBsaW5rZWQgdG8geW91ciBCMyBHbG9iYWwgQWNjb3VudC4gSWYgdGhlIG9ubHkgYWNjb3VudCB5b3UgaGF2ZSBsaW5rZWQgaXMgdGhlIG9uZSB5b3Ugd2lzaCB0byBkaXNjb25uZWN0LCB5b3XigJlsbCBuZWVkIHRvIGxpbmsgYW5vdGhlciBhY2NvdW50IGZpcnN0LiBPbmNlIHlvdeKAmXZlIGFkZGVkIGEgbmV3IGFjY291bnQsIHlvdSBjYW4gc2FmZWx5IGRpc2Nvbm5lY3QgdGhlIG9uZSB5b3Ugd2FudCB0byByZW1vdmUuCjwvQWNjb3JkaW9uPgoKPEFjY29yZGlvbiB0aXRsZT0iQ2FuIEkgbGluayBtb3JlIHRoYW4gb25lIGFjY291bnQ/Ij4KICBZZXMuIFlvdSBjYW4gbGluayBtdWx0aXBsZSBhY2NvdW50cyB0byB0aGUgc2FtZSBCMyBHbG9iYWwgQWNjb3VudC4KPC9BY2NvcmRpb24+",
    "lastUpdated": "2025-10-29T22:21:03.263Z"
  },
  {
    "sourceFile": "learn/getting-started/how-to-create-global-account.mdx",
    "sourceHash": "CiMjIyBDcmVhdGluZyBZb3VyIEIzIEdsb2JhbCBBY2NvdW50Cgo8U3RlcHM+CiAgPFN0ZXAgdGl0bGU9IlZpc2l0IHRoZSBFeHBsb3JlciI+CiAgICBHbyB0byBodHRwczovL2V4cGxvcmVyLmIzLmZ1bi8uCiAgPC9TdGVwPgogIDxTdGVwIHRpdGxlPSJPcGVuIHRoZSBTaWRlYmFyIj4KICAgIE9uIHRoZSBsZWZ0IHNpZGUgb2YgdGhlIHBhZ2UsIGhvdmVyIHRvIGV4cGFuZCB0aGUgc2lkZWJhci4gU2VsZWN0IGFueSBvcHRpb24gKHN1Y2ggYXMgKipUcmFuc2FjdGlvbnMqKiBvciAqKkJyb3dzZSBBcHBzKiopIHRvIHJldmVhbCB0aGUgc2lnbi1pbiBvcHRpb24uCgogICAgIVtTY3JlZW5zaG90MjAyNSAwOSAyNGF0NiAyMyAwOFBNIFBuXSgvZG9jcy9pbWFnZXMvU2NyZWVuc2hvdDIwMjUtMDktMjRhdDYuMjMuMDhQTS5wbmcpCiAgPC9TdGVwPgogIDxTdGVwIHRpdGxlPSJDb25uZWN0IFlvdXIgQWNjb3VudCI+CiAgICBJbiB0aGUgdG9wLXJpZ2h0IGNvcm5lciBvZiB0aGUgc2NyZWVuLCBjbGljayAqKkNvbm5lY3QqKi4KCiAgICAhW1NjcmVlbnNob3QyMDI1IDA5IDI0YXQ2IDI2IDI0UE0gUG5dKC9kb2NzL2ltYWdlcy9TY3JlZW5zaG90MjAyNS0wOS0yNGF0Ni4yNi4yNFBNLnBuZykKICA8L1N0ZXA+CiAgPFN0ZXAgdGl0bGU9IkNob29zZSBhIExvZ2luIE1ldGhvZCI+CiAgICAtICoqV2FsbGV0IChNZXRhTWFzaywgV2FsbGV0Q29ubmVjdCwgZXRjLikqKiAtIEFwcHJvdmUgdGhlIGNvbm5lY3Rpb24gcmVxdWVzdCBpbiB5b3VyIHdhbGxldC4KICAgIC0gKipTb2NpYWwgLyBFbWFpbCAvIFBob25lKiogLSBGb2xsb3cgdGhlIHZlcmlmaWNhdGlvbiBwcm9jZXNzIGFwcHJvcHJpYXRlIGZvciB5b3VyIGxvZ2luIG1ldGhvZCAoZS5nLiwgZW1haWwgY29uZmlybWF0aW9uLCBTTVMgY29kZSwgb3Igc29jaWFsIGxvZ2luIGF1dGhvcml6YXRpb24pLgoKICAgIDxpbWcKICAgICAgc3JjPSIvZG9jcy9pbWFnZXMvU2NyZWVuc2hvdDIwMjUtMDktMjRhdDYuMjguMDNQTS5wbmciCiAgICAgIGFsdD0iU2NyZWVuc2hvdDIwMjUgMDkgMjRhdDYgMjggMDNQTSBQbiIKICAgICAgdGl0bGU9IlNjcmVlbnNob3QyMDI1IDA5IDI0YXQ2IDI4IDAzUE0gUG4iCiAgICAgIGNsYXNzTmFtZT0ibXgtYXV0byIKICAgICAgc3R5bGU9e3sgd2lkdGg6IjYxJSIgfX0KICAgIC8+CiAgPC9TdGVwPgo8L1N0ZXBzPgoKT25jZSB2ZXJpZmllZCwgeW91ciBCMyBHbG9iYWwgQWNjb3VudCB3aWxsIGJlIGNyZWF0ZWQgYW5kIHlvdeKAmWxsIGJlIHNpZ25lZCBpbi4KCiMjIyBGQVEKCjxBY2NvcmRpb24gdGl0bGU9IkRvIEkgbmVlZCBhIHdhbGxldCB0byBjcmVhdGUgYSBCMyBHbG9iYWwgQWNjb3VudD8iPgogIE5vLiBZb3UgY2FuIHNpZ24gdXAgd2l0aCBhIHdhbGxldCwgZW1haWwsIHBob25lLCBvciBzb2NpYWwgbG9naW4uIElmIHlvdSBjaG9vc2UgdG8gc2lnbiBpbiB3aXRob3V0IGEgd2FsbGV0LCBhbiBlbWJlZGRlZCB3YWxsZXQgd2lsbCBhdXRvbWF0aWNhbGx5IGJlIGNyZWF0ZWQgZm9yIHlvdSBpbiB0aGUgYmFja2dyb3VuZC4gVGhpcyBlbnN1cmVzIHlvdeKAmWxsIHN0aWxsIGhhdmUgYSB3YWxsZXQgY29ubmVjdGVkIHRvIHlvdXIgYWNjb3VudCwgZXZlbiBpZiB5b3UgZGlkbuKAmXQgYnJpbmcgeW91ciBvd24uCjwvQWNjb3JkaW9uPg==",
    "lastUpdated": "2025-10-29T22:21:21.288Z"
  },
  {
    "sourceFile": "bondkit/guides/troubleshooting.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-10-29T22:22:56.868Z"
  },
  {
    "sourceFile": "bondkit/guides/token-lifecycle.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-10-29T22:24:26.997Z"
  },
  {
    "sourceFile": "bondkit/concepts/dex-phase.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-10-29T22:25:49.709Z"
  },
  {
    "sourceFile": "anyspend/x402-signature-methods.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-10-31T03:29:37.608Z"
  },
  {
    "sourceFile": "anyspend/x402-quickstart-sellers.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-10-31T03:31:34.706Z"
  },
  {
    "sourceFile": "anyspend/x402-quickstart-buyers.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-10-31T03:33:11.529Z"
  },
  {
    "sourceFile": "anyspend/x402-overview.mdx",
    "sourceHash": "CjxDYXJkR3JvdXAgY29scz17Mn0+CjxDYXJkIHRpdGxlPSJHaXRIdWIgUmVwb3NpdG9yeSIgaWNvbj0iZ2l0aHViIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vYjMtZnVuL2FueXNwZW5kLXg0MDIiPgogIFZpZXcgc291cmNlIGNvZGUsIGV4YW1wbGVzLCBhbmQgY29udHJpYnV0ZQo8L0NhcmQ+Cgo8Q2FyZCB0aXRsZT0ibnBtIFBhY2thZ2UiIGljb249Im5wbSIgaHJlZj0iaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQGIzZG90ZnVuL2FueXNwZW5kLXg0MDIiPgogIEluc3RhbGwgQGIzZG90ZnVuL2FueXNwZW5kLXg0MDIgcGFja2FnZQo8L0NhcmQ+CjwvQ2FyZEdyb3VwPgoKIyMgV2hhdCBpcyBBbnlTcGVuZCB4NDAyPwoKQW55U3BlbmQgeDQwMiBpcyBCMydzIGltcGxlbWVudGF0aW9uIG9mIHRoZSAqKng0MDIgcGF5bWVudCBwcm90b2NvbCoqIHRoYXQgZW5hYmxlcyBpbnN0YW50LCBhdXRvbWF0aWMgY3J5cHRvY3VycmVuY3kgcGF5bWVudHMgZGlyZWN0bHkgb3ZlciBIVFRQLiBVbmxpa2UgdHJhZGl0aW9uYWwgeDQwMiBmYWNpbGl0YXRvcnMgdGhhdCBvbmx5IHN1cHBvcnQgVVNEQywgKipBbnlTcGVuZCBhbGxvd3MgeW91IHRvIHBheSB3aXRoIGFueSB0b2tlbioqIHdoaWxlIHJlc291cmNlIHNlcnZlcnMgcmVjZWl2ZSBhbnkgdG9rZW4gdGhleSBwcmVmZXIuCgpUaGUgeDQwMiBwcm90b2NvbCBtb2Rlcm5pemVzIHRoZSBIVFRQIGA0MDIgUGF5bWVudCBSZXF1aXJlZGAgc3RhdHVzIGNvZGUsIHR1cm5pbmcgaXQgaW50byBhIHByYWN0aWNhbCBzb2x1dGlvbiBmb3IgbWFjaGluZS10by1tYWNoaW5lIG1pY3JvcGF5bWVudHMsIHBheXdhbGxlZCBBUElzLCBhbmQgYXV0b25vbW91cyBhZ2VudCBpbnRlcmFjdGlvbnMuCgojIyBGb3IgQnV5ZXJzIChQYXllcnMpCgpQYXkgZm9yIHBheXdhbGxlZCByZXNvdXJjZXMgdXNpbmcgYW55IGNyeXB0b2N1cnJlbmN5IHlvdSBob2xkOgoKLSAqKlBheSB3aXRoIGFueSB0b2tlbioqOiBVc2UgRVRILCBEQUksIG9yIGFueSBFUkMtMjAgdG9rZW4gLSBub3QganVzdCBVU0RDCi0gKipTdGFuZGFyZCBwcm90b2NvbCoqOiBXb3JrcyB3aXRoIGFueSB4NDAyLWVuYWJsZWQgc2VydmljZSB1c2luZyBzdGFuZGFyZCBIVFRQCi0gKipObyBtYW51YWwgc3dhcHMqKjogQW55U3BlbmQgYXV0b21hdGljYWxseSBjb252ZXJ0cyB5b3VyIHRva2VuIHRvIHdoYXQgdGhlIHNlbGxlciBuZWVkcwotICoqU2ltcGxlIGludGVncmF0aW9uKio6IE9uZSBTREsgd29ya3MgYWNyb3NzIGFsbCB4NDAyIHNlcnZpY2VzCgoqKlVzZSBDYXNlczoqKgotIEFjY2VzcyBwcmVtaXVtIEFQSXMgYW5kIEFJIGFnZW50IHNlcnZpY2VzCi0gUGF5IGZvciBjb21wdXRhdGlvbmFsIHJlc291cmNlcyBhbmQgZGF0YSBmZWVkcwotIEVuYWJsZSBhdXRvbm9tb3VzIGFnZW50LXRvLWFnZW50IHBheW1lbnRzCi0gQ29uc3VtZSBwYXl3YWxsZWQgY29udGVudCBwcm9ncmFtbWF0aWNhbGx5CgojIyBGb3IgU2VsbGVycyAoUmVzb3VyY2UgU2VydmVycykKCkFjY2VwdCBwYXltZW50cyBpbiBVU0RDIHdoaWxlIHlvdXIgY3VzdG9tZXJzIHBheSB3aXRoIHRoZWlyIHByZWZlcnJlZCB0b2tlbjoKCi0gKipSZWNlaXZlIFVTREMqKjogR2V0IHBhaWQgaW4gVVNEQyByZWdhcmRsZXNzIG9mIHdoYXQgdG9rZW4gdGhlIGN1c3RvbWVyIHVzZXMKLSAqKkV4cHJlc3MgbWlkZGxld2FyZSoqOiBBZGQgcGF5bWVudHMgdG8geW91ciBBUEkgd2l0aCBqdXN0IGEgZmV3IGxpbmVzIG9mIGNvZGUKLSAqKk5vIGJsb2NrY2hhaW4gaW5mcmFzdHJ1Y3R1cmUqKjogQW55U3BlbmQgaGFuZGxlcyBhbGwgb24tY2hhaW4gY29tcGxleGl0eQotICoqSW5zdGFudCBzZXR0bGVtZW50Kio6IFBheW1lbnRzIGFyZSB2ZXJpZmllZCBhbmQgc2V0dGxlZCBhdXRvbWF0aWNhbGx5CgoqKlVzZSBDYXNlczoqKgotIE1vbmV0aXplIHByZW1pdW0gQVBJcyBhbmQgZGF0YSBzZXJ2aWNlcwotIEJ1aWxkIHBhaWQgQUkgYWdlbnQgd29ya2Zsb3dzCi0gQ3JlYXRlIHBheXdhbGxlZCBjb250ZW50IGFuZCB0b29scwotIEFjY2VwdCBjcnlwdG8gcGF5bWVudHMgd2l0aG91dCBjcnlwdG8gZXhwZXJ0aXNlCgojIyBRdWljayBTdGFydAoKQ2hvb3NlIHlvdXIgcGF0aDoKCjxDYXJkR3JvdXAgY29scz17Mn0+CjxDYXJkIHRpdGxlPSJJIHdhbnQgdG8gcGF5IGZvciBzZXJ2aWNlcyIgaWNvbj0id2FsbGV0IiBocmVmPSIvYW55c3BlbmQveDQwMi1xdWlja3N0YXJ0LWJ1eWVycyI+CiAgKipGb3IgQnV5ZXJzKio6IExlYXJuIGhvdyB0byB1c2UgdGhlIHg0MDIgY2xpZW50IFNESyB0byBwYXkgZm9yIHBheXdhbGxlZCByZXNvdXJjZXMgd2l0aCBhbnkgdG9rZW4KPC9DYXJkPgoKPENhcmQgdGl0bGU9Ikkgd2FudCB0byBhY2NlcHQgcGF5bWVudHMiIGljb249ImNhc2gtcmVnaXN0ZXIiIGhyZWY9Ii9hbnlzcGVuZC94NDAyLXF1aWNrc3RhcnQtc2VsbGVycyI+CiAgKipGb3IgU2VsbGVycyoqOiBBZGQgdGhlIEV4cHJlc3MgbWlkZGxld2FyZSB0byB5b3VyIEFQSSBhbmQgc3RhcnQgYWNjZXB0aW5nIG11bHRpLXRva2VuIHBheW1lbnRzCjwvQ2FyZD4KPC9DYXJkR3JvdXA+CgoKIyMgSG93IEl0IFdvcmtzCgo8U3RlcHM+CjxTdGVwIHRpdGxlPSJDbGllbnQgUmVxdWVzdHMgUmVzb3VyY2UiPgpVc2VyJ3MgYXBwbGljYXRpb24gbWFrZXMgYSBzdGFuZGFyZCBIVFRQIHJlcXVlc3QgdG8geW91ciBBUEkKPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IlBheW1lbnQgUmVxdWlyZWQiPgpZb3VyIEFQSSByZXR1cm5zIGA0MDIgUGF5bWVudCBSZXF1aXJlZGAgd2l0aCBwYXltZW50IGRldGFpbHMKPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IlRva2VuIFByZWZlcmVuY2UiPgpDbGllbnQgc3BlY2lmaWVzIHRoZWlyIHByZWZlcnJlZCBwYXltZW50IHRva2VuIChFVEgsIERBSSwgZXRjLikKPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IkFueVNwZW5kIFF1b3RlcyI+CkFueVNwZW5kIGNhbGN1bGF0ZXMgdGhlIGVxdWl2YWxlbnQgYW1vdW50IGluIHRoZSBjbGllbnQncyBjaG9zZW4gdG9rZW4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IkNsaWVudCBTaWducyBQYXltZW50Ij4KVXNlciBzaWducyBhIGNyeXB0b2dyYXBoaWMgYXV0aG9yaXphdGlvbiBmb3IgdGhlaXIgdG9rZW4KPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IkF1dG9tYXRpYyBTZXR0bGVtZW50Ij4KQW55U3BlbmQgc3dhcHMgdGhlIHRva2VuIHRvIFVTREMgYW5kIHNldHRsZXMgdG8geW91ciB3YWxsZXQKPC9TdGVwPgoKPFN0ZXAgdGl0bGU9IlJlc291cmNlIERlbGl2ZXJlZCI+CllvdXIgQVBJIHJlY2VpdmVzIHBheW1lbnQgY29uZmlybWF0aW9uIGFuZCByZXR1cm5zIHRoZSByZXF1ZXN0ZWQgcmVzb3VyY2UKPC9TdGVwPgo8L1N0ZXBzPgoKIyMgS2V5IERpZmZlcmVudGlhdG9ycwoKIyMjIE11bHRpLVRva2VuIFN1cHBvcnQKCioqU3RhbmRhcmQgeDQwMioqOiBSZXNvdXJjZSBzZXJ2ZXJzIGFuZCBjbGllbnRzIG11c3QgYm90aCB1c2UgVVNEQwoKKipBbnlTcGVuZCB4NDAyKio6IENsaWVudHMgcGF5IHdpdGggKiphbnkgdG9rZW4qKiB0aGV5IGhvbGQuIEFueVNwZW5kIGhhbmRsZXMgdGhlIGNvbnZlcnNpb24uCgpgYGAKQ2xpZW50IHBheXMgMC4wMDAzIEVUSCDihpIgQW55U3BlbmQgc3dhcHMgdG8gMSBVU0RDIOKGkiBTZWxsZXIgcmVjZWl2ZXMgMSBVU0RDCmBgYAoKIyMjIE5vIEluZnJhc3RydWN0dXJlIFJlcXVpcmVkCgpSZXNvdXJjZSBzZXJ2ZXJzIGRvbid0IG5lZWQgdG86Ci0gUnVuIGJsb2NrY2hhaW4gbm9kZXMKLSBNYW5hZ2Ugd2FsbGV0cyBvciBwcml2YXRlIGtleXMKLSBIYW5kbGUgdG9rZW4gc3dhcHMgb3IgYnJpZGdpbmcKLSBNb25pdG9yIHRyYW5zYWN0aW9uIHN0YXR1cwoKQW55U3BlbmQncyBmYWNpbGl0YXRvciBoYW5kbGVzIGFsbCBibG9ja2NoYWluIG9wZXJhdGlvbnMgYW5kIHByb3ZpZGVzIHNpbXBsZSBIVFRQIGVuZHBvaW50cyBmb3IgdmVyaWZpY2F0aW9uIGFuZCBzZXR0bGVtZW50LgoKIyMjIFN0YW5kYXJkIFByb3RvY29sIENvbXBsaWFuY2UKCkNsaWVudHMgdXNpbmcgQW55U3BlbmQgaGF2ZSAqKnplcm8gYXdhcmVuZXNzKiogdGhleSdyZSB1c2luZyBhIHNwZWNpYWwgZmFjaWxpdGF0b3IuIFRoZSBlbnRpcmUgZmxvdyB1c2VzIHN0YW5kYXJkIHg0MDIgcHJvdG9jb2wgbWVzc2FnZXMgLSB0aGUgbXVsdGktdG9rZW4gbWFnaWMgaGFwcGVucyB0cmFuc3BhcmVudGx5IG9uIHRoZSByZXNvdXJjZSBzZXJ2ZXIgc2lkZSB0aHJvdWdoIG1pZGRsZXdhcmUuCgojIyBQYWNrYWdlIERlbGl2ZXJ5CgpBbnlTcGVuZCB4NDAyIGNvbnNpc3RzIG9mIHR3byBwYWNrYWdlczoKCjxDYXJkR3JvdXAgY29scz17Mn0+CjxDYXJkIHRpdGxlPSJTZXJ2ZXIgU0RLIiBpY29uPSJzZXJ2ZXIiPgogICoqQGIzZG90ZnVuL2FueXNwZW5kLXg0MDIqKgoKICBVbml2ZXJzYWwgc2VydmVyIG1pZGRsZXdhcmUgc3VwcG9ydGluZyBFeHByZXNzLCBOZXh0LmpzLCBhbmQgSG9ubyBmb3IgcmVzb3VyY2Ugc2VydmVycyB0byBlYXNpbHkgYWNjZXB0IG11bHRpLXRva2VuIHBheW1lbnRzCjwvQ2FyZD4KCjxDYXJkIHRpdGxlPSJDbGllbnQgU0RLIiBpY29uPSJjb2RlIj4KICAqKmFueXNwZW5kLXg0MDItY2xpZW50KioKCiAgUGxhdGZvcm0tYWdub3N0aWMgVHlwZVNjcmlwdCBTREsgZm9yIGNsaWVudHMgdG8gbWFrZSBwYXltZW50cyB3aXRoIHNpZ25hdHVyZSBoZWxwZXJzCjwvQ2FyZD4KPC9DYXJkR3JvdXA+CgojIyBQb3dlcmVkIGJ5IEFueVNwZW5kIEZhY2lsaXRhdG9yCgpBbGwgeDQwMiBwYXltZW50cyBhcmUgcHJvY2Vzc2VkIHRocm91Z2ggdGhlICoqQW55U3BlbmQgRmFjaWxpdGF0b3IqKiAtIGEgcHJvZHVjdGlvbi1ncmFkZSBwYXltZW50IGluZnJhc3RydWN0dXJlIHRoYXQgaGFuZGxlczoKCi0g4pyFIE11bHRpLXRva2VuIHN1cHBvcnQgYWNyb3NzIDE5KyBibG9ja2NoYWluIG5ldHdvcmtzCi0g4pyFIEF1dG9tYXRpYyB0b2tlbiBzd2FwcyBhbmQgY3Jvc3MtY2hhaW4gcm91dGluZwotIOKchSBHYXNsZXNzIHBheW1lbnRzIGZvciB1c2VycwotIOKchSBTdGFuZGFyZHMtY29tcGxpYW50IHg0MDIgaW1wbGVtZW50YXRpb24KLSDinIUgRHJvcC1pbiByZXBsYWNlbWVudCBmb3IgYW55IHg0MDIgZmFjaWxpdGF0b3IKCioqUHJvZHVjdGlvbiBFbmRwb2ludDoqKiBgaHR0cHM6Ly9tYWlubmV0LmFueXNwZW5kLmNvbS94NDAyYAoKPENhcmQgdGl0bGU9IkxlYXJuIE1vcmUgQWJvdXQgdGhlIEZhY2lsaXRhdG9yIiBpY29uPSJzZXJ2ZXIiIGhyZWY9Ii9hbnlzcGVuZC94NDAyLWZhY2lsaXRhdG9yIj4KICBEaXNjb3ZlciB0aGUgZnVsbCBjYXBhYmlsaXRpZXMsIEFQSSBlbmRwb2ludHMsIGFuZCBhcmNoaXRlY3R1cmUgb2YgdGhlIEFueVNwZW5kIEZhY2lsaXRhdG9yCjwvQ2FyZD4K",
    "lastUpdated": "2025-10-31T03:34:02.911Z"
  },
  {
    "sourceFile": "anyspend/x402-network-support.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-10-31T03:35:50.554Z"
  },
  {
    "sourceFile": "anyspend/x402-facilitator.mdx",
    "sourceHash": "",
    "lastUpdated": "2025-10-31T03:37:30.321Z"
  }
]