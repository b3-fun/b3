export const BondkitTokenABI = [
  { inputs: [], stateMutability: "nonpayable", type: "constructor" },
  { inputs: [], name: "CalculatedTradingTokenOutIsZero", type: "error" },
  {
    inputs: [
      { internalType: "uint256", name: "required", type: "uint256" },
      { internalType: "uint256", name: "available", type: "uint256" },
    ],
    name: "CurveReserveInsufficient",
    type: "error",
  },
  {
    inputs: [
      { internalType: "uint256", name: "currentRaised", type: "uint256" },
      { internalType: "uint256", name: "threshold", type: "uint256" },
    ],
    name: "DexTriggerThresholdNotMet",
    type: "error",
  },
  {
    inputs: [
      { internalType: "address", name: "spender", type: "address" },
      { internalType: "uint256", name: "allowance", type: "uint256" },
      { internalType: "uint256", name: "needed", type: "uint256" },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      { internalType: "address", name: "sender", type: "address" },
      { internalType: "uint256", name: "balance", type: "uint256" },
      { internalType: "uint256", name: "needed", type: "uint256" },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [{ internalType: "address", name: "approver", type: "address" }],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [{ internalType: "address", name: "receiver", type: "address" }],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  { inputs: [{ internalType: "address", name: "sender", type: "address" }], name: "ERC20InvalidSender", type: "error" },
  {
    inputs: [{ internalType: "address", name: "spender", type: "address" }],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    inputs: [
      { internalType: "address", name: "owner", type: "address" },
      { internalType: "uint256", name: "required", type: "uint256" },
      { internalType: "uint256", name: "available", type: "uint256" },
    ],
    name: "InsufficientTokenBalance",
    type: "error",
  },
  {
    inputs: [{ internalType: "uint256", name: "available", type: "uint256" }],
    name: "InsufficientTradingTokenForLiquidity",
    type: "error",
  },
  {
    inputs: [{ internalType: "uint256", name: "value", type: "uint256" }],
    name: "InvalidCurveExponent",
    type: "error",
  },
  {
    inputs: [
      { internalType: "uint8", name: "currentPhase", type: "uint8" },
      { internalType: "uint8", name: "requiredPhase", type: "uint8" },
    ],
    name: "InvalidPhaseForAction",
    type: "error",
  },
  { inputs: [], name: "NoTokensForLiquidity", type: "error" },
  { inputs: [{ internalType: "address", name: "owner", type: "address" }], name: "OwnableInvalidOwner", type: "error" },
  {
    inputs: [{ internalType: "address", name: "account", type: "address" }],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    inputs: [
      { internalType: "uint256", name: "x", type: "uint256" },
      { internalType: "uint256", name: "y", type: "uint256" },
    ],
    name: "PRBMath_MulDiv18_Overflow",
    type: "error",
  },
  {
    inputs: [
      { internalType: "uint256", name: "x", type: "uint256" },
      { internalType: "uint256", name: "y", type: "uint256" },
      { internalType: "uint256", name: "denominator", type: "uint256" },
    ],
    name: "PRBMath_MulDiv_Overflow",
    type: "error",
  },
  {
    inputs: [{ internalType: "UD60x18", name: "x", type: "uint256" }],
    name: "PRBMath_UD60x18_Exp2_InputTooBig",
    type: "error",
  },
  {
    inputs: [{ internalType: "UD60x18", name: "x", type: "uint256" }],
    name: "PRBMath_UD60x18_Log_InputTooSmall",
    type: "error",
  },
  { inputs: [], name: "ReentrancyGuardReentrantCall", type: "error" },
  {
    inputs: [
      { internalType: "uint256", name: "tokensToMint", type: "uint256" },
      { internalType: "uint256", name: "minTokensOut", type: "uint256" },
    ],
    name: "SlippageProtectionTokens",
    type: "error",
  },
  {
    inputs: [
      { internalType: "uint256", name: "tradingTokenToUser", type: "uint256" },
      { internalType: "uint256", name: "minTradingTokenOut", type: "uint256" },
    ],
    name: "SlippageProtectionTradingToken",
    type: "error",
  },
  { inputs: [], name: "TokenAmountMustBePositive", type: "error" },
  { inputs: [], name: "TradingDisabledDexPhaseActive", type: "error" },
  { inputs: [], name: "TradingTokenAmountMustBePositive", type: "error" },
  { inputs: [], name: "TradingTokenForCurveMustBePositive", type: "error" },
  {
    inputs: [{ internalType: "address", name: "recipient", type: "address" }],
    name: "TradingTokenTransferFailed",
    type: "error",
  },
  {
    inputs: [{ internalType: "uint256", name: "value", type: "uint256" }],
    name: "ValidationInvalidAggressivenessFactor",
    type: "error",
  },
  {
    inputs: [{ internalType: "address", name: "providedAddress", type: "address" }],
    name: "ValidationInvalidFeeRecipientAddress",
    type: "error",
  },
  {
    inputs: [{ internalType: "uint256", name: "value", type: "uint256" }],
    name: "ValidationInvalidFinalTokenSupply",
    type: "error",
  },
  {
    inputs: [{ internalType: "uint256", name: "value", type: "uint256" }],
    name: "ValidationInvalidLPSplitRatio",
    type: "error",
  },
  {
    inputs: [{ internalType: "address", name: "providedAddress", type: "address" }],
    name: "ValidationInvalidMigrationAdminAddress",
    type: "error",
  },
  {
    inputs: [{ internalType: "uint24", name: "value", type: "uint24" }],
    name: "ValidationInvalidV4PoolFee",
    type: "error",
  },
  {
    inputs: [{ internalType: "int24", name: "value", type: "int24" }],
    name: "ValidationInvalidV4TickSpacing",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "owner", type: "address" },
      { indexed: true, internalType: "address", name: "spender", type: "address" },
      { indexed: false, internalType: "uint256", name: "value", type: "uint256" },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "payer", type: "address" },
      { indexed: true, internalType: "address", name: "recipient", type: "address" },
      { indexed: false, internalType: "uint256", name: "tradingTokenIn", type: "uint256" },
      { indexed: false, internalType: "uint256", name: "tokensOut", type: "uint256" },
      { indexed: false, internalType: "uint256", name: "fee", type: "uint256" },
      { indexed: false, internalType: "uint256", name: "totalRaisedBonding", type: "uint256" },
    ],
    name: "BondingCurveBuy",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "seller", type: "address" },
      { indexed: false, internalType: "uint256", name: "tokensIn", type: "uint256" },
      { indexed: false, internalType: "uint256", name: "tradingTokenOut", type: "uint256" },
      { indexed: false, internalType: "uint256", name: "fee", type: "uint256" },
      { indexed: false, internalType: "uint256", name: "totalRaisedBonding", type: "uint256" },
    ],
    name: "BondingCurveSell",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "initializer", type: "address" },
      { indexed: false, internalType: "string", name: "name", type: "string" },
      { indexed: false, internalType: "string", name: "symbol", type: "string" },
      { indexed: false, internalType: "address", name: "feeRecipient", type: "address" },
      { indexed: false, internalType: "uint256", name: "finalTokenSupply", type: "uint256" },
      { indexed: false, internalType: "uint8", name: "aggressivenessFactor", type: "uint8" },
      { indexed: false, internalType: "uint256", name: "lpSplitRatioFeeRecipientBps", type: "uint256" },
      { indexed: false, internalType: "uint256", name: "targetAmount", type: "uint256" },
      { indexed: false, internalType: "address", name: "tradingToken", type: "address" },
    ],
    name: "BondkitTokenInitialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, internalType: "uint256", name: "tradingTokenForLp", type: "uint256" },
      { indexed: false, internalType: "uint256", name: "tokensForLp", type: "uint256" },
      { indexed: false, internalType: "uint256", name: "tradingTokenForFeeRecipient", type: "uint256" },
    ],
    name: "BondkitTokenMigrated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "splitter", type: "address" },
      { indexed: false, internalType: "uint256", name: "amount", type: "uint256" },
    ],
    name: "FeesSentToSplitter",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "previousOwner", type: "address" },
      { indexed: true, internalType: "address", name: "newOwner", type: "address" },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "splitter", type: "address" },
      { indexed: false, internalType: "bool", name: "isEnabled", type: "bool" },
    ],
    name: "SplitterConfigured",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "from", type: "address" },
      { indexed: true, internalType: "address", name: "to", type: "address" },
      { indexed: false, internalType: "uint256", name: "value", type: "uint256" },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "bytes32", name: "poolId", type: "bytes32" },
      { indexed: true, internalType: "address", name: "hook", type: "address" },
      { indexed: false, internalType: "uint24", name: "fee", type: "uint24" },
      { indexed: false, internalType: "int24", name: "tickSpacing", type: "int24" },
    ],
    name: "V4PoolConfigured",
    type: "event",
  },
  {
    inputs: [
      { internalType: "address", name: "owner", type: "address" },
      { internalType: "address", name: "spender", type: "address" },
    ],
    name: "allowance",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "spender", type: "address" },
      { internalType: "uint256", name: "value", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "account", type: "address" }],
    name: "balanceOf",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "bondingPhaseSplitter",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "uint256", name: "_amount", type: "uint256" },
      { internalType: "uint256", name: "_minTokensOut", type: "uint256" },
    ],
    name: "buy",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "_recipient", type: "address" },
      { internalType: "uint256", name: "_amount", type: "uint256" },
      { internalType: "uint256", name: "_minTokensOut", type: "uint256" },
    ],
    name: "buyFor",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "checkV4PoolState",
    outputs: [
      { internalType: "bool", name: "initialized", type: "bool" },
      { internalType: "bytes32", name: "poolId", type: "bytes32" },
      { internalType: "address", name: "hookAddress", type: "address" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "circulatingSupply",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentStatus",
    outputs: [{ internalType: "enum Status", name: "", type: "uint8" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [{ internalType: "uint8", name: "", type: "uint8" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "feeRecipient",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "finalTokenSupply",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "_tradingTokenAmount", type: "uint256" }],
    name: "getAmountOfTokensToBuy",
    outputs: [{ internalType: "uint256", name: "tokensToMint", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "_tokenAmount", type: "uint256" }],
    name: "getAmountOfTradingTokensToSell",
    outputs: [{ internalType: "uint256", name: "tradingTokenToUser", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBondingCurveConfig",
    outputs: [
      { internalType: "uint256", name: "num", type: "uint256" },
      { internalType: "uint256", name: "den", type: "uint256" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBondingProgressPercent",
    outputs: [
      { internalType: "uint256", name: "progressBps", type: "uint256" },
      { internalType: "uint256", name: "raised", type: "uint256" },
      { internalType: "uint256", name: "threshold", type: "uint256" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBondingCurvePricePerToken",
    outputs: [{ internalType: "uint256", name: "currentPriceWei", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentPhase",
    outputs: [{ internalType: "string", name: "phase", type: "string" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentStatusEnum",
    outputs: [{ internalType: "enum Status", name: "", type: "uint8" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFeeRecipient",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLPSplitRatioFeeRecipientBps",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "uint256", name: "_startIndex", type: "uint256" },
      { internalType: "uint256", name: "_count", type: "uint256" },
    ],
    name: "getPaginatedHolders",
    outputs: [
      { internalType: "address[]", name: "holders", type: "address[]" },
      { internalType: "uint256[]", name: "balances", type: "uint256[]" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSplitterInfo",
    outputs: [
      { internalType: "address", name: "splitter", type: "address" },
      { internalType: "bool", name: "isEnabled", type: "bool" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTargetAmount",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTradingToken",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "user", type: "address" }],
    name: "getUserQuote",
    outputs: [
      { internalType: "uint256", name: "balance", type: "uint256" },
      { internalType: "uint256", name: "tokensFor1TradingToken", type: "uint256" },
      { internalType: "uint256", name: "tradingTokenFor1Token", type: "uint256" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getV4Config",
    outputs: [
      { internalType: "address", name: "hook", type: "address" },
      { internalType: "uint24", name: "fee", type: "uint24" },
      { internalType: "int24", name: "tickSpacing", type: "int24" },
      { internalType: "bytes32", name: "poolId", type: "bytes32" },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getV4PoolId",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getV4PoolManager",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          { internalType: "string", name: "name", type: "string" },
          { internalType: "string", name: "symbol", type: "string" },
          { internalType: "address", name: "feeRecipient", type: "address" },
          { internalType: "uint256", name: "finalTokenSupply", type: "uint256" },
          { internalType: "uint8", name: "aggressivenessFactor", type: "uint8" },
          { internalType: "uint256", name: "lpSplitRatioFeeRecipientBps", type: "uint256" },
          { internalType: "uint256", name: "targetAmount", type: "uint256" },
          { internalType: "address", name: "tradingToken", type: "address" },
          { internalType: "address", name: "migrationAdminAddress", type: "address" },
          { internalType: "address", name: "bondingPhaseSplitter", type: "address" },
          { internalType: "address", name: "v4PoolManager", type: "address" },
          { internalType: "address", name: "v4Hook", type: "address" },
          { internalType: "uint24", name: "v4PoolFee", type: "uint24" },
          { internalType: "int24", name: "v4TickSpacing", type: "int24" },
        ],
        internalType: "struct BondkitTokenConfigLib.Config",
        name: "_config",
        type: "tuple",
      },
    ],
    name: "initialize",
    outputs: [{ internalType: "bool", name: "success", type: "bool" }],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lpSplitRatioFeeRecipientBps",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  { inputs: [], name: "migrateToDex", outputs: [], stateMutability: "nonpayable", type: "function" },
  {
    inputs: [],
    name: "name",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  { inputs: [], name: "renounceOwnership", outputs: [], stateMutability: "nonpayable", type: "function" },
  {
    inputs: [],
    name: "scaledCurveExponent",
    outputs: [{ internalType: "UD60x18", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "uint256", name: "_tokenAmount", type: "uint256" },
      { internalType: "uint256", name: "_minTradingTokenOut", type: "uint256" },
    ],
    name: "sell",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "targetAmount",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalRaisedBonding",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tradingToken",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "value", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "from", type: "address" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "value", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "newOwner", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "_bondingPhaseSplitter", type: "address" }],
    name: "updateSplitter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "v4Hook",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "v4PoolFee",
    outputs: [{ internalType: "uint24", name: "", type: "uint24" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "v4PoolId",
    outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "v4PoolManager",
    outputs: [{ internalType: "contract IPoolManager", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "v4TickSpacing",
    outputs: [{ internalType: "int24", name: "", type: "int24" }],
    stateMutability: "view",
    type: "function",
  },
  { stateMutability: "payable", type: "receive" },
] as const;
