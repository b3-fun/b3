/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/chains/{chainId}/tokens": {
    /**
     * Get tokens for a chain
     * @description Retrieves available tokens for a specific blockchain
     */
    get: {
      parameters: {
        query?: {
          /**
           * @description Search term to filter tokens
           * @example USDC
           */
          term?: string;
          /** @description Maximum number of tokens to return */
          limit?: number;
        };
        path: {
          /**
           * @description Blockchain chain ID
           * @example 1
           */
          chainId: number;
        };
      };
      responses: {
        /** @description Tokens retrieved successfully */
        200: {
          content: {
            "application/json": {
              /** @example true */
              success?: boolean;
              /** @example Tokens retrieved successfully */
              message?: string;
              /** @description Array of tokens */
              data?: {
                /** @description Chain ID */
                chainId?: number;
                /** @description Token contract address */
                address?: string;
                /** @description Token symbol */
                symbol?: string;
                /** @description Token name */
                name?: string;
                /** @description Token decimals */
                decimals?: number;
                metadata?: {
                  /** @description Token logo URI */
                  logoURI?: string;
                  /** @description Whether token is verified */
                  verified?: boolean;
                  /** @description Whether token is native to chain */
                  isNative?: boolean;
                };
              }[];
              /** @example 200 */
              statusCode?: number;
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            "application/json": {
              /** @example false */
              success?: boolean;
              /** @example Bad request */
              message?: string;
              /** @example 400 */
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  "/health-check": {
    /**
     * Health check
     * @description Returns the health status of the AnySpend service
     */
    get: {
      responses: {
        /** @description Service is healthy */
        200: {
          content: {
            "application/json": {
              /** @example true */
              success?: boolean;
              /** @example Service is healthy */
              message?: string;
              /** @example null */
              data?: Record<string, never>;
              /** @example 200 */
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  "/onramp/coinbase/options": {
    /**
     * Get Coinbase onramp options
     * @description Retrieves available Coinbase onramp configuration options.
     *
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Country code for onramp options
           * @example US
           */
          country: string;
          /**
           * @description Optional subdivision (state/province) code
           * @example CA
           */
          subdivision?: string;
          /**
           * @description Optional payment method filter
           * @example USD
           */
          payment_method?: string;
          /**
           * @description Optional array of chain IDs to filter by
           * @example [
           *       "1",
           *       "8453"
           *     ]
           */
          chainIds?: string[];
        };
      };
      responses: {
        /** @description Coinbase options retrieved successfully */
        200: {
          content: {
            "application/json": {
              /** @example true */
              success?: boolean;
              /** @example Coinbase options retrieved successfully */
              message?: string;
              data?: {
                /** @description Available payment currencies */
                paymentCurrencies?: {
                  /**
                   * @description Payment currency identifier
                   * @example USD
                   */
                  id?: string;
                  /** @description Payment limits for this currency */
                  limits?: {
                    /**
                     * @description Payment method identifier
                     * @example CARD
                     */
                    id?: string;
                    /**
                     * @description Minimum payment amount
                     * @example 2
                     */
                    min?: string;
                    /**
                     * @description Maximum payment amount
                     * @example 7500
                     */
                    max?: string;
                  }[];
                }[];
                /** @description Available purchase currencies */
                purchaseCurrencies?: {
                  /**
                   * @description Currency identifier (UUID)
                   * @example 2b92315d-eab7-5bef-84fa-089a131333f5
                   */
                  id?: string;
                  /**
                   * @description Currency full name
                   * @example USD Coin
                   */
                  name?: string;
                  /**
                   * @description Currency symbol
                   * @example USDC
                   */
                  symbol?: string;
                  /**
                   * @description Currency icon URL
                   * @example https://dynamic-assets.coinbase.com/3c15df5e2ac7d4abbe9499ed9335041f00c620f28e8de2f93474a9f432058742cdf4674bd43f309e69778a26969dbc009429d4bd59cc5b85b2c6c8a6dc0b57f1/asset_icons/80422be4be5aa1bb4deb72d9f0e9d0f33e05ce6b8fb7c24bb9e14e4adacdf20c.png
                   */
                  iconUrl?: string;
                  /** @description Available networks for this currency */
                  networks?: {
                    /**
                     * @description Network name
                     * @example ethereum
                     */
                    name?: string;
                    /**
                     * @description Network display name
                     * @example Ethereum
                     */
                    displayName?: string;
                    /**
                     * @description Token contract address on this network
                     * @example 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48
                     */
                    contractAddress?: string;
                    /**
                     * @description Chain ID for this network
                     * @example 1
                     */
                    chainId?: string;
                    /**
                     * @description Network display name (snake_case version)
                     * @example Ethereum
                     */
                    display_name?: string;
                    /**
                     * @description Token contract address (snake_case version)
                     * @example 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48
                     */
                    contract_address?: string;
                    /**
                     * @description Chain ID (snake_case version)
                     * @example 1
                     */
                    chain_id?: string;
                  }[];
                }[];
              };
              /** @example 200 */
              statusCode?: number;
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            "application/json": {
              /** @example false */
              success?: boolean;
              /** @example Bad request */
              message?: string;
              /** @example 400 */
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  "/onramp/stripe/supported": {
    /**
     * Check Stripe support
     * @description Checks if Stripe onramp and Stripe Web2 are supported based on IP address location and optional transaction amount
     */
    get: {
      parameters: {
        query: {
          /**
           * @description IP address to check location-based support
           * @example 192.168.1.1
           */
          ipAddress: string;
          /**
           * @description Optional USD amount for transaction limit checks
           * @example 100.00
           */
          usdAmount?: string;
        };
      };
      responses: {
        /** @description Stripe support status retrieved successfully */
        200: {
          content: {
            "application/json": {
              /** @example true */
              success?: boolean;
              /** @example Stripe support status retrieved successfully */
              message?: string;
              data?: {
                /**
                 * @description Whether Stripe onramp is supported for this location/amount
                 * @example true
                 */
                stripeOnramp?: boolean;
                /**
                 * @description Whether Stripe Web2 onramp is supported for this location/amount
                 * @example false
                 */
                stripeWeb2?: boolean;
              };
              /** @example 200 */
              statusCode?: number;
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            "application/json": {
              /** @example false */
              success?: boolean;
              /** @example Bad request */
              message?: string;
              /** @example 400 */
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  "/orders": {
    /**
     * Get orders by creator
     * @description Retrieves all orders created by a specific address
     */
    get: {
      parameters: {
        query?: {
          /**
           * @description Optional address of the order creator (if not provided, returns all orders)
           * @example 0x58241893EF1f86C9fBd8109Cd44Ea961fDb474e1
           */
          creatorAddress?: string;
          /**
           * @description Maximum number of orders to return
           * @example 20
           */
          limit?: string;
          /**
           * @description Number of orders to skip
           * @example 0
           */
          offset?: string;
        };
      };
      responses: {
        /** @description Orders retrieved successfully */
        200: {
          content: {
            "application/json": {
              /** @example true */
              success?: boolean;
              /** @example Get orders by creator successfully */
              message?: string;
              /** @description Array of orders */
              data?: {
                /**
                 * Format: uuid
                 * @description Unique order identifier
                 * @example 51d4889c-9733-4941-a9ed-98c0f336d188
                 */
                id?: string;
                /**
                 * @description Order type
                 * @example swap
                 * @enum {string}
                 */
                type?: "swap" | "custom";
                /**
                 * @description Address to receive tokens/NFT/etc
                 * @example 0x58241893ef1f86c9fbd8109cd44ea961fdb474e1
                 */
                recipientAddress?: string;
                /**
                 * @description Global wallet address handling the order
                 * @example 0xc6608544a3e16c2e94ca1b8c80c842765d0f3ee0
                 */
                globalAddress?: string;
                /**
                 * @description Source chain ID
                 * @example 8453
                 */
                srcChain?: number;
                /**
                 * @description Destination chain ID
                 * @example 8453
                 */
                dstChain?: number;
                /**
                 * @description Source token contract address
                 * @example 0x833589fcd6edb6e08f4c7c32d4f71b54bda02913
                 */
                srcTokenAddress?: string;
                /**
                 * @description Destination token contract address
                 * @example 0x0000000000000000000000000000000000000000
                 */
                dstTokenAddress?: string;
                /**
                 * @description Source amount
                 * @example 10000000000000
                 */
                srcAmount?: string;
                /**
                 * @description Current order status
                 * @example executed
                 */
                status?: string;
                /**
                 * @description Error details if order failed
                 * @example null
                 */
                errorDetails?: string | null;
                /**
                 * @description Creation timestamp
                 * @example 1752576294028
                 */
                createdAt?: number;
                /**
                 * @description Expiration timestamp
                 * @example 1752577194028
                 */
                expiredAt?: number;
                /**
                 * @description Order type specific payload
                 * @example {
                 *       "expectedDstAmount": "1667766525695385",
                 *       "actualDstAmount": null
                 *     }
                 */
                payload?: Record<string, never>;
                /**
                 * @description Display metadata including token information
                 * @example {
                 *       "srcToken": {
                 *         "chainId": 8453,
                 *         "address": "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913",
                 *         "symbol": "USDC",
                 *         "name": "USD Coin",
                 *         "decimals": 6,
                 *         "metadata": {
                 *           "logoURI": "https://polygonscan.com/token/images/usdc_32.png"
                 *         }
                 *       },
                 *       "dstToken": {
                 *         "chainId": 8453,
                 *         "address": "0x0000000000000000000000000000000000000000",
                 *         "symbol": "ETH",
                 *         "name": "Ether",
                 *         "decimals": 18,
                 *         "metadata": {
                 *           "logoURI": "https://assets.relay.link/icons/1/light.png"
                 *         }
                 *       }
                 *     }
                 */
                metadata?: Record<string, never>;
                /**
                 * @description Optional creator address
                 * @example 0x58241893ef1f86c9fbd8109cd44ea961fdb474e1
                 */
                creatorAddress?: string | null;
                /**
                 * @description Optional partner identifier
                 * @example null
                 */
                partnerId?: string | null;
                /**
                 * @description Onramp configuration if used
                 * @example {
                 *       "country": "SG",
                 *       "vendor": "stripe-web2",
                 *       "paymentMethod": "",
                 *       "ipAddress": "103.216.223.204",
                 *       "redirectUrl": "https://www.anyspend.com",
                 *       "stripeAmountInCents": 500
                 *     }
                 */
                onrampMetadata?: Record<string, never>;
                /**
                 * @description Quick purchase URL if available
                 * @example null
                 */
                oneClickBuyUrl?: string | null;
                /**
                 * @description Stripe payment intent ID if using Stripe
                 * @example null
                 */
                stripePaymentIntentId?: string | null;
              }[];
              /** @example 200 */
              statusCode?: number;
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            "application/json": {
              /** @example false */
              success?: boolean;
              /** @example Bad request */
              message?: string;
              /** @example 400 */
              statusCode?: number;
            };
          };
        };
      };
    };
    /**
     * Create a new order
     * @description Creates a new order for token transactions across chains
     */
    post: {
      requestBody: {
        content: {
          "application/json":
            | {
                /**
                 * @description Order type for swap
                 * @enum {string}
                 */
                type: "swap";
                /**
                 * @description Address to receive the destination tokens
                 * @example 0x58241893EF1f86C9fBd8109Cd44Ea961fDb474e1
                 */
                recipientAddress: string;
                /**
                 * @description Source chain ID
                 * @example 1
                 */
                srcChain: number;
                /**
                 * @description Destination chain ID
                 * @example 8453
                 */
                dstChain: number;
                /**
                 * @description Source token contract address
                 * @example 0xA0b86a33E6441E8A91DEF8f5663ACb4C9B4a1234
                 */
                srcTokenAddress: string;
                /**
                 * @description Destination token contract address
                 * @example 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
                 */
                dstTokenAddress: string;
                /**
                 * @description Amount of source tokens to swap
                 * @example 1000000
                 */
                srcAmount: string;
                /** @description Swap-specific payload */
                payload: {
                  /**
                   * @description Expected amount of destination tokens
                   * @example 990000
                   */
                  expectedDstAmount: string;
                  /**
                   * @description Actual received amount (null for new orders)
                   * @example null
                   */
                  actualDstAmount: string | null;
                };
                /** @description Swap metadata for display purposes */
                metadata: {
                  /** @description Source token details */
                  srcToken?: {
                    /**
                     * @description Token chain ID
                     * @example 8453
                     */
                    chainId?: number;
                    /**
                     * @description Token contract address
                     * @example 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
                     */
                    address?: string;
                    /**
                     * @description Token symbol
                     * @example USDC
                     */
                    symbol?: string;
                    /**
                     * @description Token name
                     * @example USD Coin
                     */
                    name?: string;
                    /**
                     * @description Token decimals
                     * @example 6
                     */
                    decimals?: number;
                    metadata?: {
                      /**
                       * @description Token logo URI
                       * @example https://polygonscan.com/token/images/usdc_32.png
                       */
                      logoURI?: string;
                    };
                  };
                  /** @description Destination token details */
                  dstToken?: {
                    /**
                     * @description Token chain ID
                     * @example 8453
                     */
                    chainId?: number;
                    /**
                     * @description Token contract address
                     * @example 0x833589fcd6edb6e08f4c7c32d4f71b54bda02913
                     */
                    address?: string;
                    /**
                     * @description Token symbol
                     * @example USDC
                     */
                    symbol?: string;
                    /**
                     * @description Token name
                     * @example USD Coin
                     */
                    name?: string;
                    /**
                     * @description Token decimals
                     * @example 6
                     */
                    decimals?: number;
                    metadata?: {
                      /**
                       * @description Token logo URI
                       * @example https://coin-images.coingecko.com/coins/images/6319/large/usdc.png?1696506694
                       */
                      logoURI?: string;
                    };
                  };
                };
                /** @description Optional partner identifier */
                partnerId?: string;
                /** @description Optional onramp configuration */
                onramp?: {
                  /**
                   * @description Onramp vendor
                   * @enum {string}
                   */
                  vendor?: "coinbase" | "stripe" | "stripe-web2";
                  /**
                   * @description Payment method for onramp
                   * @example
                   */
                  paymentMethod?: string;
                  /**
                   * @description Country code for the user
                   * @example SG
                   */
                  country?: string;
                  /**
                   * @description User's IP address
                   * @example 149.88.23.87
                   */
                  ipAddress?: string;
                  /**
                   * @description URL to redirect after payment
                   * @example https://www.anyspend.com
                   */
                  redirectUrl?: string;
                };
                /**
                 * @description Optional address of the order creator
                 * @example 0x58241893EF1f86C9fBd8109Cd44Ea961fDb474e1
                 */
                creatorAddress?: string;
              }
            | {
                /**
                 * @description Order type for custom execution
                 * @enum {string}
                 */
                type: "custom";
                /**
                 * @description Address to receive any tokens or execute transaction
                 * @example 0x58241893EF1f86C9fBd8109Cd44Ea961fDb474e1
                 */
                recipientAddress: string;
                /**
                 * @description Source chain ID for payment
                 * @example 1
                 */
                srcChain: number;
                /**
                 * @description Destination chain ID where custom execution will occur
                 * @example 8453
                 */
                dstChain: number;
                /**
                 * @description Payment token contract address
                 * @example 0xA0b86a33E6441E8A91DEF8f5663ACb4C9B4a1234
                 */
                srcTokenAddress: string;
                /**
                 * @description Token to be used in custom execution
                 * @example 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
                 */
                dstTokenAddress: string;
                /**
                 * @description Payment amount
                 * @example 1000000
                 */
                srcAmount: string;
                /** @description Custom execution payload */
                payload: {
                  /**
                   * @description Encoded transaction data
                   * @example 0x1234567890abcdef...
                   */
                  data: string;
                  /**
                   * @description Target contract address
                   * @example 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
                   */
                  to: string;
                  /**
                   * @description Optional spender address for token approval
                   * @example 0x58241893EF1f86C9fBd8109Cd44Ea961fDb474e1
                   */
                  spenderAddress?: string;
                  /**
                   * @description Amount for the custom operation
                   * @example 1000000
                   */
                  amount: string;
                };
                /** @description Custom metadata for display purposes */
                metadata: Record<string, never>;
                /** @description Optional partner identifier */
                partnerId?: string;
                /** @description Optional onramp configuration */
                onramp?: {
                  /**
                   * @description Onramp vendor
                   * @enum {string}
                   */
                  vendor?: "coinbase" | "stripe" | "stripe-web2";
                  /**
                   * @description Payment method for onramp
                   * @example
                   */
                  paymentMethod?: string;
                  /**
                   * @description Country code for the user
                   * @example SG
                   */
                  country?: string;
                  /**
                   * @description User's IP address
                   * @example 149.88.23.87
                   */
                  ipAddress?: string;
                  /**
                   * @description URL to redirect after payment
                   * @example https://www.anyspend.com
                   */
                  redirectUrl?: string;
                };
                /**
                 * @description Optional address of the order creator
                 * @example 0x58241893EF1f86C9fBd8109Cd44Ea961fDb474e1
                 */
                creatorAddress?: string;
              };
        };
      };
      responses: {
        /** @description Order created successfully */
        200: {
          content: {
            "application/json": {
              /** @example true */
              success?: boolean;
              /** @example Created order successfully */
              message?: string;
              /** @description Complete order object */
              data?: {
                /**
                 * Format: uuid
                 * @description Unique order identifier
                 */
                id?: string;
                /**
                 * @description Order type
                 * @enum {string}
                 */
                type?: "swap" | "custom";
                /** @description Address to receive tokens/NFT/etc */
                recipientAddress?: string;
                /** @description Global wallet address handling the order */
                globalAddress?: string;
                /** @description Source chain ID */
                srcChain?: number;
                /** @description Destination chain ID */
                dstChain?: number;
                /** @description Source token contract address */
                srcTokenAddress?: string;
                /** @description Destination token contract address */
                dstTokenAddress?: string;
                /** @description Source amount */
                srcAmount?: string;
                /**
                 * @description Current order status
                 * @example waiting_stripe_payment
                 * @enum {string}
                 */
                status?:
                  | "waiting_stripe_payment"
                  | "pending"
                  | "executed"
                  | "failed"
                  | "expired"
                  | "refunding"
                  | "refunded";
                /** @description Error details if order failed */
                errorDetails?: string | null;
                /** @description Creation timestamp */
                createdAt?: number;
                /** @description Expiration timestamp */
                expiredAt?: number;
                /** @description Order type specific payload */
                payload?: Record<string, never>;
                /** @description Display metadata */
                metadata?: Record<string, never>;
                /** @description Optional creator address */
                creatorAddress?: string | null;
                /** @description Optional partner identifier */
                partnerId?: string | null;
                /** @description Onramp configuration if used */
                onrampMetadata?: {
                  /**
                   * @description Country code
                   * @example SG
                   */
                  country?: string;
                  /**
                   * @description Onramp vendor used
                   * @example stripe-web2
                   */
                  vendor?: string;
                  /**
                   * @description Payment method used
                   * @example
                   */
                  paymentMethod?: string;
                  /**
                   * @description User's IP address
                   * @example 149.88.23.82
                   */
                  ipAddress?: string;
                  /**
                   * @description Redirect URL after payment
                   * @example https://www.anyspend.com
                   */
                  redirectUrl?: string;
                  /**
                   * @description Stripe payment amount in cents
                   * @example 500
                   */
                  stripeAmountInCents?: number;
                } | null;
                /** @description Quick purchase URL if available */
                oneClickBuyUrl?: string | null;
                /** @description Stripe payment intent ID if using Stripe */
                stripePaymentIntentId?: string | null;
              };
              /** @example 200 */
              statusCode?: number;
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            "application/json": {
              /** @example false */
              success?: boolean;
              /** @example Bad request */
              message?: string;
              /** @example 400 */
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  "/orders/{orderId}": {
    /**
     * Get order and transactions
     * @description Retrieves order details along with associated transactions
     */
    get: {
      parameters: {
        path: {
          /**
           * @description Unique order identifier
           * @example 5392f7a7-d472-4d6b-9848-bd07117fb82d
           */
          orderId: string;
        };
      };
      responses: {
        /** @description Order and transactions retrieved successfully */
        200: {
          content: {
            "application/json": {
              /** @example true */
              success?: boolean;
              /** @example Get order and transactions successfully */
              message?: string;
              data?: {
                /** @description Complete order details */
                order?: {
                  /**
                   * Format: uuid
                   * @description Unique order identifier
                   * @example 5392f7a7-d472-4d6b-9848-bd07117fb82d
                   */
                  id?: string;
                  /**
                   * @description Order type
                   * @example swap
                   * @enum {string}
                   */
                  type?: "swap" | "custom";
                  /**
                   * @description Address to receive tokens/NFT/etc
                   * @example 0xb34facb90a200251318e8841c05102366f2158cf
                   */
                  recipientAddress?: string;
                  /**
                   * @description Global wallet address handling the order
                   * @example 0xa640beaa78eeb64bb269f2baf8202b9a7316e123
                   */
                  globalAddress?: string;
                  /**
                   * @description Source chain ID
                   * @example 8453
                   */
                  srcChain?: number;
                  /**
                   * @description Destination chain ID
                   * @example 8453
                   */
                  dstChain?: number;
                  /**
                   * @description Source token contract address
                   * @example 0x833589fcd6edb6e08f4c7c32d4f71b54bda02913
                   */
                  srcTokenAddress?: string;
                  /**
                   * @description Destination token contract address
                   * @example 0x833589fcd6edb6e08f4c7c32d4f71b54bda02913
                   */
                  dstTokenAddress?: string;
                  /**
                   * @description Source amount
                   * @example 93354000
                   */
                  srcAmount?: string;
                  /**
                   * @description Current order status
                   * @example executed
                   */
                  status?: string;
                  /**
                   * @description Error details if order failed
                   * @example null
                   */
                  errorDetails?: string | null;
                  /**
                   * @description Creation timestamp
                   * @example 1752505794679
                   */
                  createdAt?: number;
                  /**
                   * @description Expiration timestamp
                   * @example 1752506694679
                   */
                  expiredAt?: number;
                  /**
                   * @description Order type specific payload
                   * @example {
                   *       "expectedDstAmount": "99000000",
                   *       "actualDstAmount": "93354000"
                   *     }
                   */
                  payload?: Record<string, never>;
                  /**
                   * @description Display metadata including token information
                   * @example {
                   *       "srcToken": {
                   *         "chainId": 8453,
                   *         "address": "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913",
                   *         "symbol": "USDC",
                   *         "name": "USD Coin",
                   *         "decimals": 6,
                   *         "metadata": {
                   *           "logoURI": "https://polygonscan.com/token/images/usdc_32.png"
                   *         }
                   *       },
                   *       "dstToken": {
                   *         "chainId": 8453,
                   *         "address": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
                   *         "symbol": "USDC",
                   *         "name": "USD Coin",
                   *         "decimals": 6,
                   *         "metadata": {
                   *           "logoURI": "https://coin-images.coingecko.com/coins/images/6319/large/usdc.png?1696506694"
                   *         }
                   *       }
                   *     }
                   */
                  metadata?: Record<string, never>;
                  /**
                   * @description Optional creator address
                   * @example 0xb34facb90a200251318e8841c05102366f2158cf
                   */
                  creatorAddress?: string | null;
                  /**
                   * @description Optional partner identifier
                   * @example null
                   */
                  partnerId?: string | null;
                  /**
                   * @description Onramp configuration if used
                   * @example {
                   *       "country": "US",
                   *       "vendor": "stripe-web2",
                   *       "paymentMethod": "",
                   *       "ipAddress": "96.225.86.216",
                   *       "redirectUrl": "https://www.anyspend.com",
                   *       "stripeAmountInCents": 9900
                   *     }
                   */
                  onrampMetadata?: Record<string, never>;
                  /**
                   * @description Quick purchase URL if available
                   * @example null
                   */
                  oneClickBuyUrl?: string | null;
                  /**
                   * @description Stripe payment intent ID if using Stripe
                   * @example pi_3Rko0sJnoDg53PsP0PDLsHkR
                   */
                  stripePaymentIntentId?: string | null;
                };
                /**
                 * @description Deposit transactions (payment from user)
                 * @example [
                 *       {
                 *         "orderId": "5392f7a7-d472-4d6b-9848-bd07117fb82d",
                 *         "chain": 8453,
                 *         "from": "0xa7539e73700B1726aBA29526606442A491Ef5747",
                 *         "txHash": "0x60ece99a645201668d20db6775a6b3d30967433ff0750b356cdad46d3e13f9c8",
                 *         "amount": "93354000",
                 *         "createdAt": 1752505811105
                 *       }
                 *     ]
                 */
                depositTxs?:
                  | {
                      /**
                       * Format: uuid
                       * @description Associated order ID
                       * @example 5392f7a7-d472-4d6b-9848-bd07117fb82d
                       */
                      orderId?: string;
                      /**
                       * @description Chain where transaction occurred
                       * @example 8453
                       */
                      chain?: number;
                      /**
                       * @description Sender address
                       * @example 0xa7539e73700B1726aBA29526606442A491Ef5747
                       */
                      from?: string;
                      /**
                       * @description Transaction hash
                       * @example 0x60ece99a645201668d20db6775a6b3d30967433ff0750b356cdad46d3e13f9c8
                       */
                      txHash?: string;
                      /**
                       * @description Transaction amount
                       * @example 93354000
                       */
                      amount?: string;
                      /**
                       * @description Transaction timestamp
                       * @example 1752505811105
                       */
                      createdAt?: number;
                    }[]
                  | null;
                /**
                 * @description Cross-chain relay transaction
                 * @example {
                 *       "orderId": "5392f7a7-d472-4d6b-9848-bd07117fb82d",
                 *       "chain": 8453,
                 *       "txHash": "0x9df917e14bb089f74763d1d2662761d75c97a5a068b8a9e411c3d384c9c40d19",
                 *       "status": "success",
                 *       "createdAt": 1752505817654
                 *     }
                 */
                relayTx?: {
                  /**
                   * Format: uuid
                   * @description Associated order ID
                   * @example 5392f7a7-d472-4d6b-9848-bd07117fb82d
                   */
                  orderId?: string;
                  /**
                   * @description Chain where relay occurred
                   * @example 8453
                   */
                  chain?: number;
                  /**
                   * @description Relay transaction hash
                   * @example 0x9df917e14bb089f74763d1d2662761d75c97a5a068b8a9e411c3d384c9c40d19
                   */
                  txHash?: string;
                  /**
                   * @description Relay transaction status
                   * @example success
                   */
                  status?: string;
                  /**
                   * @description Relay timestamp
                   * @example 1752505817654
                   */
                  createdAt?: number;
                } | null;
                /**
                 * @description Final execution transaction (NFT mint, tournament join, etc)
                 * @example null
                 */
                executeTx?: {
                  /**
                   * Format: uuid
                   * @description Associated order ID
                   */
                  orderId?: string;
                  /** @description Chain where execution occurred */
                  chain?: number;
                  /** @description Execution transaction hash */
                  txHash?: string;
                  /** @description Execution timestamp */
                  createdAt?: number;
                } | null;
                /**
                 * @description Refund transactions if order failed
                 * @example null
                 */
                refundTxs?:
                  | {
                      /**
                       * Format: uuid
                       * @description Associated order ID
                       */
                      orderId?: string;
                      /** @description Chain where refund occurred */
                      chain?: number;
                      /** @description Refund transaction hash */
                      txHash?: string;
                      /** @description Refunded amount */
                      amount?: string;
                      /** @description Refund status */
                      status?: string;
                      /** @description Refund timestamp */
                      createdAt?: number;
                    }[]
                  | null;
              };
              /** @example 200 */
              statusCode?: number;
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            "application/json": {
              /** @example false */
              success?: boolean;
              /** @example Bad request */
              message?: string;
              /** @example 400 */
              statusCode?: number;
            };
          };
        };
        /** @description Order not found */
        404: {
          content: {
            "application/json": {
              /** @example false */
              success?: boolean;
              /** @example Order not found */
              message?: string;
              /** @example 404 */
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  "/orders/quote": {
    /**
     * Get anyspend quote
     * @description Retrieves a quote for cross-chain token relay
     */
    post: {
      requestBody: {
        content: {
          "application/json":
            | {
                /**
                 * @description Order type for swap
                 * @enum {string}
                 */
                type: "swap";
                /**
                 * @description Source chain ID
                 * @example 1
                 */
                srcChain: number;
                /**
                 * @description Destination chain ID
                 * @example 8453
                 */
                dstChain: number;
                /**
                 * @description Source token contract address
                 * @example 0x0000000000000000000000000000000000000000
                 */
                srcTokenAddress: string;
                /**
                 * @description Destination token contract address
                 * @example 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
                 */
                dstTokenAddress: string;
                /**
                 * @description Type of trade execution
                 * @enum {string}
                 */
                tradeType: "EXACT_INPUT" | "EXPECTED_OUTPUT" | "EXACT_OUTPUT";
                /**
                 * @description Amount to quote
                 * @example 1000000000000000000
                 */
                amount: string;
                /**
                 * @description Optional onramp vendor
                 * @enum {string}
                 */
                onrampVendor?: "coinbase" | "stripe" | "stripe-web2";
              }
            | {
                /**
                 * @description Order type for custom execution
                 * @enum {string}
                 */
                type: "custom";
                /**
                 * @description Source chain ID
                 * @example 1
                 */
                srcChain: number;
                /**
                 * @description Destination chain ID
                 * @example 8453
                 */
                dstChain: number;
                /**
                 * @description Source token contract address
                 * @example 0x0000000000000000000000000000000000000000
                 */
                srcTokenAddress: string;
                /**
                 * @description Destination token contract address
                 * @example 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
                 */
                dstTokenAddress: string;
                /** @description Custom payload for execution */
                payload: {
                  /** @description Encoded transaction data */
                  data: string;
                  /** @description Target contract address */
                  to: string;
                  /** @description Optional spender address for token approval */
                  spenderAddress?: string;
                  /** @description Amount for the custom operation */
                  amount: string;
                };
                /**
                 * @description Optional onramp vendor
                 * @enum {string}
                 */
                onrampVendor?: "coinbase" | "stripe" | "stripe-web2";
              };
        };
      };
      responses: {
        /** @description Quote retrieved successfully */
        200: {
          content: {
            "application/json": {
              /** @example true */
              success?: boolean;
              /** @example Get quote successfully */
              message?: string;
              data?: {
                /**
                 * @description Type of operation
                 * @example swap
                 */
                operation?: string;
                /**
                 * @description Sender address for the operation
                 * @example 0x15846E6A7C839A208765a0B4754C2dd15E879990
                 */
                sender?: string;
                /**
                 * @description Recipient address for the operation
                 * @example 0xaF1ae1B78bc767DaEBB91196Adf982E9d560AAB9
                 */
                recipient?: string;
                /** @description Input currency details */
                currencyIn?: {
                  currency?: {
                    /** @example 1 */
                    chainId?: number;
                    /** @example 0x0000000000000000000000000000000000000000 */
                    address?: string;
                    /** @example ETH */
                    symbol?: string;
                    /** @example Ether */
                    name?: string;
                    /** @example 18 */
                    decimals?: number;
                    metadata?: {
                      /** @example https://assets.relay.link/icons/1/light.png */
                      logoURI?: string;
                      /** @example true */
                      verified?: boolean;
                    };
                  };
                  /**
                   * @description Raw amount
                   * @example 1000000000000000000
                   */
                  amount?: string;
                  /**
                   * @description Human-readable formatted amount
                   * @example 1.0
                   */
                  amountFormatted?: string;
                  /**
                   * @description USD value of the amount
                   * @example 3229.715818
                   */
                  amountUsd?: string;
                  /**
                   * @description Minimum required amount
                   * @example 1000000000000000000
                   */
                  minimumAmount?: string;
                };
                /** @description Output currency details */
                currencyOut?: {
                  currency?: {
                    /** @example 8453 */
                    chainId?: number;
                    /** @example 0x833589fcd6edb6e08f4c7c32d4f71b54bda02913 */
                    address?: string;
                    /** @example USDC */
                    symbol?: string;
                    /** @example USD Coin */
                    name?: string;
                    /** @example 6 */
                    decimals?: number;
                    metadata?: {
                      /** @example https://coin-images.coingecko.com/coins/images/6319/large/usdc.png?1696506694 */
                      logoURI?: string;
                      /** @example true */
                      verified?: boolean;
                    };
                  };
                  /**
                   * @description Raw output amount
                   * @example 3224805862
                   */
                  amount?: string;
                  /**
                   * @description Human-readable formatted output amount
                   * @example 3224.805862
                   */
                  amountFormatted?: string;
                  /**
                   * @description USD value of output amount
                   * @example 3224.512405
                   */
                  amountUsd?: string;
                  /**
                   * @description Minimum guaranteed output amount
                   * @example 3192557803
                   */
                  minimumAmount?: string;
                };
                /** @description Total price impact of the trade */
                totalImpact?: {
                  /**
                   * @description USD impact amount
                   * @example -5.203413
                   */
                  usd?: string;
                  /**
                   * @description Percentage impact
                   * @example -0.16
                   */
                  percent?: string;
                };
                /** @description Price impact from the swap portion */
                swapImpact?: {
                  /**
                   * @description USD swap impact
                   * @example -4.102797
                   */
                  usd?: string;
                  /**
                   * @description Percentage swap impact
                   * @example -0.13
                   */
                  percent?: string;
                };
                /**
                 * @description Exchange rate
                 * @example 3224.805862
                 */
                rate?: string;
                /** @description Slippage tolerance settings */
                slippageTolerance?: {
                  origin?: {
                    /** @example 0.000000 */
                    usd?: string;
                    /** @example 0 */
                    value?: string;
                    /** @example 0.00 */
                    percent?: string;
                  };
                  destination?: {
                    /** @example 32.245124 */
                    usd?: string;
                    /** @example 32248059 */
                    value?: string;
                    /** @example 1.00 */
                    percent?: string;
                  };
                };
                /**
                 * @description Estimated completion time in seconds
                 * @example 24
                 */
                timeEstimate?: number;
                /**
                 * @description User's current balance
                 * @example 0
                 */
                userBalance?: string;
              };
              /** @example 200 */
              statusCode?: number;
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            "application/json": {
              /** @example false */
              success?: boolean;
              /** @example Bad request */
              message?: string;
              /** @example 400 */
              statusCode?: number;
            };
          };
        };
      };
    };
  };
  "/stripe/clientSecret": {
    /**
     * Get Stripe client secret
     * @description Retrieves a Stripe client secret for payment processing using a payment intent ID
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Stripe payment intent ID to retrieve client secret for
           * @example pi_3RlHbVJnoDg53PsP1349cXlR
           */
          paymentIntentId: string;
        };
      };
      responses: {
        /** @description Client secret retrieved successfully */
        200: {
          content: {
            "application/json": {
              /** @example true */
              success?: boolean;
              /** @example Client secret retrieved */
              message?: string;
              /**
               * @description Stripe client secret for the payment intent
               * @example pi_3RlHbVJnoDg53PsP1349cXlR_secret_084W7pxxba11lTUHWbmeZlXi0
               */
              data?: string;
              /** @example 200 */
              statusCode?: number;
            };
          };
        };
        /** @description Bad request - PaymentIntentId is required or invalid */
        400: {
          content: {
            "application/json": {
              /** @example false */
              success?: boolean;
              /** @example PaymentIntentId is required */
              message?: string;
              /** @example 400 */
              statusCode?: number;
            };
          };
        };
      };
    };
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: never;
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
