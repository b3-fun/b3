/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/chains/{chainId}/tokens": {
    /**
     * Get tokens for a chain
     * @description Retrieves available tokens for a specific blockchain
     */
    get: {
      parameters: {
        query?: {
          /**
           * @description Search term to filter tokens
           * @example USDC
           */
          term?: string;
          /** @description Maximum number of tokens to return */
          limit?: number;
        };
        path: {
          /**
           * @description Blockchain chain ID
           * @example 1
           */
          chainId: number;
        };
      };
      responses: {
        /** @description Tokens retrieved successfully */
        200: {
          content: {
            "application/json": {
              /** @example true */
              success: boolean;
              /** @example Tokens retrieved successfully */
              message: string;
              /** @description Array of tokens */
              data: {
                /** @description Chain ID */
                chainId: number;
                /** @description Token contract address */
                address: string;
                /** @description Token symbol */
                symbol: string;
                /** @description Token name */
                name: string;
                /** @description Token decimals */
                decimals: number;
                metadata: {
                  /** @description Token logo URI */
                  logoURI?: string;
                };
              }[];
              /** @example 200 */
              statusCode: number;
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            "application/json": {
              /** @example false */
              success: boolean;
              /** @example Bad request */
              message: string;
              /** @example 400 */
              statusCode: number;
            };
          };
        };
      };
    };
  };
  "/onramp/coinbase/options": {
    /**
     * Get Coinbase onramp options
     * @description Retrieves available Coinbase onramp configuration options.
     *
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Country code for onramp options
           * @example US
           */
          country: string;
          /**
           * @description Optional subdivision (state/province) code
           * @example CA
           */
          subdivision?: string;
          /**
           * @description Optional payment method filter
           * @example USD
           */
          payment_method?: string;
          /**
           * @description Optional array of chain IDs to filter by
           * @example [
           *       "1",
           *       "8453"
           *     ]
           */
          chainIds?: string[];
        };
      };
      responses: {
        /** @description Coinbase options retrieved successfully */
        200: {
          content: {
            "application/json": {
              /** @example true */
              success: boolean;
              /** @example Coinbase options retrieved successfully */
              message: string;
              data: {
                /** @description Available payment currencies */
                paymentCurrencies: {
                  /**
                   * @description Payment currency identifier
                   * @example USD
                   */
                  id?: string;
                  /** @description Payment limits for this currency */
                  limits?: {
                    /**
                     * @description Payment method identifier
                     * @example CARD
                     */
                    id?: string;
                    /**
                     * @description Minimum payment amount
                     * @example 2
                     */
                    min?: string;
                    /**
                     * @description Maximum payment amount
                     * @example 7500
                     */
                    max?: string;
                  }[];
                }[];
                /** @description Available purchase currencies */
                purchaseCurrencies: {
                  /**
                   * @description Currency identifier (UUID)
                   * @example 2b92315d-eab7-5bef-84fa-089a131333f5
                   */
                  id: string;
                  /**
                   * @description Currency full name
                   * @example USD Coin
                   */
                  name: string;
                  /**
                   * @description Currency symbol
                   * @example USDC
                   */
                  symbol: string;
                  /**
                   * @description Currency icon URL
                   * @example https://dynamic-assets.coinbase.com/3c15df5e2ac7d4abbe9499ed9335041f00c620f28e8de2f93474a9f432058742cdf4674bd43f309e69778a26969dbc009429d4bd59cc5b85b2c6c8a6dc0b57f1/asset_icons/80422be4be5aa1bb4deb72d9f0e9d0f33e05ce6b8fb7c24bb9e14e4adacdf20c.png
                   */
                  iconUrl: string;
                  /** @description Available networks for this currency */
                  networks: {
                    /**
                     * @description Network name
                     * @example ethereum
                     */
                    name: string;
                    /**
                     * @description Network display name
                     * @example Ethereum
                     */
                    displayName: string;
                    /**
                     * @description Token contract address on this network
                     * @example 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48
                     */
                    contractAddress: string;
                    /**
                     * @description Chain ID for this network
                     * @example 1
                     */
                    chainId: string;
                    /**
                     * @description Network display name (snake_case version)
                     * @example Ethereum
                     */
                    display_name: string;
                    /**
                     * @description Token contract address (snake_case version)
                     * @example 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48
                     */
                    contract_address: string;
                    /**
                     * @description Chain ID (snake_case version)
                     * @example 1
                     */
                    chain_id: string;
                  }[];
                }[];
              };
              /** @example 200 */
              statusCode: number;
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            "application/json": {
              /** @example false */
              success: boolean;
              /** @example Bad request */
              message: string;
              /** @example 400 */
              statusCode: number;
            };
          };
        };
      };
    };
  };
  "/onramp/stripe/supported": {
    /**
     * Check Stripe support
     * @description Checks if Stripe onramp and Stripe Web2 are supported based on IP address location and optional transaction amount
     */
    get: {
      parameters: {
        query?: {
          /**
           * @description Optional USD amount for transaction limit checks
           * @example 100.00
           */
          usdAmount?: string;
        };
      };
      responses: {
        /** @description Stripe support status retrieved successfully */
        200: {
          content: {
            "application/json": {
              /** @example true */
              success: boolean;
              /** @example Stripe support status retrieved successfully */
              message: string;
              data: {
                /**
                 * @description Whether Stripe onramp is supported for this location/amount
                 * @example true
                 */
                stripeOnramp: boolean;
                /** @description Stripe Web2 support details */
                stripeWeb2: components["schemas"]["StripeWeb2Support"];
              };
              /** @example 200 */
              statusCode: number;
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            "application/json": {
              /** @example false */
              success: boolean;
              /** @example Bad request */
              message: string;
              /** @example 400 */
              statusCode: number;
            };
          };
        };
      };
    };
  };
  "/orders": {
    /**
     * Get orders by creator
     * @description Retrieves all orders created by a specific address
     */
    get: {
      parameters: {
        query?: {
          /**
           * @description Optional address of the order creator (if not provided, returns all orders)
           * @example 0x58241893EF1f86C9fBd8109Cd44Ea961fDb474e1
           */
          creatorAddress?: string;
          /**
           * @description Maximum number of orders to return
           * @example 20
           */
          limit?: string;
          /**
           * @description Number of orders to skip
           * @example 0
           */
          offset?: string;
        };
      };
      responses: {
        /** @description Orders retrieved successfully */
        200: {
          content: {
            "application/json": {
              /** @example true */
              success: boolean;
              /** @example Get orders by creator successfully */
              message: string;
              /** @description Array of orders */
              data: components["schemas"]["Order"][];
              /** @example 200 */
              statusCode: number;
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            "application/json": {
              /** @example false */
              success: boolean;
              /** @example Bad request */
              message: string;
              /** @example 400 */
              statusCode: number;
            };
          };
        };
      };
    };
    /**
     * Create a new order
     * @description Creates a new order for token transactions across chains
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["OrderRequest"];
        };
      };
      responses: {
        /** @description Order created successfully */
        200: {
          content: {
            "application/json": {
              /** @example true */
              success: boolean;
              /** @example Created order successfully */
              message: string;
              data: components["schemas"]["Order"];
              /** @example 200 */
              statusCode: number;
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            "application/json": {
              /** @example false */
              success: boolean;
              /** @example Bad request */
              message: string;
              /** @example 400 */
              statusCode: number;
            };
          };
        };
      };
    };
  };
  "/orders/{orderId}": {
    /**
     * Get order and transactions
     * @description Retrieves order details along with associated transactions
     */
    get: {
      parameters: {
        path: {
          /**
           * @description Unique order identifier
           * @example 5392f7a7-d472-4d6b-9848-bd07117fb82d
           */
          orderId: string;
        };
      };
      responses: {
        /** @description Order and transactions retrieved successfully */
        200: {
          content: {
            "application/json": {
              /** @example true */
              success: boolean;
              /** @example Get order and transactions successfully */
              message: string;
              data: {
                order: components["schemas"]["Order"];
                /**
                 * @description Deposit transactions (payment from user)
                 * @example [
                 *       {
                 *         "orderId": "5392f7a7-d472-4d6b-9848-bd07117fb82d",
                 *         "chain": 8453,
                 *         "from": "0xa7539e73700B1726aBA29526606442A491Ef5747",
                 *         "txHash": "0x60ece99a645201668d20db6775a6b3d30967433ff0750b356cdad46d3e13f9c8",
                 *         "amount": "93354000",
                 *         "createdAt": 1752505811105
                 *       }
                 *     ]
                 */
                depositTxs: components["schemas"]["DepositTx"][] | null;
                /** @example {
                 *       "orderId": "5392f7a7-d472-4d6b-9848-bd07117fb82d",
                 *       "chain": 8453,
                 *       "txHash": "0x9df917e14bb089f74763d1d2662761d75c97a5a068b8a9e411c3d384c9c40d19",
                 *       "status": "success",
                 *       "createdAt": 1752505817654
                 *     } */
                relayTx: components["schemas"]["RelayTx"] | null;
                executeTx: components["schemas"]["ExecuteTx"] | null;
                /** @description Refund transactions if order failed */
                refundTxs: components["schemas"]["RefundTx"][] | null;
              };
              /** @example 200 */
              statusCode: number;
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            "application/json": {
              /** @example false */
              success: boolean;
              /** @example Bad request */
              message: string;
              /** @example 400 */
              statusCode: number;
            };
          };
        };
        /** @description Order not found */
        404: {
          content: {
            "application/json": {
              /** @example false */
              success: boolean;
              /** @example Order not found */
              message: string;
              /** @example 404 */
              statusCode: number;
            };
          };
        };
      };
    };
  };
  "/orders/quote": {
    /**
     * Get anyspend quote
     * @description Retrieves a quote to swap or execute contract
     */
    post: {
      requestBody: {
        content: {
          "application/json":
            | {
                /**
                 * @description Order type for swap
                 * @enum {string}
                 */
                type: "swap";
                /**
                 * @description Source chain ID
                 * @example 1
                 */
                srcChain: number;
                /**
                 * @description Destination chain ID
                 * @example 8453
                 */
                dstChain: number;
                /**
                 * @description Source token contract address
                 * @example 0x0000000000000000000000000000000000000000
                 */
                srcTokenAddress: string;
                /**
                 * @description Destination token contract address
                 * @example 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
                 */
                dstTokenAddress: string;
                /**
                 * @description Type of trade execution
                 * @enum {string}
                 */
                tradeType: "EXACT_INPUT" | "EXPECTED_OUTPUT" | "EXACT_OUTPUT";
                /**
                 * @description Amount to quote
                 * @example 1000000000000000000
                 */
                amount: string;
                /**
                 * @description Optional onramp vendor
                 * @enum {string}
                 */
                onrampVendor?: "coinbase" | "stripe" | "stripe-web2";
              }
            | {
                /**
                 * @description Order type for custom execution
                 * @enum {string}
                 */
                type: "custom";
                /**
                 * @description Source chain ID
                 * @example 1
                 */
                srcChain: number;
                /**
                 * @description Destination chain ID
                 * @example 8453
                 */
                dstChain: number;
                /**
                 * @description Source token contract address
                 * @example 0x0000000000000000000000000000000000000000
                 */
                srcTokenAddress: string;
                /**
                 * @description Destination token contract address
                 * @example 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
                 */
                dstTokenAddress: string;
                /** @description Custom payload for execution */
                payload: {
                  /** @description Encoded transaction data */
                  data: string;
                  /** @description Target contract address */
                  to: string;
                  /** @description Optional spender address for token approval */
                  spenderAddress?: string;
                  /** @description Amount for the custom operation */
                  amount: string;
                };
                /**
                 * @description Optional onramp vendor
                 * @enum {string}
                 */
                onrampVendor?: "coinbase" | "stripe" | "stripe-web2";
              }
            | {
                /** @enum {string} */
                type: "mint_nft";
                srcChain: number;
                dstChain: number;
                srcTokenAddress: string;
                dstTokenAddress: string;
                /** @enum {string} */
                onrampVendor?: "coinbase" | "stripe" | "stripe-web2";
                contractAddress: string;
                tokenId?: number | null;
                /** @enum {string} */
                contractType: "erc721" | "erc1155";
                price: string;
              }
            | {
                /** @enum {string} */
                type: "join_tournament";
                srcChain: number;
                dstChain: number;
                srcTokenAddress: string;
                dstTokenAddress: string;
                /** @enum {string} */
                onrampVendor?: "coinbase" | "stripe" | "stripe-web2";
                contractAddress: string;
                price: string;
              }
            | {
                /** @enum {string} */
                type: "fund_tournament";
                srcChain: number;
                dstChain: number;
                srcTokenAddress: string;
                dstTokenAddress: string;
                /** @enum {string} */
                onrampVendor?: "coinbase" | "stripe" | "stripe-web2";
                contractAddress: string;
                fundAmount: string;
              };
        };
      };
      responses: {
        /** @description Quote retrieved successfully */
        200: {
          content: {
            "application/json": {
              /** @example true */
              success: boolean;
              /** @example Get quote successfully */
              message: string;
              data: {
                /**
                 * @description Type of operation
                 * @example swap
                 */
                operation?: string;
                /**
                 * @description Sender address for the operation
                 * @example 0x15846E6A7C839A208765a0B4754C2dd15E879990
                 */
                sender?: string;
                /**
                 * @description Recipient address for the operation
                 * @example 0xaF1ae1B78bc767DaEBB91196Adf982E9d560AAB9
                 */
                recipient?: string;
                /** @description Input currency details */
                currencyIn?: {
                  currency?: {
                    /** @example 1 */
                    chainId?: number;
                    /** @example 0x0000000000000000000000000000000000000000 */
                    address?: string;
                    /** @example ETH */
                    symbol?: string;
                    /** @example Ether */
                    name?: string;
                    /** @example 18 */
                    decimals?: number;
                    metadata?: {
                      /** @example https://assets.relay.link/icons/1/light.png */
                      logoURI?: string;
                    };
                  };
                  /**
                   * @description Raw amount
                   * @example 1000000000000000000
                   */
                  amount?: string;
                  /**
                   * @description Human-readable formatted amount
                   * @example 1.0
                   */
                  amountFormatted?: string;
                  /**
                   * @description USD value of the amount
                   * @example 3229.715818
                   */
                  amountUsd?: string;
                  /**
                   * @description Minimum required amount
                   * @example 1000000000000000000
                   */
                  minimumAmount?: string;
                };
                /** @description Output currency details */
                currencyOut?: {
                  currency?: {
                    /** @example 8453 */
                    chainId?: number;
                    /** @example 0x833589fcd6edb6e08f4c7c32d4f71b54bda02913 */
                    address?: string;
                    /** @example USDC */
                    symbol?: string;
                    /** @example USD Coin */
                    name?: string;
                    /** @example 6 */
                    decimals?: number;
                    metadata?: {
                      /** @example https://coin-images.coingecko.com/coins/images/6319/large/usdc.png?1696506694 */
                      logoURI?: string;
                    };
                  };
                  /**
                   * @description Raw output amount
                   * @example 3224805862
                   */
                  amount?: string;
                  /**
                   * @description Human-readable formatted output amount
                   * @example 3224.805862
                   */
                  amountFormatted?: string;
                  /**
                   * @description USD value of output amount
                   * @example 3224.512405
                   */
                  amountUsd?: string;
                  /**
                   * @description Minimum guaranteed output amount
                   * @example 3192557803
                   */
                  minimumAmount?: string;
                };
                /** @description Total price impact of the trade */
                totalImpact?: {
                  /**
                   * @description USD impact amount
                   * @example -5.203413
                   */
                  usd?: string;
                  /**
                   * @description Percentage impact
                   * @example -0.16
                   */
                  percent?: string;
                };
                /** @description Price impact from the swap portion */
                swapImpact?: {
                  /**
                   * @description USD swap impact
                   * @example -4.102797
                   */
                  usd?: string;
                  /**
                   * @description Percentage swap impact
                   * @example -0.13
                   */
                  percent?: string;
                };
                /**
                 * @description Exchange rate
                 * @example 3224.805862
                 */
                rate?: string;
                /** @description Slippage tolerance settings */
                slippageTolerance?: {
                  origin?: {
                    /** @example 0.000000 */
                    usd?: string;
                    /** @example 0 */
                    value?: string;
                    /** @example 0.00 */
                    percent?: string;
                  };
                  destination?: {
                    /** @example 32.245124 */
                    usd?: string;
                    /** @example 32248059 */
                    value?: string;
                    /** @example 1.00 */
                    percent?: string;
                  };
                };
                /**
                 * @description Estimated completion time in seconds
                 * @example 24
                 */
                timeEstimate?: number;
                /**
                 * @description User's current balance
                 * @example 0
                 */
                userBalance?: string;
              };
              /** @example 200 */
              statusCode: number;
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            "application/json": {
              /** @example false */
              success: boolean;
              /** @example Bad request */
              message: string;
              /** @example 400 */
              statusCode: number;
            };
          };
        };
      };
    };
  };
  "/stripe/clientSecret": {
    /**
     * Get Stripe client secret
     * @description Retrieves a Stripe client secret for payment processing using a payment intent ID
     */
    get: {
      parameters: {
        query: {
          /**
           * @description Stripe payment intent ID to retrieve client secret for
           * @example pi_3RlHbVJnoDg53PsP1349cXlR
           */
          paymentIntentId: string;
        };
      };
      responses: {
        /** @description Client secret retrieved successfully */
        200: {
          content: {
            "application/json": {
              /** @example true */
              success: boolean;
              /** @example Client secret retrieved */
              message: string;
              /**
               * @description Stripe client secret for the payment intent
               * @example pi_3RlHbVJnoDg53PsP1349cXlR_secret_084W7pxxba11lTUHWbmeZlXi0
               */
              data: string;
              /** @example 200 */
              statusCode: number;
            };
          };
        };
        /** @description Bad request - PaymentIntentId is required or invalid */
        400: {
          content: {
            "application/json": {
              /** @example false */
              success: boolean;
              /** @example PaymentIntentId is required */
              message: string;
              /** @example 400 */
              statusCode: number;
            };
          };
        };
      };
    };
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @description Token details */
    Token: {
      /**
       * @description Token chain ID
       * @example 8453
       */
      chainId: number;
      /**
       * @description Token contract address
       * @example 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
       */
      address: string;
      /**
       * @description Token symbol
       * @example USDC
       */
      symbol: string;
      /**
       * @description Token name
       * @example USD Coin
       */
      name: string;
      /**
       * @description Token decimals
       * @example 6
       */
      decimals: number;
      metadata: {
        /**
         * @description Token logo URI
         * @example https://polygonscan.com/token/images/usdc_32.png
         */
        logoURI?: string;
      };
    };
    /** @description Onramp configuration */
    OnrampMetadata: {
      /**
       * @description Country code
       * @example US
       */
      country: string;
      /**
       * @description Onramp vendor used
       * @example stripe-web2
       * @enum {string}
       */
      vendor: "coinbase" | "stripe" | "stripe-web2";
      /**
       * @description Payment method used
       * @example
       */
      paymentMethod: string;
      /**
       * @description Redirect URL after payment
       * @example https://www.anyspend.com
       */
      redirectUrl: string;
      /**
       * @description Stripe payment amount in cents
       * @example 9900
       */
      stripeAmountInCents?: number;
      /**
       * Format: ipv4
       * @description Optional IP address for location detection
       * @example 192.168.1.1
       */
      ipAddress?: string;
      /** @description Optional fingerprint data for fraud detection */
      fingerprint?: {
        /**
         * @description Fingerprint request ID
         * @example fp_req_12345
         */
        requestId: string;
        /**
         * @description Fingerprint visitor ID
         * @example fp_visitor_67890
         */
        visitorId: string;
      };
    };
    /** @description Optional onramp configuration */
    Onramp: {
      /**
       * @description Onramp vendor
       * @enum {string}
       */
      vendor?: "coinbase" | "stripe" | "stripe-web2";
      /**
       * @description Payment method for onramp
       * @example
       */
      paymentMethod?: string;
      /**
       * @description Country code for the user
       * @example SG
       */
      country?: string;
      /**
       * @description URL to redirect after payment
       * @example https://www.anyspend.com
       */
      redirectUrl?: string;
    };
    /** @description Tournament details */
    Tournament: {
      /**
       * @description Tournament slug identifier
       * @example summer-championship-2024
       */
      slug: string;
      /**
       * @description Tournament name
       * @example Summer Championship 2024
       */
      name: string;
      /**
       * @description Tournament description
       * @example The biggest tournament of the summer
       */
      description: string;
      /**
       * @description Tournament image URL
       * @example https://example.com/tournament.png
       */
      imageUrl: string;
    };
    /** @description ERC721 NFT */
    ERC721NFT: {
      /**
       * @description NFT type
       * @enum {string}
       */
      type: "erc721";
      /**
       * @description NFT contract address
       * @example 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
       */
      contractAddress: string;
      /**
       * @description NFT name
       * @example Cool NFT
       */
      name: string;
      /**
       * @description NFT description
       * @example A very cool NFT
       */
      description: string;
      /**
       * @description NFT image URL
       * @example https://example.com/nft.png
       */
      imageUrl: string;
    };
    /** @description ERC1155 NFT */
    ERC1155NFT: {
      /**
       * @description NFT type
       * @enum {string}
       */
      type: "erc1155";
      /**
       * @description NFT contract address
       * @example 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
       */
      contractAddress: string;
      /**
       * @description NFT name
       * @example Cool NFT
       */
      name: string;
      /**
       * @description NFT description
       * @example A very cool NFT
       */
      description: string;
      /**
       * @description NFT image URL
       * @example https://example.com/nft.png
       */
      imageUrl: string;
      /**
       * @description Token ID for ERC1155
       * @example 1
       */
      tokenId: number;
    };
    NFT: components["schemas"]["ERC721NFT"] | components["schemas"]["ERC1155NFT"];
    /** @description Swap-specific payload */
    SwapPayload: {
      /**
       * @description Expected amount of destination tokens
       * @example 990000
       */
      expectedDstAmount: string;
      /**
       * @description Actual received amount (null for new orders)
       * @example 990000
       */
      actualDstAmount: string | null;
    };
    /** @description Custom execution payload */
    CustomPayload: {
      /**
       * @description Encoded transaction data
       * @example 0x1234567890abcdef...
       */
      data: string;
      /**
       * @description Target contract address
       * @example 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
       */
      to: string;
      /**
       * @description Optional spender address for token approval
       * @example 0x58241893EF1f86C9fBd8109Cd44Ea961fDb474e1
       */
      spenderAddress?: string;
      /**
       * @description Amount for the custom operation
       * @example 1000000
       */
      amount: string;
    };
    /** @description NFT minting payload */
    MintNftPayload: {
      /**
       * @description NFT contract address
       * @example 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
       */
      contractAddress: string;
      /**
       * @description Token ID (for ERC1155, null for ERC721)
       * @example 1
       */
      tokenId: number | null;
      /**
       * @description Type of NFT contract
       * @example erc721
       * @enum {string}
       */
      contractType: "erc721" | "erc1155";
      /**
       * @description Price to mint the NFT
       * @example 1000000
       */
      nftPrice: string;
    };
    /** @description Tournament joining payload */
    JoinTournamentPayload: {
      /**
       * @description Tournament contract address
       * @example 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
       */
      contractAddress: string;
      /**
       * @description Tournament entry price
       * @example 1000000
       */
      entryPrice: string;
    };
    /** @description Tournament funding payload */
    FundTournamentPayload: {
      /**
       * @description Tournament contract address
       * @example 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
       */
      contractAddress: string;
      /**
       * @description Amount to fund the tournament
       * @example 1000000
       */
      fundAmount: string;
    };
    /** @description Swap metadata for display purposes */
    SwapMetadata: {
      srcToken: components["schemas"]["Token"];
      dstToken: components["schemas"]["Token"];
    };
    /** @description Custom metadata for display purposes */
    CustomMetadata: {
      srcToken: components["schemas"]["Token"];
      dstToken: components["schemas"]["Token"];
      /**
       * @description Optional custom action identifier
       * @example claim-reward
       */
      action?: string;
    };
    /** @description NFT metadata */
    MintNftMetadata: {
      srcToken: components["schemas"]["Token"];
      dstToken: components["schemas"]["Token"];
      nft: components["schemas"]["NFT"];
    };
    /** @description Tournament metadata */
    TournamentMetadata: {
      srcToken: components["schemas"]["Token"];
      dstToken: components["schemas"]["Token"];
      tournament: components["schemas"]["Tournament"];
    };
    /** @description Base order fields */
    BaseOrder: {
      /**
       * Format: uuid
       * @description Unique order identifier
       * @example 5392f7a7-d472-4d6b-9848-bd07117fb82d
       */
      id: string;
      /**
       * @description Address to receive tokens/NFT/etc
       * @example 0xb34facb90a200251318e8841c05102366f2158cf
       */
      recipientAddress: string;
      /**
       * @description Global wallet address handling the order
       * @example 0xa640beaa78eeb64bb269f2baf8202b9a7316e123
       */
      globalAddress: string;
      /**
       * @description Source chain ID
       * @example 8453
       */
      srcChain: number;
      /**
       * @description Destination chain ID
       * @example 8453
       */
      dstChain: number;
      /**
       * @description Source token contract address
       * @example 0x833589fcd6edb6e08f4c7c32d4f71b54bda02913
       */
      srcTokenAddress: string;
      /**
       * @description Destination token contract address
       * @example 0x833589fcd6edb6e08f4c7c32d4f71b54bda02913
       */
      dstTokenAddress: string;
      /**
       * @description Source amount
       * @example 93354000
       */
      srcAmount: string;
      /**
       * @description Current order status
       * @example executed
       * @enum {string}
       */
      status:
        | "scanning_deposit_transaction"
        | "waiting_stripe_payment"
        | "expired"
        | "sending_token_from_vault"
        | "relay"
        | "executed"
        | "refunding"
        | "refunded"
        | "failure";
      /** @description Error details if order failed */
      errorDetails: string | null;
      /**
       * @description Creation timestamp
       * @example 1752505794679
       */
      createdAt: number;
      /**
       * @description Expiration timestamp
       * @example 1752506694679
       */
      expiredAt: number;
      /**
       * @description Optional creator address
       * @example 0xb34facb90a200251318e8841c05102366f2158cf
       */
      creatorAddress: string | null;
      /** @description Optional partner identifier */
      partnerId: string | null;
      /** @description Onramp configuration if used */
      onrampMetadata: components["schemas"]["OnrampMetadata"] | null;
      /** @description Quick purchase URL if available */
      oneClickBuyUrl: string | null;
      /**
       * @description Stripe payment intent ID if using Stripe
       * @example pi_3Rko0sJnoDg53PsP0PDLsHkR
       */
      stripePaymentIntentId: string | null;
    };
    SwapOrder: components["schemas"]["BaseOrder"] & {
      /**
       * @description Order type
       * @enum {string}
       */
      type: "swap";
      payload: components["schemas"]["SwapPayload"];
      metadata: components["schemas"]["SwapMetadata"];
    };
    CustomOrder: components["schemas"]["BaseOrder"] & {
      /**
       * @description Order type
       * @enum {string}
       */
      type: "custom";
      payload: components["schemas"]["CustomPayload"];
      metadata: components["schemas"]["CustomMetadata"];
    };
    MintNftOrder: components["schemas"]["BaseOrder"] & {
      /**
       * @description Order type
       * @enum {string}
       */
      type: "mint_nft";
      payload: components["schemas"]["MintNftPayload"];
      metadata: components["schemas"]["MintNftMetadata"];
    };
    JoinTournamentOrder: components["schemas"]["BaseOrder"] & {
      /**
       * @description Order type
       * @enum {string}
       */
      type: "join_tournament";
      payload: components["schemas"]["JoinTournamentPayload"];
      metadata: components["schemas"]["TournamentMetadata"];
    };
    FundTournamentOrder: components["schemas"]["BaseOrder"] & {
      /**
       * @description Order type
       * @enum {string}
       */
      type: "fund_tournament";
      payload: components["schemas"]["FundTournamentPayload"];
      metadata: components["schemas"]["TournamentMetadata"];
    };
    Order:
      | components["schemas"]["SwapOrder"]
      | components["schemas"]["CustomOrder"]
      | components["schemas"]["MintNftOrder"]
      | components["schemas"]["JoinTournamentOrder"]
      | components["schemas"]["FundTournamentOrder"];
    /** @description Swap order request */
    SwapOrderRequest: {
      /**
       * @description Order type
       * @enum {string}
       */
      type: "swap";
      /**
       * @description Address to receive the destination tokens
       * @example 0x58241893EF1f86C9fBd8109Cd44Ea961fDb474e1
       */
      recipientAddress: string;
      /**
       * @description Source chain ID
       * @example 1
       */
      srcChain: number;
      /**
       * @description Destination chain ID
       * @example 8453
       */
      dstChain: number;
      /**
       * @description Source token contract address
       * @example 0xA0b86a33E6441E8A91DEF8f5663ACb4C9B4a1234
       */
      srcTokenAddress: string;
      /**
       * @description Destination token contract address
       * @example 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
       */
      dstTokenAddress: string;
      /**
       * @description Amount of source tokens to swap
       * @example 1000000
       */
      srcAmount: string;
      payload: components["schemas"]["SwapPayload"];
      metadata: components["schemas"]["SwapMetadata"];
      /** @description Optional partner identifier */
      partnerId?: string;
      onramp?: components["schemas"]["Onramp"];
      /**
       * @description Optional address of the order creator
       * @example 0x58241893EF1f86C9fBd8109Cd44Ea961fDb474e1
       */
      creatorAddress?: string;
    };
    /** @description Custom order request */
    CustomOrderRequest: {
      /**
       * @description Order type
       * @enum {string}
       */
      type: "custom";
      /**
       * @description Address to receive any tokens or execute transaction
       * @example 0x58241893EF1f86C9fBd8109Cd44Ea961fDb474e1
       */
      recipientAddress: string;
      /**
       * @description Source chain ID for payment
       * @example 1
       */
      srcChain: number;
      /**
       * @description Destination chain ID where custom execution will occur
       * @example 8453
       */
      dstChain: number;
      /**
       * @description Payment token contract address
       * @example 0xA0b86a33E6441E8A91DEF8f5663ACb4C9B4a1234
       */
      srcTokenAddress: string;
      /**
       * @description Token to be used in custom execution
       * @example 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
       */
      dstTokenAddress: string;
      /**
       * @description Payment amount
       * @example 1000000
       */
      srcAmount: string;
      payload: components["schemas"]["CustomPayload"];
      metadata: components["schemas"]["CustomMetadata"];
      /** @description Optional partner identifier */
      partnerId?: string;
      onramp?: components["schemas"]["Onramp"];
      /**
       * @description Optional address of the order creator
       * @example 0x58241893EF1f86C9fBd8109Cd44Ea961fDb474e1
       */
      creatorAddress?: string;
    };
    /** @description Mint NFT order request */
    MintNftOrderRequest: {
      /**
       * @description Order type
       * @enum {string}
       */
      type: "mint_nft";
      /**
       * @description Address to receive the NFT
       * @example 0x58241893EF1f86C9fBd8109Cd44Ea961fDb474e1
       */
      recipientAddress: string;
      /**
       * @description Source chain ID for payment
       * @example 1
       */
      srcChain: number;
      /**
       * @description Destination chain ID where NFT exists
       * @example 8453
       */
      dstChain: number;
      /**
       * @description Payment token contract address
       * @example 0xA0b86a33E6441E8A91DEF8f5663ACb4C9B4a1234
       */
      srcTokenAddress: string;
      /**
       * @description NFT contract address
       * @example 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
       */
      dstTokenAddress: string;
      /**
       * @description Payment amount
       * @example 1000000
       */
      srcAmount: string;
      payload: components["schemas"]["MintNftPayload"];
      metadata: components["schemas"]["MintNftMetadata"];
      /** @description Optional partner identifier */
      partnerId?: string;
      onramp?: components["schemas"]["Onramp"];
      /**
       * @description Optional address of the order creator
       * @example 0x58241893EF1f86C9fBd8109Cd44Ea961fDb474e1
       */
      creatorAddress?: string;
    };
    /** @description Join tournament order request */
    JoinTournamentOrderRequest: {
      /**
       * @description Order type
       * @enum {string}
       */
      type: "join_tournament";
      /**
       * @description Participant's address
       * @example 0x58241893EF1f86C9fBd8109Cd44Ea961fDb474e1
       */
      recipientAddress: string;
      /**
       * @description Source chain ID for payment
       * @example 1
       */
      srcChain: number;
      /**
       * @description Destination chain for tournament contract
       * @example 8453
       */
      dstChain: number;
      /**
       * @description Payment token contract address
       * @example 0xA0b86a33E6441E8A91DEF8f5663ACb4C9B4a1234
       */
      srcTokenAddress: string;
      /**
       * @description Tournament contract address
       * @example 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
       */
      dstTokenAddress: string;
      /**
       * @description Entry fee amount
       * @example 1000000
       */
      srcAmount: string;
      payload: components["schemas"]["JoinTournamentPayload"];
      metadata: components["schemas"]["TournamentMetadata"];
      /** @description Optional partner identifier */
      partnerId?: string;
      onramp?: components["schemas"]["Onramp"];
      /**
       * @description Optional address of the order creator
       * @example 0x58241893EF1f86C9fBd8109Cd44Ea961fDb474e1
       */
      creatorAddress?: string;
    };
    /** @description Fund tournament order request */
    FundTournamentOrderRequest: {
      /**
       * @description Order type
       * @enum {string}
       */
      type: "fund_tournament";
      /**
       * @description Funder's address
       * @example 0x58241893EF1f86C9fBd8109Cd44Ea961fDb474e1
       */
      recipientAddress: string;
      /**
       * @description Source chain ID for payment
       * @example 1
       */
      srcChain: number;
      /**
       * @description Destination chain for tournament contract
       * @example 8453
       */
      dstChain: number;
      /**
       * @description Payment token contract address
       * @example 0xA0b86a33E6441E8A91DEF8f5663ACb4C9B4a1234
       */
      srcTokenAddress: string;
      /**
       * @description Tournament contract address
       * @example 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
       */
      dstTokenAddress: string;
      /**
       * @description Funding amount
       * @example 1000000
       */
      srcAmount: string;
      payload: components["schemas"]["FundTournamentPayload"];
      metadata: components["schemas"]["TournamentMetadata"];
      /** @description Optional partner identifier */
      partnerId?: string;
      onramp?: components["schemas"]["Onramp"];
      /**
       * @description Optional address of the order creator
       * @example 0x58241893EF1f86C9fBd8109Cd44Ea961fDb474e1
       */
      creatorAddress?: string;
    };
    OrderRequest:
      | components["schemas"]["SwapOrderRequest"]
      | components["schemas"]["CustomOrderRequest"]
      | components["schemas"]["MintNftOrderRequest"]
      | components["schemas"]["JoinTournamentOrderRequest"]
      | components["schemas"]["FundTournamentOrderRequest"];
    /** @description Deposit transaction (payment from user) */
    DepositTx: {
      /**
       * Format: uuid
       * @description Associated order ID
       * @example 5392f7a7-d472-4d6b-9848-bd07117fb82d
       */
      orderId: string;
      /**
       * @description Chain where transaction occurred
       * @example 8453
       */
      chain: number;
      /**
       * @description Sender address (can be null)
       * @example 0xa7539e73700B1726aBA29526606442A491Ef5747
       */
      from?: string | null;
      /**
       * @description Transaction hash
       * @example 0x60ece99a645201668d20db6775a6b3d30967433ff0750b356cdad46d3e13f9c8
       */
      txHash: string;
      /**
       * @description Transaction amount
       * @example 93354000
       */
      amount: string;
      /**
       * @description Transaction timestamp
       * @example 1752505811105
       */
      createdAt: number;
    };
    /**
     * @description Relay transaction status
     * @enum {string}
     */
    RelayStatus: "pending" | "success" | "failure" | "refund" | "delayed" | "waiting";
    /** @description Cross-chain relay transaction */
    RelayTx: {
      /**
       * Format: uuid
       * @description Associated order ID
       * @example 5392f7a7-d472-4d6b-9848-bd07117fb82d
       */
      orderId: string;
      /**
       * @description Chain where relay occurred
       * @example 8453
       */
      chain: number;
      /**
       * @description Relay transaction hash
       * @example 0x9df917e14bb089f74763d1d2662761d75c97a5a068b8a9e411c3d384c9c40d19
       */
      txHash: string;
      /** @example success */
      status: components["schemas"]["RelayStatus"];
      /**
       * @description Relay timestamp
       * @example 1752505817654
       */
      createdAt: number;
    };
    /** @description Final execution transaction */
    ExecuteTx: {
      /**
       * Format: uuid
       * @description Associated order ID
       * @example 5392f7a7-d472-4d6b-9848-bd07117fb82d
       */
      orderId: string;
      /**
       * @description Chain where execution occurred
       * @example 8453
       */
      chain: number;
      /**
       * @description Execution transaction hash
       * @example 0x1234567890abcdef1234567890abcdef12345678
       */
      txHash: string;
      /**
       * @description Execution timestamp
       * @example 1752505820000
       */
      createdAt: number;
    };
    /** @description Refund transaction if order failed */
    RefundTx: {
      /**
       * Format: uuid
       * @description Associated order ID
       * @example 5392f7a7-d472-4d6b-9848-bd07117fb82d
       */
      orderId: string;
      /**
       * @description Chain where refund occurred
       * @example 8453
       */
      chain: number;
      /**
       * @description Refund transaction hash
       * @example 0xabcdef1234567890abcdef1234567890abcdef12
       */
      txHash: string;
      /**
       * @description Refunded amount
       * @example 93354000
       */
      amount: string;
      /**
       * @description Refund status
       * @example success
       * @enum {string}
       */
      status: "success" | "failure";
      /**
       * @description Refund timestamp
       * @example 1752505825000
       */
      createdAt: number;
    };
    /** @description NFT contract details */
    NftContract: {
      /**
       * @description Chain ID where the NFT contract exists
       * @example 8453
       */
      chainId: number;
      /**
       * @description NFT contract address
       * @example 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
       */
      contractAddress: string;
      /**
       * @description NFT price in raw format
       * @example 1000000
       */
      price: string;
      /**
       * @description Human-readable formatted price
       * @example 1.0
       */
      priceFormatted: string;
      currency: components["schemas"]["Token"];
      /**
       * @description NFT image URL
       * @example https://example.com/nft.png
       */
      imageUrl: string;
      /**
       * @description NFT name
       * @example Cool NFT Collection
       */
      name: string;
      /**
       * @description NFT description
       * @example A collection of very cool NFTs
       */
      description: string;
      /**
       * @description Token ID (null for ERC721, specific ID for ERC1155)
       * @example 1
       */
      tokenId: number | null;
      /**
       * @description NFT contract type
       * @example erc721
       * @enum {string}
       */
      type: "erc721" | "erc1155";
    };
    StripeWeb2Support:
      | {
          /**
           * @example false
           * @constant
           */
          isSupport: false;
        }
      | {
          /**
           * @example true
           * @constant
           */
          isSupport: true;
          /**
           * @description Total payment amount formatted in USD
           * @example 10.00
           */
          formattedTotalUsd: string;
          /**
           * @description Onramp amount formatted in USD
           * @example 9.50
           */
          formattedOnrampUsd: string;
          /**
           * @description Stripe fee formatted in USD
           * @example 0.50
           */
          formattedFeeUsd: string;
        };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
